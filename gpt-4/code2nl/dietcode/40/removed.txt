public Data get Selected Data ( ) { String all Selected get Selected ( ) ; ( all Selected all Selected is Empty ( ) ) { ; } ( String selected Item : all Selected Items ) { return get Tree Model ( ) . get Example Data ( row Index ) ; } return null ; }<CODESPLIT>Get the example which is selected in the tree .
public void At ) { Dim ) { ; } Dim View make Dim View ) ; m Dim View . set Visibility ( VISIBLE ) ; m Dim View . set Background Color ( m Dim Color ) ; } m Dim View . set Alpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { ( is Found ( ) ) ( Extract only called once ) ; extract SW . start ( ) ; set ( . adj ) ; int ; ( next Edge Valid ) { next Edge Valid = Edge Iterator . Edge . is Valid ( curr Edge . parent . edge ) ; process Edge ( curr Edge . edge , curr Edge . adj Node , next Edge ) ; } set From Node ( curr Edge . adj Node ) ; reverse Order ( ) ; extract SW . stop ( ) ; return set Found ( true ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static write Int ( , , value ) { ( ) ( value ) ; [ offset + 1 ] = ( byte ) ( value >>> 16 ) ; target [ offset + 3 ] = ( byte ) value ; return Integer . BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visit Get ) expect Match JS ) ) get JS Type ( n . get Last Child ( ) ) ) ; ensure Typed ( n ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class get Typed Class ( reflect type ) { ( type Class ) { ( ( Class ) type ) ; } ( type instanceof Parameterized Type ) { java . lang . reflect . Type raw Paramterized Type = ( ( Parameterized Type ) type ) . get Raw Type ( ) ; return get Typed Class ( raw Paramterized Type ) ; } else if ( type instanceof Type Variable ) { return get Typed Class ( upper Bound ) ; } }<CODESPLIT>Gets the typed class .
public Jimfs ) { Store ) ) ; . to Uri ( uri , path . to Absolute Path ( ) ) ; }<CODESPLIT>Gets the URI of the given path in this file system .
public get ( ) { ( ) { ( Key , shared Secret , transport ) ; } return activity Interface ; }<CODESPLIT>Get the ActivityInterface .
private void init Before List ( ) { List Process Advice Request Process Advices Array List ( ) ; Method invoke get ( ) ; Class processor Class invoke get Class ( ) ; ( processor Class processor Class is Present ( Before . class ) ) { for ( int i = 0 ; i < bcs . length ; i ++ ) { final Class < ? extends Process Advice > bc = bcs [ i ] ; final Process Advice before Request Process Advice = Bean Manager . get Instance ( ) . get Reference ( bc ) ; before Request Process Advices . add ( before Request Process Advice ) ; if ( invoke Holder . is Annotation Present ( Before . class ) ) { for ( int i = 0 ; i < bcs . length ; i ++ ) { final Class < ? extends Process Advice > bc = bcs [ i ] ; before Request Process Advices . add ( before Request Process Advice ) ; } }<CODESPLIT>Initializes before process advices .
init js configure COMMENTS js configure ( Json Parser . Feature . ALLOW _ SINGLE _ QUOTES , true ) ; js Factory . configure ( Json Parser . Feature . ALLOW _ NON _ NUMERIC _ NUMBERS , true ) ; }<CODESPLIT>Creates the JsonFactory .
static void flush Leaks ( Looper looper ) { Handler = Handler ( looper ) { public void handle ( ) { send Delayed ( obtain Message ( ) , THREAD _ LEAK _ CLEANING _ MS ) ; } } ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void add Reset ( String ) { ( buttons ) buttons At ( ) ; ( extend Row ) add Field ( , e ) ; else buttons . add ( e ) ; }<CODESPLIT>Add a reset button .
public static get Volume ) { Audio ) get AUDIO ) ) . get Stream Max Volume ( Audio Manager . STREAM _ MUSIC ) ; }<CODESPLIT>Returns maximum volume the media volume can have
public void remove SR Es ( ISRE Install ... sres ) { ISRE Install SRE get Default SRE ( ) ; String Id SRE SRE get Id ( ) ; ; ( Id ) { } } String normed Default Id To Empty ( Id ) ; boolean Is Removed ; ( ISRE Install sre sres ) { if ( this . sre Array . remove ( sre ) && sre . get Id ( ) . equals ( normed Default Id ) ) { default Is Removed = true ; } refresh SRE List UI ( ) ; if ( default Is Removed ) { if ( this . sre Table . get Item Count ( ) == 0 ) { set Selection ( null ) ; } else { if ( default Index < 0 ) { } else if ( default Index >= this . sre Table . get Item Count ( ) ) { default Index = this . sre Table . get Item Count ( ) - 1 ; } } } this . sres List . refresh ( true ) ; if ( default Is Removed ) { fire Default SRE Changed ( ) ; } update UI ( ) ; }<CODESPLIT>Removes the given SREs from the table .
public static Wiki User get User ( wiki , siteurl ) { Wiki User ; { get ( wiki ) ; set ( get ( user ) ) ; set Email ( get ( " ) ) ; } catch ( File Not Found Exception e ) { String msg = help ( wiki Id , siteurl ) ; LOGGER . log ( Level . SEVERE , msg ) ; } catch ( IO Exception e ) { LOGGER . log ( Level . SEVERE , e . get Message ( ) ) ; } catch ( General Security Exception e ) { LOGGER . log ( Level . SEVERE , e . get Message ( ) ) ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public T ( ) { int retry Count = 0 ; do { T = delegate . ( ) ; ( ! Generated . contains ( ) ) { already Generated . add ( next ) ; return next ; } retry Count ++ ; } while ( retry Count <= number Of Retries ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private boolean Inside ) { get ) get ) LI ) ) && ( node . get Node Type ( ) != Node . TEXT _ NODE || node . get Node Value ( ) . trim ( ) . length ( ) == 0 ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static Residue match Sequence To Protein Sequence seq struct ) { Group atom Position Group ) ; Protein Sequence struct Seq get Protein Sequence For struct atom Position ) ; Substitution Matrix Amino Acid Compound Substitution Matrix Amino Acid Compound Amino Acid Compound get Amino Acid Compound ) ) ) ) ; Aligned Sequence < Protein Sequence , Amino Acid Compound > aligned Seq = pair . get Query ( ) ; Aligned Sequence < Protein Sequence , Amino Acid Compound > aligned Struct = pair . get Target ( ) ; assert ( aligned Seq . get Length ( ) == aligned Struct . get Length ( ) ) ; Residue Number [ ] ca = new Residue Number [ seq . get Length ( ) ] ; for ( int pos = aligned Seq . get Start ( ) . get Position ( ) ; pos <= aligned Seq . get End ( ) . get Position ( ) ; pos ++ ) { if ( aligned Seq . is Gap ( pos ) ) { int struct Index = aligned Struct . get Sequence Index At ( pos ) - 1 ; assert ( struct Index > 0 ) ; Group g = atom Index Position . get ( struct Index ) ; continue ; } if ( ! aligned Struct . is Gap ( pos ) ) { int seq Index = aligned Seq . get Sequence Index At ( pos ) - 1 ; int struct Index = aligned Struct . get Sequence Index At ( pos ) - 1 ; Group g = atom Index Position . get ( struct Index ) ; assert ( 0 <= seq Index && seq Index < ca . length ) ; ca [ seq Index ] = g . get Residue Number ( ) ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
public static merge ( , , , ) { Map String , Object map ( ( Map String , Object ) ) ; Entry String , Object set map entry Set ( ) ; Map < String , Object > map 2 = ( ( Map < String , Object > ) meta Data 2 ) ; Set < Entry < String , Object > > set 2 = map 2 . entry Set ( ) ; Map < String , Object > rep = new Hash Map < String , Object > ( ) ; for ( Entry < String , Object > entry 1 : set 1 ) { String key 1 = entry 1 . get Key ( ) ; if ( map 2 . contains Key ( key 1 ) ) { Object value 1 = map 1 . get ( key 1 ) ; Object value 2 = map 2 . get ( key 1 ) ; if ( value 1 instanceof Double ) { rep . put ( key 1 , value 2 ) ; } } else if ( value 1 instanceof Integer ) { rep . put ( key 1 , value 2 ) ; } } else if ( value 1 instanceof Long ) { rep . put ( key 1 , value 2 ) ; } } if ( value 1 instanceof Boolean ) { rep . put ( key 1 , value 2 ) ; } } } } set 1 . remove All ( rep . entry Set ( ) ) ; set 1 . add All ( rep . entry Set ( ) ) ; set 1 . add All ( set 2 ) ; return meta Data 1 ; }<CODESPLIT>Merges the two Meta objects
public List T sub List ( int arg 0 , int arg ) { move Next ( ) ; } unmodifiable List ( all Results . sub List ( arg 0 , arg 1 ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private prepare Recipient recipients ) { set cwf pub ) ; set ( " cwf . pub . channel " , channel ) ; message . set Metadata ( " cwf . pub . event " , UUID . random UUID ( ) . to String ( ) ) ; message . set Metadata ( " cwf . pub . recipients " , recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private Param ) For Batch ) new Graph Request < T > ( object , params , this . mapper , this . < T > create Mapping Chain ( type ) ) ; this . graph Requests . add ( req ) ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void write Length ( long ) { ( 251 ) { } ( 65536 ) { [ = ( ) ( length >>> 8 ) ; } else if ( length < 16777216 ) { buf [ position ++ ] = ( byte ) ( length >>> 8 ) ; buf [ position ++ ] = ( byte ) ( length >>> 16 ) ; } else { buf [ position ++ ] = ( byte ) ( length >>> 8 ) ; buf [ position ++ ] = ( byte ) ( length >>> 16 ) ; buf [ position ++ ] = ( byte ) ( length >>> 24 ) ; buf [ position ++ ] = ( byte ) ( length >>> 32 ) ; buf [ position ++ ] = ( byte ) ( length >>> 40 ) ; buf [ position ++ ] = ( byte ) ( length >>> 48 ) ; } }<CODESPLIT>Write length .
public static Source , Result Result map ( Source , Source , Result mapper ) { ( is Empty ( ) ) { List < > ( ) ; } for ( T Source item : items ) { T Result mapped Item = mapper . map ( item ) ; result . add ( mapped Item ) ; } return result ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serialize Real Content ) serialize String . value Of ( real . double Value ( ) ) , handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public Bar ( Action Listener Action , boolean Add Help ) { Application = Base Applet . get Shared Instance ( ) . get Application ( ) ; Resource Resources = . get Resource ( ) ; . get Resources ( , ) ; this . Actions ( Action ) ; Bar Bar = Bar ( ) { private static long serial Version UID = 1 L ; public Dimension get Maximum Size ( ) { menu Bar . set Opaque ( false ) ; char [ ] rgch Item Shortcuts = new char [ 20 ] ; menu = this . add Menu ( menu Bar , Thin Menu Constants . FILE ) ; this . add Menu Item ( menu , Thin Menu Constants . PRINT , rgch Item Shortcuts ) ; menu . add Separator ( ) ; this . add Menu Item ( menu , Thin Menu Constants . LOGON , rgch Item Shortcuts ) ; this . add Menu Item ( menu , Thin Menu Constants . LOGOUT , rgch Item Shortcuts ) ; menu . add Separator ( ) ; this . add Menu Item ( menu , Thin Menu Constants . CLOSE , rgch Item Shortcuts ) ; rgch Item Shortcuts = new char [ 20 ] ; menu = this . add Menu ( menu Bar , Thin Menu Constants . EDIT ) ; menu . add Separator ( ) ; if ( old Resources != null ) application . set Resource Bundle ( old Resources ) ; return menu Bar ;<CODESPLIT>Setup the standard menu items .
public static get Attribute For Lane Count ( ) { ( prefs ) { prefs get ( LANE COUNT _ NAME " , DEFAULT _ ATTR _ LANE _ COUNT ) ; } return DEFAULT _ ATTR _ LANE _ COUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd [ get ( nitro , nsrollbackcmd ) throws { nsrollbackcmd = nsrollbackcmd ( ) ; option = ( ) ; option . set _ args ( nitro _ util . object _ to _ string _ withoutquotes ( args ) ) ; return response ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private Element ( ) { ( List 0 ) { ; } ( int k = 0 ; k < i ; k ++ ) { j += rule . get Element No ( ) . get ( k ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String get Proxy Hosts White ( ) { ( Hosts White Hosts White ( ) == 0 ) return new String [ 0 ] ; hosts = ( String [ ] ) _ proxy Hosts White List . to Array ( hosts ) ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean add Metatype Ad ( Metatype Ad metatype Ad ) { ( this . metatype Ads == ) this . metatype Ads = new Linked List < Metatype Ad > ( ) ; this . metatype Ads . add ( metatype Ad ) ; return true ; }<CODESPLIT>Adds a metatype AD .
public ( ) { ( Input Stream available ( ) >= ) { Input Stream ( ) ; } Input Stream close ( ) ; ; { Client get ( m Bucket Name , m Key , null , null , null , null , m Pos , null ) ; } catch ( Service Exception e ) { throw new IO Exception ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean is Super ( JC tree ) { Name name called Method Name ( tree ) ; ( name ) { name . ; } { return false ; }<CODESPLIT>Is this a call to super?
public static get Request from Method boolean include Request request ) { ) ; append ) append 8601 get ) ) append "\ ) ; append ( " from Method : " ) . append ( from Method ) . append ( "\ n " ) ; dump . append ( " Method : " ) . append ( request . get Method ( ) ) . append ( '\ n ' ) ; dump . append ( " Scheme : " ) . append ( request . get Scheme ( ) ) . append ( '\ n ' ) ; dump . append ( " URI : " ) . append ( request . get Request URI ( ) ) . append ( '\ n ' ) ; dump . append ( " Query - String : " ) . append ( request . get Query String ( ) ) . append ( '\ n ' ) ; dump . append ( " Auth - Type : " ) . append ( request . get Auth Type ( ) ) . append ( '\ n ' ) ; dump . append ( " Scheme : " ) . append ( request . get Scheme ( ) ) . append ( '\ n ' ) ; if ( include Headers ) { dump . append ( " Headers :\ n " ) ; while ( headers . has More Elements ( ) ) { String header = headers . next Element ( ) ; } } return ( dump . to String ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validate Not ( To boolean ) { validate Not ( To ) ; if ( string To Check . length ( ) == 0 || ( trim && string To Check . trim ( ) . length ( ) == 0 ) ) { } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static create With ) { ) ; set new Box Layout ( _ panel , Box Layout . Y _ AXIS ) ) ; return _ panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected boolean should Analyze ( ) { ( analyzer File Type ) { file Type accept ( dependency . get Actual File ( ) ) ; } return true ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void register ) get ) , service Class ) ; Settings . Services . add Available Option ( service Class . get Simple Name ( ) ) ;<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public get ( Title ) { get Page Content ( Title "& rvsection =" + section Number , false ) ; return result ; }<CODESPLIT>get the text for the given section
public static double pearson ( , ) { ( ) ( String format ( [% d y [% d ]" , x . length , y . length ) ) ; return 1 - Math . cor ( x , y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static Tile Tile WGS 84 projection Constants . EPSG _ WORLD _ GEODETIC _ SYSTEM ) ; return get Tile Grid ( point , zoom , projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public Vector Layer get Vector Layers ( ) { ( Layer layer layers ) { ( layer instanceof Vector Layer ) { list . add ( ( Vector Layer ) layer ) ; } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void Rmsd ( d , d ) { ( centered ) { Product ( , ) ; { xref Calc clone 3 d Array ( x ) ; xtrans = Calc Point . centroid ( xref ) ; logger . debug ( " x centroid : " + xtrans ) ; xtrans . negate ( ) ; yref = Calc Point . clone Point 3 d Array ( y ) ; ytrans = Calc Point . centroid ( yref ) ; ytrans . negate ( ) ; inner Product ( yref , xref ) ; calc Rmsd ( wsum ) ;<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void set Heading Title ) ) ) Heading ) Heading de julielab jules types Section " ) ; jcas Type . ll _ cas . ll _ set Ref Value ( addr , ( ( Section _ Type ) jcas Type ) . cas Feat Code _ section Heading , jcas Type . ll _ cas . ll _ get FS Ref ( v ) ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( Input Stream is ) throws , , Configuration { Sxmp Sxmp ( ) ; Operation ; { parse ( is ) ; ( Sxmp ) { { ( get ( ) , ) ; { ( ( Request ) ) { ( get Account ( ) null ) { if ( ! processor . authenticate ( req . get Account ( ) ) ) { throw new Sxmp Error Exception ( Sxmp Error Code . AUTHENTICATION _ FAILURE , " Authentication failure " ) ; } if ( operation instanceof Submit Request ) { return processor . submit ( req . get Account ( ) , ( Submit Request ) operation ) ; } else if ( operation instanceof Deliver Request ) { return processor . deliver ( req . get Account ( ) , ( Deliver Request ) operation ) ; } else if ( operation instanceof Delivery Report Request ) { return processor . delivery Report ( req . get Account ( ) , ( Delivery Report Request ) operation ) ; } else { throw new Sxmp Error Exception ( Sxmp Error Code . UNSUPPORTED _ OPERATION , " Unsupported operation request type " ) ; } } catch ( Sxmp Error Exception e ) { logger . warn ( e . get Message ( ) ) ; return new Error Response ( operation . get Type ( ) , e . get Error Code ( ) . get Int Value ( ) , e . get Error Message ( ) ) ; } catch ( Throwable t ) { logger . error ( " Major uncaught throwable while processing request , generating an Error Response " , t ) ; return new Error Response ( operation . get Type ( ) , Sxmp Error Code . GENERIC . get Int Value ( ) , " Generic error while processing request " ) ; }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submit ( String url , Http Request Connection Settings Settings , String Object , String Application Id , String master , Response , List String redirect ) { ( redirect contains ( url ) ) { Push Sender ( The site contains an redirect ! url url ) ; } { redirect add ( url ) ; Http URL Connection http URL Connection ; { String Application Id ':' master ; String 64 . encode Bytes ( credentials . get Bytes ( UTF _ 8 ) ) ; final int status Code = http URL Connection . get Response Code ( ) ; if ( is Redirect ( status Code ) ) { String redirect URL = http URL Connection . get Header Field ( " Location " ) ; else if ( status Code >= 400 ) { logger . log ( Level . SEVERE , " The Unified Push Server returned status code : " + status Code ) ; throw new Push Sender Http Exception ( status Code ) ; else { if ( callback != null ) { callback . on Complete ( ) ; catch ( Push Sender Http Exception pshe ) { throw pshe ; catch ( Exception e ) { logger . log ( Level . INFO , " Error happening while trying to send the push delivery request " , e ) ; throw new Push Sender Exception ( e . get Message ( ) , e ) ; finally { if ( http URL Connection != null ) { http URL Connection . disconnect ( ) ;<CODESPLIT>The actual method that does the real send and connection handling
public String get Child Names ( ) { ( ( ) 0 ) EMPTY NAMES ; ( int 0 ; ; i ++ ) { arr [ i ] = ( ( Ram Resource Core ) children . get ( i ) ) . get Name ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object get Index ( Object array , int index ) throws Util Target Error { Interpreter . debug ( get Index : , array , ", index =" , index ) ; { ( array List ) return ( ( List < > ) array ) . get ( index ) ; Object = Array . get ( array , index ) ; return Primitive . wrap ( , Types . array Element Type ( array . get Class ( ) ) ) ; } ( Index Out Of Bounds Exception e 1 ) { } }<CODESPLIT>Get object from array or list at index .
public static add nitro aaakcdaccount ) { aaakcdaccount addresource aaakcdaccount ) ; addresource . kcdaccount = resource . kcdaccount ; addresource . keytab = resource . keytab ; addresource . realmstr = resource . realmstr ; addresource . delegateduser = resource . delegateduser ; return addresource . add _ resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void ( ) { ( Trace Component . is Tracing ( ) tc . is Entry ( ) ) Sib Tr . ( this , tc , , this ) ; boolean interrupted = false ; ( ! ( ) ) { { ( Trace Component . is Tracing ( ) && tc . is Debug Enabled ( ) ) Sib Tr . debug ( this , tc , " Waiting to get exclusive lock " ) ; wait ( 1000 ) ; } catch ( Interrupted Exception e ) { interrupted = true ; } } while ( i Lock Count > 0 ) { try { wait ( 1000 ) ; } catch ( Interrupted Exception e ) { interrupted = true ; } } if ( interrupted ) { Thread . current Thread ( ) . interrupt ( ) ; } }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public void set CP Option liferay commerce CP Option Option ) { this . cp Option Value Local Service = cp Option Value Local Service ; }<CODESPLIT>Sets the cp option value local service .
public static infer Module Path From ( Declaration ) { Declaration get ( ) ; '/' get ( ) . replace ( '.' , '/' ) : "/" ; }<CODESPLIT>Infers the Struts module path from the given controller class .
int get Leap Month ( int cycle , int year Of Cycle ) { int [ leap Months = this . get Leap Months ( ) ; int lm = 0 ; ( ( index leap Months . ) ) { int test = leap Months [ index ; ( test Years ) { index += . ( 2 ( ( Years test ) / ) , 2 ) ; } else if ( test > elapsed Years ) { break ; } else { break ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet get Snippet ( snippet boolean download Content ) Git Lab Api { ( snippet ) { ( snippet ) ; } Snippet snippet = response . read Entity ( Snippet . class ) ; if ( download Content ) { snippet . set Content ( get Snippet Content ( snippet . get Id ( ) ) ) ; } return snippet ;<CODESPLIT>Get a specific Snippet .
public get ( ) { value ; ix ; ( >= ) { ( d 800 ( dbff <= ffff ) ) { ix ( ix << UTRIE 2 SHIFT ) ( & UTRIE 2 _ DATA _ MASK ) ; return value ; } if ( code Point <= 0 xffff ) { ix = ( ix << UTRIE 2 _ INDEX _ SHIFT ) + ( code Point & UTRIE 2 _ DATA _ MASK ) ; return value ; if ( code Point < high Start ) { ix = ( UTRIE 2 _ INDEX _ 1 _ OFFSET - UTRIE 2 _ OMITTED _ BMP _ INDEX _ 1 _ LENGTH ) + ( code Point >> UTRIE 2 _ SHIFT _ 1 ) ; ix += ( code Point >> UTRIE 2 _ SHIFT _ 2 ) & UTRIE 2 _ INDEX _ 2 _ MASK ; ix = ( ix << UTRIE 2 _ INDEX _ SHIFT ) + ( code Point & UTRIE 2 _ DATA _ MASK ) ; return value ; } if ( code Point <= 0 x 10 ffff ) { return value ; } } return error Value ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object get Attribute Object ( name , ) JM { = get M Bean Server ( ) ; return server . get Attribute ( obj Name , attr Name ) ; }<CODESPLIT>Get MBean attribute object
public synchronized void set Selected ( selected ) { ( ( ) selected selected ) { } selected ; selected selected ; ( selected ) { update ( ) ; } { update ( get ( selected ) to String ( ) ) ; } run On GUI Thread If Exists Otherwise Run Direct ( new Runnable ( ) { public void run ( ) { for ( Listener listener : listeners ) { listener . on Selection Changed ( selected Index , old Selection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public get Photo photo Date ) Flickr { get PHOTO STATS , " photo _ id " , photo Id , date ) ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public Document get Document ( Get Document get Document ) { Validator . not Null ( get Document , get Document cannot ) ; String path Segments = { ; String path Parameters = { ; Request = Request . get ( Request . construct Http Url ( get End Point ( ) , path Segments , path Parameters ) ) ; builder . query ( " version " , version Date ) ; for ( Entry < String , String > header : sdk Headers . entry Set ( ) ) { builder . header ( header . get Key ( ) , header . get Value ( ) ) ; } builder . header ( " Accept " , " application / json " ) ; return create Service Call ( builder . build ( ) , Response Converter Utils . get Object ( Document Status . class ) ) ; }<CODESPLIT>Get document details .
public Pager get Closes Issues Or merge Request Iid Per Page ) Git Lab Pager Per Page projects " , get Project Id Or Path ( project Id Or Path ) , " merge _ requests " , merge Request Iid , " closes _ issues " ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class > clazz , String , ... ) { ( DEBUG ) { String exception = "" ; ( != . == 1 ) { String Writer sw = String Writer ( ) ; Print Writer pw = new Print Writer ( sw ) ; e [ 0 ] . print Stack Trace ( pw ) ; pw . flush ( ) ; exception Str = " exception = " + sw . to String ( ) ; } } }<CODESPLIT>To output the error log message to the error out
public static TH ( Style Class , String , Content body ) { ( Class ) htmltree add Style ( style Class ) ; htmltree . add Attr ( Html Attr . SCOPE , null Check ( scope ) ) ; return htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtain Divider Margin theme ) Typed typed get ) get Theme ) obtain Styled theme material Dialog Divider Margin ) ; set Divider Margin ( typed Array . get Dimension Pixel Size ( 0 , 0 ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void set Button Button button Screen View set Button button ? null : button . get Screen Field View ( ) ) ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { Red Black Node Key , Value > x = select ( root , k ) ; return x . get Key ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add Request ) write ) ( ) ; try { } finally { lock . write Lock ( ) . unlock ( ) ; } }<CODESPLIT>Adds a request handler to this queue .
public static with Print Output Stream @ Closure value Print ) Closure < T > closure ) throws IO Exception { return with Writer ( new Print Writer ( stream ) , closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void add Route Actor actor ) Route { add Route new Route ( url Pattern , true ) , actor Class ) ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void send Queued Events ( Keen , Keen ) { ( ! is Active ) { handle Inactive ( ) ; ; } ( ) { ; ( ! is Network Connected ( ) ) { handle Failure ( , ( Network not ." ) ) ; ; } Keen ( : project ) ; try { String project Id = use Project . get Project Id ( ) ; Map < String , List < Object > > event Handles = event Store . get Handles ( project Id ) ; String response = publish All ( use Project , events ) ; if ( response != null ) { try { handle Add Events Response ( event Handles , response ) ; } catch ( Exception e ) { Keen Logging . log ( " Error handling response to batch publish : " + e . get Message ( ) ) ; } } handle Success ( callback ) ; } catch ( Exception e ) { handle Failure ( callback , e ) ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public Queued Blocking ( ( Array Blocking Queue ) get Thread Pool ( ) . get Queue ( ) ) . size ( ) + ( ( Array Blocking Queue ) get Thread Pool ( ) . get Queue ( ) ) . remaining Capacity ( ) : - 1 ) ; }<CODESPLIT>this should only be used as an estimate
final public Auxiliary Root ( boolean Foot ) throws Parse { boolean 000 = ; jjtree . open Node Scope ( 000 ) ; { t = Node ( ) ; jjtree . close Node Scope ( 000 , ) ; ( Throwable jjte 000 ) { ( 000 ) { jjtree . clear Node Scope ( 000 ) ; else { jjtree . pop Node ( ) ; if ( jjte 000 instanceof Runtime Exception ) { { if ( true ) throw ( Runtime Exception ) jjte 000 ; } } if ( jjte 000 instanceof Parse Exception ) { { } } if ( true ) throw ( Error ) jjte 000 ; finally { if ( jjtc 000 ) { jjtree . close Node Scope ( jjtn 000 , true ) ;<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
I Directory add To Parent ( [ ] , I Directory I , I , boolean propagate Mod Time , int child Index ) { I Directory Parent = ; write ( ) ; { { Name ( ) ; } ( File Not Found ) { return ; } ( Parent == ) return null ; if ( ! new Node . is Directory ( ) ) { I Node File new F = ( I Node File ) new Node ; Block Info [ ] blocks = new F . get Blocks ( ) ; for ( int i = 0 ; i < blocks . length ; i ++ ) { } } } finally { write Unlock ( ) ; } return new Parent ; }<CODESPLIT>Add node to parent node when loading the image .
public void set ( Mind Map model , boolean notify Change ) { this . ( ) ; { ( this . Under ) { } ( Topic this . selected Topics ) { selected . add ( . get Position Path ( ) ) ; this . selected Topics . clear ( ) ; Mind Map = this . model ; this . model = assert Not Null ( must not , model ) ; . on Change ( this , old Model , this . model ) ; } do Layout ( ) ; revalidate ( ) ; boolean selection Changed = false ; for ( final int [ ] pos Path : selected Paths ) { if ( topic == null ) { selection Changed = true ; else if ( ! Mind Map Utils . is Hidden ( topic ) ) { this . selected Topics . add ( topic ) ; if ( selection Changed ) { fire Notification Selection Changed ( ) ; repaint ( ) ; finally { this . unlock ( ) ; if ( notify Model Change Listeners ) { fire Notification Mind Map Changed ( true ) ;<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public Operation Future Load Balancer delete ( Load Balancer load Balancer ) { Load Balancer Metadata load Balancer Metadata = find By ( load Balancer ) ; return Operation Future < > ( load Balancer , new No Waiting Job Future ( ) ) ; }<CODESPLIT>Delete load balancer
public Get Response get ( Get Request request ) { check Not Null ( request , request should not ." ) ; check String Not Empty ( request get Id ( ) , request snapshot Id should no be empty ." ) ; return invoke Http Client ( internal Request , Get Snapshot Response . class ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
void Loggers )  Bugsnag Appender add Excluded apache catalina ." "\\[ Tomcat .*\\][.]\\[.*\\][.]\\[/.*\\][.]\\[.*\\]" ) ; Bugsnag Appender add Excluded . eclipse . jetty . server . Http Channel " ) ; Bugsnag Appender . add Excluded Logger Pattern ( " io . undertow . request " ) ; } } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( relationships ) { ( ) { } ( ; ; ) { ( null == base [ i ] ) { continue ; } set . add All ( base [ i ] ) ; if ( null != relationships . data [ i ] ) { set . remove All ( relationships . data [ i ] ) ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static E E get ( Class E type , String name , Reflections reflections ) { E = ; Class E = reflections . get Sub Types Of ( type ) ; for ( Class E clazz : ) { ( ! . is ( clazz . get Modifiers ( ) ) ) { Classes . add ( clazz ) ; } } Iterator < Class < ? extends E > > iterator = endpoint Classes . iterator ( ) ; while ( iterator . has Next ( ) ) { Class < ? extends E > next = iterator . next ( ) ; iterator . remove ( ) ; } } if ( endpoint Classes . size ( ) != 0 ) { if ( endpoint Classes . size ( ) > 1 ) { log . info ( " Warning : found multiple candidates for {} endpoint : {}" , name , endpoint Classes ) ; } try { } catch ( Exception e ) { e . print Stack Trace ( ) ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public void ( AO Stream ) { ( Trace Component Tracing ( ) tc ( ) ) Sib Tr ( tc ) ; Stream sinfo get ( ) ; ( ( sinfo ) sinfo ( ) ) { synchronized ( sinfo ) { sinfo item ( AO ) ; } } { FFDC Exception ( e , " com . ibm . ws . sib . processor . impl . Anycast Output Handler . written Started Flush " , " 1 : 2865 : 1 . 89 . 4 . 1 " , this ) ; Sib Tr . exception ( tc , e ) ; Sib Tr . error ( tc , " INTERNAL _ MESSAGING _ ERROR _ CWSIP 0001 " , new Object [ ] { " com . ibm . ws . sib . processor . impl . Anycast Output Handler " , " 1 : 2872 : 1 . 89 . 4 . 1 " } ) ; if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " written Started Flush " , e ) ; throw e ; } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " written Started Flush " ) ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static get Subreports ( Layout report Layout ) { subreports Array ( ) ; Band band report Layout get Band ( ) ; ( 0 , rows = band . get Row Count ( ) ; i < rows ; i ++ ) { Band Element be = list . get ( j ) ; if ( be instanceof Report Band Element ) { subreports . add ( ( ( Report Band Element ) be ) . get Report ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public App get Apps ) Hello Sign { App http Client with ) get API _ APP _ LIST _ URI ) . as Json ( ) ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detach Agent ( Object p Vm ) { { ( p Vm != ) { Class clazz = p Vm . get Class ( ) ; Method method = clazz . get Method ( detach ) ; method . set Accessible ( ) ; method . invoke ( p Vm ) ; } } ( Invocation Target e ) { } catch ( No Such Method Exception e ) { } catch ( Illegal Access Exception e ) { } }<CODESPLIT>Detach from the virtual machine
public Object Graph ( Class ... ) { ( Class c : classes ) { if ( c == null ) { } excluded Classes . add ( c ) ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void set Sampling ( double double ) { sample ; sample Max = max ; this . scores = new double [ num Samples ] ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void Product At Var ( , Var Tensor prod , excl , excl 2 ) { ( nb 0 ; nb Nbs T ( ) ; nb ) { ( nb excl 1 || nb == excl 2 ) { continue ; } prod . elem Multiply ( nb Msg ) ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected find Last ( Q Path item Path ) { istate item Add . get ( ) ; if ( istate . get Data ( ) . get Q Path ( ) . equals ( item Path ) ) return istate ; } return null ; }<CODESPLIT>Find last ItemState .
public void add dispatcher Abs Actor dispatcher ) dispatchers contains dispatcher ) ) return ; } dispatchers . put ( dispatcher Id , dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
Int List Int List ( ( ) ) ; List add ( , 0 , ( ) , ) ; double lambda adj lambda / ( ( ) epochs ) ; int owned int ; int assigned positive 0 ; int int ( ) ; fill ( , 1 ) ; Vec dots = new Dense Vector ( W . rows ( ) ) ; long t = 0 ; for ( int epoch = 0 ; epoch < epochs ; epoch ++ ) { Collections . shuffle ( order ) ; for ( int i : order ) { t ++ ; double eta = 1 / ( lambda _ adj * t ) ; Vec x _ i = D . get Data Point ( i ) . get Numerical Values ( ) ; b . copy To ( dots ) ; W . multiply ( x _ i , 1 . 0 , dots ) ; if ( y _ i == - 1 ) { W . get Row View ( k ) . mutable Subtract ( eta , x _ i ) ; b . increment ( k , - eta ) ; } else { int k _ true _ max = 0 ; if ( dots . get ( k _ true _ max ) < 1 ) { W . get Row View ( z ) . mutable Add ( eta , x _ i ) ; b . increment ( z , eta ) ; if ( assignments [ i ] < 0 ) assigned _ positive _ instances ++ ; else owned [ assignments [ i ] ] -- ; owned [ z ] ++ ; W . mutable Multiply ( 1 - 1 . 0 / t ) ; b . mutable Multiply ( 1 - 1 . 0 / t ) ;<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype get nitro ) appfwfieldtype appfwfieldtype ) appfwfieldtype appfwfieldtype [ ] ) obj . get _ resources ( service ) ; return response ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public create Promise Ready Promise delay Delay Ready Promise add public void Delay delay CONNECT DELAY CONNECT DELAY Apns Delay compare And delay Delay bootstrap schedule Runnable public void run bootstrap Apns bootstrap clone Augmenting Reflective Client Socket Channel Class ( Apns Channel Factory . this . bootstrap Template . config ( ) . group ( ) ) , CHANNEL _ READY _ PROMISE _ ATTRIBUTE _ KEY , channel Ready Promise ) ) ; final Channel Future connect Future = bootstrap . connect ( ) ; connect Future . add Listener ( new Generic Future Listener < Channel Future > ( ) { public void operation Complete ( final Channel Future future ) { if ( ! future . is Success ( ) ) { try Failure And Log Rejected Cause ( channel Ready Promise , future . cause ( ) ) ; } } } ) ; connect Future . channel ( ) . close Future ( ) . add Listener ( new Generic Future Listener < Channel Future > ( ) { public void operation Complete ( final Channel Future future ) { channel Ready Promise . try Failure ( new Illegal State Exception ( " Channel closed before HTTP / 2 preface completed ." ) ) ; } } ) ; } } , delay , Time Unit . SECONDS ) ; return channel Ready Promise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List String load ( String option File Name ) { File option File File ( option File Name ) ; String Writer Writer String Writer ( ) ; { Input Stream Stream File Input Stream ( option File ) ; copy ( Stream , Writer ) ; } ( File Not Found ) { exit ( 1 ) ; catch ( IO Exception e ) { System . exit ( 1 ) ; String string = string Writer . to String ( ) ; String Tokenizer string Tokenizer = new String Tokenizer ( string ) ; while ( string Tokenizer . has More Tokens ( ) ) { args . add ( string Tokenizer . next Token ( ) ) ; return args ;<CODESPLIT>Load options from a file
public void run ( ) { { current take ( ) ; context ( ) ; { execution Context Manager . initialize ( context ) ; } catch ( Execution Context Exception e ) { } this . current Job . run ( ) ; } catch ( Interrupted Exception e ) { } finally { this . execution . remove Context ( ) ; } }<CODESPLIT>Execute one job .
public ) { get Locals ) ( name , model ) ; return this ; }<CODESPLIT>Binds an object to the response .
public get Byte Array ( Integer ) { ( ) { _ map . get ( offset ) ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object get ( ) { get ( Under Inspection ) ; get Methods ( ) ; Object [ ] result = new Object [ meta Methods . size ( ) ] ; int i = 0 ; Meta Method meta Method = ( Meta Method ) iter . next ( ) ; result [ i ] = method Info ( meta Method ) ; } return result ;<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ parse ( String pollers ) { String [ periods = pollers . split ( ",\\ *" ) ; long [ = long [ periods . ; boolean = false ; = Factory . get ( Pollers . class ) ; ( int = 0 ; periods . ; ) { String period = periods [ ] ; try { result [ i ] = Long . parse Long ( period ) ; if ( result [ i ] <= 0 ) { errors = true ; } } catch ( Number Format Exception e ) { errors = true ; } } if ( errors || periods . length == 0 ) { return DEFAULT _ PERIODS ; } else { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void set ( String , String value ) { ( value ) ; ; boolean has ; ( ( ) ) { if ( has Footer ) { _ footer Keys . remove ( i ) ; _ footer Values . remove ( i ) ; } else { has Footer = true ; _ footer Values . set ( i , value ) ; if ( ! has Footer ) { _ footer Keys . add ( key ) ; _ footer Values . add ( value ) ;<CODESPLIT>Sets a footer replacing an already - existing footer
public void add Attribute value ) { start Tag ) { patched patch ( name ) ; final String local Name = get Local Name ( patched Name ) ; add Attribute Always ( uri , local Name , patched Name , " CDATA " , value , false ) ; }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public create ( Session session ) { ( is Empty ( Part ) is Empty ( Part ) ) { ( Missing content ) ; = new Mime Message ( session ) ; msg . set Subject ( subject ) ; msg . set From ( new Internet Address ( from ) ) ; msg . set Content ( create Multi Part ( ) ) ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static Curve Interpolation create Curve From Monte Carlo Libor ( String name , LIBOR Monte Carlo Simulation , double start ) Calculation { get ( start ) ; libors At ( ) ; double Libor get Libor Period Discretization ( ) get ( Libor ) ; if ( first Libor Time > start Time ) { libors At Time Index . add ( model . get LIBOR ( start Time , start Time , first Libor Time ) ) ; } times [ 0 ] = 0 ; int index Offset = first Libor Time == start Time ? 0 : 1 ; for ( int i = first Libor Index ; i < model . get Number Of Libors ( ) ; i ++ ) { libors At Time Index . add ( model . get LIBOR ( time Index , i ) ) ; times [ i - first Libor Index + index Offset ] = model . get Libor Period Discretization ( ) . get Time ( i ) - start Time ; } return Forward Curve Interpolation . create Forward Curve From Forwards ( name , times , libors , model . get Libor Period Discretization ( ) . get Time Step ( first Libor Index ) ) ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public Void delete Word ( Word delete Word ) { Validator not Null ( delete Word , delete Word cannot ) ; String path Segments { / customizations , } ; String path Parameters { ; Request Request . delete ( Request Builder . construct Http Url ( get End Point ( ) , path Segments , path Parameters ) ) ; for ( Entry < String , String > header : sdk Headers . entry Set ( ) ) { builder . header ( header . get Key ( ) , header . get Value ( ) ) ; } return create Service Call ( builder . build ( ) , Response Converter Utils . get Void ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean Move ( float , float ) { float newx player ; float newy player ; if ( blocked ( newx , newy ) ) { if ( blocked ( newx , player Y ) ) { return false ; } else { return true ; } } else { return true ; } } else { return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ) { { clear ) ; . prepare For Read ( ) ; this . data Logger . recover ( this ) ; } catch ( Exception e ) {<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clear Sources ) GVR Audio Audio Sources ) set Listener ( null ) ; } m Audio Sources . clear ( ) ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
public static Number Vector Number Vector . Factory guess Factory ( Type ) { ( Vector Type ) { } ( factory ) { { Field f = . get Restriction Class ( ) . get Field ( FACTORY ) ; factory = ( Number Vector . Factory V > ) f . get ( null ) ; } catch ( Exception e ) { Logging Util . warning ( " Cannot determine factory for type " + in . get Restriction Class ( ) , e ) ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { ( ! ( ) ) ( ) ; ( ! Save ( ) ) Save ( ) ; ( paths ) paths Maps Map ( ) ; ( Root Dirs ) Root Dirs Array List ( ) ; ( int 0 ; Labels ; ) { paths . put ( i , new Array List < File > ( ) ) ; } while ( data Set Iterator . has Next ( ) ) { Data Set next = data Set Iterator . next ( ) ; if ( mini Batch Size < 0 ) mini Batch Size = next . num Examples ( ) ; Data Set curr Example = next . get ( i ) ; curr Example . save ( example ) ; paths . get ( curr Example . outcome ( ) ) . add ( example ) ; } } int nums Saved = 0 ; while ( ! paths . is Empty ( ) ) { List < Data Set > mini Batch = new Array List < > ( ) ; while ( mini Batch . size ( ) < mini Batch Size && ! paths . is Empty ( ) ) { for ( int i = 0 ; i < num Labels ; i ++ ) { Data Set d = new Data Set ( ) ; d . load ( paths . get ( i ) . remove ( 0 ) ) ; mini Batch . add ( d ) ; } else paths . remove ( i ) ; } } if ( ! root Save Dir . exists ( ) ) root Save Dir . mkdirs ( ) ; if ( ! mini Batch . is Empty ( ) ) { Data Set merge = Data Set . merge ( mini Batch ) ; if ( data Normalization != null ) data Normalization . transform ( merge ) ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap double unix ) { gps countleaps gps true ) - 1 ; return isleap ( gps Time ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void set Sun Marshaller Marshaller ) SUN _ HEADERS ; _ set Property ( a Marshaller , s Property Name , s XML Headers ) ; }<CODESPLIT>Set the Sun specific XML header string .
private void Keep Alive Bridge bridge Client http Client TS Bridge Keep Alive Bridge Keep Alive bridge TS gson http Client Bridge Alive Alive public void on Bridge Keep Alive Alive Alive gson from Bridge Keep Alive print ( Json Syntax Exception e ) { logger . error ( " Json Syntax Exception " + e . get Message ( ) , e ) ; e . print Stack Trace ( ) ; throw new Runtime Exception ( e ) ; } http Client . set Disrupted ( false ) ; if ( response Status == Call Stats Response Status . RESPONSE _ STATUS _ SUCCESS ) { keep Alive Status Listener . on Success ( ) ; } else if ( response Status == Call Stats Response Status . INVALID _ AUTHENTICATION _ TOKEN ) { stop Keep Alive Sender ( ) ; keep Alive Status Listener . on Keep Alive Error ( Call Stats Errors . AUTH _ ERROR , keep Alive Response . get Msg ( ) ) ; } else { http Client . set Disrupted ( true ) ; } } public void on Failure ( Exception e ) { logger . info ( " Response exception " + e . to String ( ) ) ; http Client . set Disrupted ( true ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public Streaming Output get ( long Parameter query ) Jax { Streaming Output Output Streaming Output ( ) { public void write ( Output Stream output ) Jax { final String revision = query Params . get ( Query Parameter . REVISION ) ; final String wrap = query Params . get ( Query Parameter . WRAP ) ; final String do Node Id = query Params . get ( Query Parameter . OUTPUT ) ; final Long rev = revision == null ? null : Long . value Of ( revision ) ; serialize ( resource Name , node Id , rev , nodeid , output , wrap Result ) ; } } ; return s Output ;<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static Entity create Entities ( , Object Reference mors ) { ( mors ) { Entity 0 ; } ( 0 ; i < mors . length ; i ++ ) { mes [ i ] = create Exact Managed Entity ( sc , mors [ i ] ) ; } return mes ;<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static create Template ( Cms Cms Content ) { -> { ; ( null ) { result = formatter . get Attributes ( ) . get ( key ) ; } if ( result == null ) { Cms Xml Content content = content Supplier . get ( ) ; if ( content != null ) { } } return result ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static Byte create Write ( logical Length ) { cdb ( ) ; cdb ( LOGICAL ADDRESS _ OFFSET ) ; cdb . put Int ( logical Block Address ) ; cdb . position ( TRANSFER _ LENGTH _ OFFSET ) ; cdb . put Short ( transfer Length ) ; cdb . rewind ( ) ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( Byte Buffer dsts , , ) { ( rc ) { rc ; } Byte Buffers . move ( app Read , dsts , offset , length ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void set Int ( value ) { 0 ] . put Int ( offset , value ) ; } else { set Int Multi Segments ( segments , offset , value ) ; } }<CODESPLIT>set int from segments .
public User get User username )  of ( get User ( username ) ) ) ; } return ( Git Lab Api . create Optional From Exception ( glae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void register Limiter Component ( ) { set Config Property ( Prop Name ". client type , jest ) ; set Config Property ( component Prop Name + ". client . protocol " , "${ apiman . es . protocol }" ) ; set Config Property ( component Prop Name + ". client . host " , "${ apiman . es . host }" ) ; set Config Property ( component Prop Name + ". client . port " , "${ apiman . es . port }" ) ; set Config Property ( component Prop Name + ". client . username " , "${ apiman . es . username }" ) ; }<CODESPLIT>The rate limiter component .
public d get From ( int ) { int 0 ; ( int 0 ; 0 0 ; ++ ) { for ( int y = 0 ; y < grid [ 0 ] . length ; y ++ ) { for ( int x = 0 ; x < grid . length ; x ++ ) { if ( dim Counter == grid Point ) { point . x = minx + lattice Constant * x ; return point ; } dim Counter ++ ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void set COLOR ) { ) { } else { color . set ( COLOR ) ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void ( ) { ( Wrapper ) { ( Wrapper . release ( ) ) { shared Buffer . remove Event ( event Id ) ; } else { shared Buffer . upsert Event ( event Id , event Wrapper ) ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String to Sql ( boolean show Parameters ) { String ; ( for Paginator ) { = . get Dialect ( ) . Select ( , , Query , Bys , limit , ) ; } { } ( show Parameters ) { String = new String Builder ( sql ) . append ( ", with parameters : " ) ; join ( sb , params , ", " ) ; sql = sb . to String ( ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source get Source From ( Stylesheet ) throws Transformer { Source ; Transformer processor get Stylesheet Processor ( ) ; uriresolver processor . get URI Resolver ( ) ; if ( uriresolver != null ) { s = uriresolver . resolve ( href , base ) ; } return s ;<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public get Title ) { Journal Journal ) ) ) de . julielab . jules . types . Journal " ) ; return jcas Type . ll _ cas . ll _ get String Value ( addr , ( ( Journal _ Type ) jcas Type ) . cas Feat Code _ title ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static of ( Object ) { Cast as ( o ) ; } return new Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void add Terms ( Sparse Double Vector meaning , String , distance ) { ( String ) { basis get ( ) ; ( 1 ) continue ; meaning . set ( dimension , weighting . weight ( distance , window Size ) ) ; ++ distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public Array List View get ( ) { { ( . command Logging ) { } view Fetcher . get ( , ) ; } ( e ) { e . print Stack Trace ( ) ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
Weight Vectors Sparse Double weight Vec vertex Weight vertex weight Vec  weight Vec vertex To Weight Vector . get ( vertex ) ; if ( weight Vec == null ) { weight Vec = compute Weight Vector ( g , vertex ) ; vertex To Weight Vector . put ( vertex , weight Vec ) ; } } } return weight Vec ; } else return compute Weight Vector ( g , vertex ) ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static ( Row Description Vectorized Row Batch selected ) { Description field Types get ( ) ; ( field ; field < selected Fields . length ; field Idx ++ ) { int orc Idx = selected Fields [ field Idx ] ; read Field ( rows , field Idx , field Types . get ( orc Idx ) , batch . cols [ orc Idx ] , rows To Read ) ; } return rows To Read ;<CODESPLIT>Fills an ORC batch into an array of Row .
public Cal get ) I Cal Property > ( component . get Properties ( ) . values ( ) ) ; }<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double compute Tau And Divide ( double double ) { double tau ; ( ; ; ++ ) { tau += d * d ; } tau = Math . sqrt ( tau ) ; if ( u [ j ] < 0 ) tau = - tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic get Epic ( String epic , Map String , Epic epic Map ) { { Response Entity String Entity make ( url ) ; String Body Entity get Body ( ) ; JSON Object issue ( JSON Object ) parse ( Body ) ; ( issue ) { ; } Epic ( issue , epic Map , ) ; } catch ( Parse Exception pe ) { LOGGER . error ( " Parser exception when parsing teams " , pe ) ; } catch ( Hygieia Exception e ) { LOGGER . error ( " Error in calling JIRA API " , e ) ; } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable get Constraints ( Component ) { get Component ( ) ; model . layout Constraints . get ( child ) ; } return null ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public String , String get Reverse ( ) { Entry String , String map ( ) ; ( Entry String , String me : entries ) { String k = me . get Key ( ) ; Set < String > trans List = me . get Value ( ) ; for ( String trans : trans List ) { Set < String > entry = r Map . get ( trans ) ; if ( entry == null ) { to Add . add ( k ) ; r Map . put ( trans , to Add ) ; } else { entry . add ( k ) ; } } } return r Map ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential set Refresh Token ( Token ) { ( ) ; { ( Token ) { check ( Please and set set Transport set Client " + " and set Token Server Url / set Token Server Encoded Url " ) ; } this . refresh Token = refresh Token ; } finally { lock . unlock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void make Current ( EGL egl ) { ( EGL EGL 14 EGL DISPLAY ) { ( , NOTE make Current ) ; } ( ! EGL 14 . egl Make Current ( m EGL Display , egl Surface , egl Surface , m EGL Context ) ) { } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static Safe Value ... paths ) { return navigate Or Default ( default Value , source , paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clear Cache ( Commerce Warehouse commerce Warehouse ) { finder Cache . clear Cache ( FINDER _ _ _ LIST _ WITH _ PAGINATION ) ; finder Cache . clear Cache ( FINDER _ _ _ LIST _ WITHOUT _ PAGINATION ) ; clear Finders Cache ( ( Commerce Warehouse Item Model Impl ) commerce Warehouse Item , true ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String , String output ) throws MPXJ , { MPP Reader reader MPP Reader ( ) ; reader read ( ) ; String Data File Name ; String Name ; ( mpp File Type ) { 8 { ; } { ; } 12 { ; 14 { ; File Input Stream is File Input Stream ( ) ; POIFS File = new POIFS File System ( is ) ; is . close ( ) ; Directory Entry root = fs . get Root ( ) ; for ( Task task : m _ project . get Tasks ( ) ) { map Text ( task . get Name ( ) , replacements ) ; replacements . clear ( ) ; for ( Resource resource : m _ project . get Resources ( ) ) { map Text ( resource . get Name ( ) , replacements ) ; map Text ( resource . get Initials ( ) , replacements ) ; replacements . clear ( ) ; Project Properties properties = m _ project . get Project Properties ( ) ; map Text ( properties . get Project Title ( ) , replacements ) ; process Replacements ( m _ project Dir , " Props " , replacements , true ) ; replacements . clear ( ) ; map Text ( properties . get Project Title ( ) , replacements ) ; map Text ( properties . get Subject ( ) , replacements ) ; map Text ( properties . get Author ( ) , replacements ) ; map Text ( properties . get Keywords ( ) , replacements ) ; map Text ( properties . get Comments ( ) , replacements ) ; process Replacements ( root , "\ 005 Summary Information " , replacements , false ) ; replacements . clear ( ) ; map Text ( properties . get Manager ( ) , replacements ) ; map Text ( properties . get Company ( ) , replacements ) ; map Text ( properties . get Category ( ) , replacements ) ; process Replacements ( root , "\ 005 Document Summary Information " , replacements , false ) ; File Output Stream os = new File Output Stream ( output ) ; fs . write Filesystem ( os ) ; os . flush ( ) ; os . close ( ) ; fs . close ( ) ;<CODESPLIT>Process an MPP file to make it anonymous .
public void set Rollback ( ) { ( is Trace On tc is Entry ( ) ) { Tr ( tc , set Rollback , this ) ; } Transaction Coordinator Coord get Coord ( ) ; ( Coord ) { Coord set Rollback ( ) ; { { . set Rollback Only ( ) ; } catch ( Exception e ) { throw new Illegal State Exception ( " No active transaction " ) ; } if ( is Trace On && tc . is Entry Enabled ( ) ) { Tr . exit ( tc , " set Rollback Only " ) ;<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse 404 Response ( String content ) { return ; } . ( not found , error is {}" , content ) ; return false ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private Listenable Future write Blocks To Targets ( Collection DBB . Container output Buffers , int serialized ) { . check Argument ( . size ( ) serialized . ) ; . check Argument ( output Buffers . size ( ) serialized . ) ; Iterator DBB . Container = output Buffers . iterator ( ) ; int serialized Index = 0 ; ( Table task _ table Tasks ) { final DBB Pool . BB Container container = container Iter . next ( ) ; buf . position ( 0 ) ; Callable < DBB Pool . BB Container > value For Target = Callables . returning ( container ) ; if ( task . m _ filters != null ) { for ( Snapshot Data Filter filter : task . m _ filters ) { value For Target = filter . filter ( value For Target ) ; } } if ( write Future != null ) { write Futures . add ( write Future ) ; } } return Futures . all As List ( write Futures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean Terminal ( Atom atom Atom atom To ) { atom To get ( atom ) . length == 1 ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler Async Result Void create Handler ( Message Json Object message ) { return Handler Async Result < Void > > ( ) { public void handle ( Async Result < Void > result ) { if ( result . failed ( ) ) { } else { message . reply ( new Json Object ( ) . put String ( " status " , " ok " ) ) ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public Photo All Context get All Contexts ( String photo Id ) throws Flickr { Photo All Context all Context Photo All Context ( ) ; parameters put ( method , METHOD ALL CONTEXTS ) ; parameters put ( photo id , photo Id ) ; ( is Error ( ) ) { } Collection Element photos Element get Collection ( ) ; ( Element set Element photos Element ) { ( set Element . get Tag Name ( ) . equals ( " set " ) ) { Photo Set pset = new Photo Set ( ) ; pset . set Title ( set Element . get Attribute ( " title " ) ) ; pset . set Secret ( set Element . get Attribute ( " secret " ) ) ; pset . set Id ( set Element . get Attribute ( " id " ) ) ; pset . set Farm ( set Element . get Attribute ( " farm " ) ) ; pset . set Primary ( set Element . get Attribute ( " primary " ) ) ; pset . set Server ( set Element . get Attribute ( " server " ) ) ; set List . add ( pset ) ; all Context . set Photo Set List ( set List ) ; } else if ( set Element . get Tag Name ( ) . equals ( " pool " ) ) { Pool pool = new Pool ( ) ; pool . set Title ( set Element . get Attribute ( " title " ) ) ; pool . set Id ( set Element . get Attribute ( " id " ) ) ; pool . set Url ( set Element . get Attribute ( " url " ) ) ; pool . set Icon Server ( set Element . get Attribute ( " iconserver " ) ) ; pool . set Icon Farm ( set Element . get Attribute ( " iconfarm " ) ) ; pool . set Member Count ( Integer . parse Int ( set Element . get Attribute ( " members " ) ) ) ; pool List . add ( pool ) ; all Context . set Pool List ( pool List ) ; } } return all Context ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map String , Object get Field Data ( Map String , Object properties ) { Map String , Object Return ; ( properties ) { Return String , Object ( ) ; ( int ; ; ) { String Field Name ( String ) properties get ( str Field Number ) ; if ( str Field Name == null ) break ; Record record = this . get Main Record ( ) ; if ( str Field Name . index Of ( '.' ) != - 1 ) { str Field Name = str Field Name . substring ( str Field Name . index Of ( '.' ) + 1 ) ; Base Field field = null ; if ( record != null ) field = record . get Field ( str Field Name ) ; } } return prop Return ; }<CODESPLIT>GetFieldData Method .
protected void connect ( , ) { Guard get ( ) on Network ( ) ; connect ( , port ) ; connected Address = address ; connected = true ;<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private Escaped   of DN dn   '"' case '\\' : case ',' : case '=' : case '+' : case '<' : case '>' : case '#' : case ';' : case ' ' : case '*' : case '%' : case '_' : return chars [ pos ] ; default : return get UTF 8 ( ) ; } }<CODESPLIT>returns escaped char
private static Matchers ) With Citrus ) With Citrus SUFFIX ) ) . substring ( Citrus . VALIDATION _ MATCHER _ PREFIX . length ( ) , expression . length ( ) - Citrus . VALIDATION _ MATCHER _ SUFFIX . length ( ) ) ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public Element implementing ( Element Element ) { Element get ( implementing , Element ) ; Element intfcs Sub ( type Element , false ) ; Iterator < Type Element > sub Interfaces Iter = intfcs . iterator ( ) ; while ( sub Interfaces Iter . has Next ( ) ) { while ( implementing Classes Iter . has Next ( ) ) { Type Element c = implementing Classes Iter . next ( ) ; result . add ( c ) ; } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add correct ; errors . add All ( validation . errors ) ; warnings . add All ( validation . warnings ) ;<CODESPLIT>Adds a validation result to this .
public static String to Field String ( Object ) { Field fields to Field Array ( , , ) ; ( int 0 ; fields ; ) { . append ( field . name ) ; buf . append ( "=" ) ; buf . append ( '"' ) ; buf . append ( field . value ) ; buf . append ( '"' ) ; } else { buf . append ( field . value ) ; } if ( i + 1 < fields . length ) buf . append ( "," ) ; } return buf . to String ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public String get ( ) { get Name ( clazz . get Component Type ( ) ) + "[]" ; } return clazz . get Name ( ) ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void add ( block ) { ( Initialized ( ) ) { ; } block Map get ( block ) ; ( null ) { del Block Info ( info ) ; } info . last Scan Time = get New Block Scan Time ( ) ; add Block Info ( info ) ; adjust Throttler ( ) ;<CODESPLIT>Adds block to list of blocks
public get Tile ) { get ) ) get ) ) ) || ( y < 0 ) ) { throw new Illegal Argument Exception ( ) ; } return image [ x ] [ y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBP Dsl ( String name , String Len , String ) { item Len Expression = assert Expression Chars ( bit Len Expression ) ; item . size Expression = assert Expression Chars ( size Expression ) ; this . add Item ( item ) ; return this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object index Of ( String Pattern , String Input , , boolean , boolean match All ) Pattern { Pattern Matcher Input Pattern Matcher Input ( Input ) ; Perl 5 Matcher Perl 5 Matcher ( ) ; compile += Perl 5 Compiler SINGLELINE MASK ; ( ) ; Pattern get Pattern ( Pattern , compile ) ; if ( offset <= str Input . length ( ) ) { Array matches = new Array Impl ( ) ; while ( matcher . contains ( input , pattern ) ) { if ( ! match All ) { return new Double ( match ) ; } matches . append EL ( match ) ; } if ( matches . size ( ) != 0 ) { return matches ; } return 0 ;<CODESPLIT>return index of the first occurence of the pattern in input text
private Object check By Ldap Filter ( String filter ) { Reference references get ( ) get ( ( String ) , filter ) ; ( is Empty Or ( references ) ) { ; } ( references . length == 1 ) { return get Bundle Context ( ) . get Service ( references [ 0 ] ) ; } }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void ) { tevent ) { tevent ) ; } omgr ) { omgr ) ; } { Dropping no longer managed object " , " oid " , get Oid ( ) , " class " , get Class ( ) . get Name ( ) , " event " , event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static create Overlay Group ) { Identifiers create Identifier Ifmap ICS Ifmap ICS _ METADATA _ PREFIX , " overlay - manager - group " , name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static Double Matrix cholesky ( Double Matrix ) { Double Matrix . dup ( ) ; int Native . dpotrf ( U , . , . , 0 , . ) ; ( 0 ) { new Lapack Argument Exception ( " DPOTRF " , - info ) ; } else if ( info > 0 ) { } clear Lower ( result ) ; return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean is Caller ( String class Name , String method Name ) { Throwable Throwable ( ) ; ( stack Elements ) { . log ( Level . , Empty call stack ) ; ; } boolean match All Method "*" . equals ( method Name ) ; ( int ; stack Elements . ; i ++ ) { return match All Method ? true : stack Elements [ i ] . get Method Name ( ) . equals ( method Name ) ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public Input Stream set ) { execute ( " setflag " , name , value ) ; }<CODESPLIT>set JVM command line flag
public Q add Position expr ) { Expressions template expr get ) "{ 0 }" , expr ) ; return query Mixin . add Flag ( new Query Flag ( position , flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ( Channel ) { ( ) ; remote get Remote ( ) ; String scheme pipeline ( ) . get ( Ssl Handler . class ) != null ? " https " : " http " ; return new Connection Info ( host Address , remote Address , scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDP Domain get PDP Domain ( String pdp Domain Name ) throws { String domain Ranges = ; ( serialized Cache ) { ( serialized Cache . contains Key ( pdp Domain Name ) ) { domain Ranges = serialized Cache . get ( pdp Domain Name ) ; boolean should Request Domain Ranges = check Domain Ranges ( domain Ranges ) ; { ( should Request Domain Ranges ) { . ( Fetching {}" , ) ; Input Stream = URL Connection Tools . get Input Stream ( ) ; String xml = Fat Cat Client . convert Stream To String ( ) ; domain Ranges = XML . get Domain Ranges From XML ( xml ) ; ( domain Ranges ) cache ( pdp Domain Name , domain Ranges ) ; } } catch ( Malformed URL Exception e ) { } String pdb Id = null ; for ( String domain Range : domain Ranges ) { Substructure Identifier struc Id = new Substructure Identifier ( domain Range ) ; if ( pdb Id == null ) { pdb Id = struc Id . get Pdb Id ( ) ; } } ranges . add All ( struc Id . get Residue Ranges ( ) ) ; } return new PDP Domain ( pdp Domain Name , ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public get ) search View ) search View get Context ( ) ; } else if ( support View != null ) { return support View . get Context ( ) ; } }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean is Macro Cycle ( Ring ring , Ring ) { ( ring get Atom Count ( ) 8 ) ; boolean ; ( ring other ) continue ; if ( other . contains ( bond ) ) { found = true ; break ; } } if ( ! found ) return true ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T > T To Java ( Entity ) { { ( == ) { return ; } populate ( , ) ; return ; } ( Instantiation e ) { } catch ( Illegal Access Exception e ) { throw new Runtime Exception ( e ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void update ( Object ) { get ( ) ; . activate ( cc ) ; } else { auth Cache Service Ref . deactivate ( cc ) ; }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static with ( query read Document Document Change ) { ( query read ) { volatile Document documents ; public Document get ( ) { ( documents ) { synchronized ( ) { ( documents ) { documents ( ) ; } } } return Collections . unmodifiable List ( documents ) ; } public List < Document Change > get Document Changes ( ) { return Collections . unmodifiable List ( document Changes ) ; } public int size ( ) { return document Set . size ( ) ; } public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( o == null || get Class ( ) != o . get Class ( ) ) { return false ; } Query Snapshot that = ( Query Snapshot ) o ; } public int hash Code ( ) { return Objects . hash ( query , this . get Document Changes ( ) , this . get Documents ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean read ( In In Outbox Amp outbox Amp headers ) { Method Hamp method Hamp ; { method Hamp read Method ( In ) ; } ( Throwable ) { ( FINER ( ) ) ; ( In ) ; ; Method Amp method method Hamp get Method ( ) ; method Hamp get Loader ( ) ; Thread thread = Thread . current Thread ( ) ; thread . set Context Class Loader ( loader ) ; Object [ ] args = read Args ( method Hamp , h In ) ; if ( log . is Loggable ( _ log Level ) ) { } long timeout = 1000 L ; try { send Message . offer ( timeout ) ; } catch ( Throwable e ) { log . fine ( e . to String ( ) ) ; if ( log . is Loggable ( Level . FINEST ) ) { log . log ( Level . FINEST , e . to String ( ) , e ) ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private get ( Upload ) { ( get ( REMOTE ) With ( ) ) { get ( ) ; } if ( file . get Property ( PARAM _ REMOTE _ PATH ) . contains ( "/" ) ) { return tmp [ tmp . length - 1 ] ; } return file . get Property ( PARAM _ REMOTE _ PATH ) ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initialize task ) { Group buffers add Group buffers ) ; buffers Length Input Gauge task ) ) ; buffers . gauge ( " output Queue Length " , new Output Buffers Gauge ( task ) ) ; buffers . gauge ( " in Pool Usage " , new Input Buffer Pool Usage Gauge ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void double Click ( String Name ) throws Q Taste { { Region ( rect ) double Click ( file Name ) ; } catch ( Exception ex ) { } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void set SSE Customer ( SSE Customer sse ) { ( sse sse ) { Argument Exception ( " Either SSE Customer Key or SSE Aws Key Management Params must not be set at the same time ." ) ; } }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void on Failure ) Toast make get ) LENGTH _ LONG ) . show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paint Drop ( Sea Glass Context context , ) { Table . Drop Location loc . get Drop Location ( ) ; ( loc ) { ; ( short Color ) { ; rect get Drop Line ( loc ) ; ( rect null ) { int x = rect . x ; int w = rect . width ; if ( color != null ) { extend Rect ( rect , true ) ; g . set Color ( color ) ; if ( ! loc . is Insert Column ( ) && short Color != null ) { g . set Color ( short Color ) ; g . fill Rect ( x , rect . y , w , rect . height ) ; rect = get V Drop Line Rect ( loc ) ; if ( rect != null ) { int y = rect . y ; int h = rect . height ; if ( color != null ) { extend Rect ( rect , false ) ; g . set Color ( color ) ; if ( ! loc . is Insert Row ( ) && short Color != null ) { g . set Color ( short Color ) ;<CODESPLIT>Paint the drop lines if any .
public Datalog Program create Datalog SWRL Rule ) accept ) not Supported ) clear ) ; } Datalog Program dp = datalog Factory . get Datalog Program ( ) ; dp . append Rule ( facts ) ; return dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflate Authn Request ( decoded ) { inflated inflate ( decoded ) ; return inflated ; } return Compression Utils . decode Byte Array To String ( decoded Bytes ) ; }<CODESPLIT>Inflate authn request string .
public static Framework create Filesystem Framework filesystem Framework ) { ) ) { generate File ( name , property File , false , properties , true ) ; } return create ( name , property File , filesystem Framework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clear Context ( ) { Context embedded Context = . ; ( configurator Property ) { clear Context ( log Context Configuration ) ; } ( configurator Context Configuration ) { clear Context ( ( Context Configuration ) configurator ) ; } { ( String name Names ) { Logger logger = embedded Log Context . get Logger If Exists ( name ) ; if ( logger != null ) { final Handler [ ] handlers = logger . clear Handlers ( ) ; if ( handlers != null ) { for ( Handler handler : handlers ) { handler . close ( ) ; logger . set Filter ( null ) ; logger . set Use Parent Filters ( false ) ; logger . set Use Parent Handlers ( true ) ; logger . set Level ( Level . INFO ) ;<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public execute ) { Blocking block For Single delegate . execute ( ) , timeout , time Unit ) ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
String filename this . filename ; Input Stream ; ( ) { Byte Array Input Stream ( ) ; ( source Map Result source Map 0 ) { source Map Result . set Value ( source Map ) ; ( filename ) { File file File ( cmgr . get ( ) , filename ) ; ( source Map 0 ) { = new File Input Stream ( file ) ; } else { Object Input Stream is = new Object Input Stream ( new File Input Stream ( file ) ) ; try { data = ( Cache Data ) is . read Object ( ) ; } catch ( Class Not Found Exception e ) { throw new IO Exception ( e . get Message ( ) , e ) ; } finally { IO Utils . close Quietly ( is ) ; } if ( source Map Result != null ) { source Map Result . set Value ( source Map ) ; } result = new Byte Array Input Stream ( bytes ) ; } } else { throw new IO Exception ( ) ; return result ;<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void Include And ) get By Matches ) ) By get Rows Matching ( ) ) { get Ignore By Matches ( ) . add All ( table . find Elements ( by ) ) ; if ( get Include By Matches ( ) == null ) { for ( By by : get Include Only Rows Matching ( ) ) { get Include By Matches ( ) . add All ( table . find Elements ( by ) ) ;<CODESPLIT>Does the table comparison
public Diff inline ( , ) { set Error ( ) ; { . inline Diff Displayer . display ( this . diff Manager . diff ( previous , next , null ) ) ; } set Error ( e ) ; return null ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static get Messages Around Until ) { ) ; get ) get ) get ) submit ) -> { { ) ; get Messages Around As channel , around ) . peek ( messages :: add ) . filter ( condition ) . find First ( ) ; future . complete ( new Message Set Impl ( until Message . map ( message -> messages ) . or Else ( Collections . empty List ( ) ) ) ) ; } catch ( Throwable t ) { future . complete Exceptionally ( t ) ; } } ) ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean find Sip Application ( Input Stream stream ) { { raw Class Bytes = stream . available ( ) ; stream . read ( raw Class Bytes ) ; boolean = contains ( raw Class Bytes , BYTES ) ; ( one ) ; } ( e ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
Map String , Object Map Map String , Object ( ) ; { ind 0 ; ( Option option get ( ) ) { option process ( Map , String value Of ( params ind ) ) ; } ( arg : this . remote Program . get Arguments ( ) ) { arg . set Value Using Parser ( String . value Of ( params [ ind ++ ] ) ) ; catch ( Exception e ) { throw new M Bean Exception ( e ) ; return job Data Map ;<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void ( String ) { Token get Next Token ( ) ; ( Token . VALUE ) { } buf . append ( t . get Value ( ) ) ; t = get Next Token ( ) ; if ( t . token Type == Token Type . EOL ) { return ; } Vopt ( buf ) ; } }<CODESPLIT>Vopt = EOL V
public void add Value ) { Value null ) _ add Header ( s Name , s Value ) ; }<CODESPLIT>Add the passed header as is .
public static ( ) { return cal ( number List , Double Stream :: max ) ; }<CODESPLIT>Max number .
public get Chaincode Response ( ) { ( status Return ) { status Return ; } { Proposal Response Deserializer proposal Response Deserializer get Proposal Response Deserializer ( ) ; return status Return Code ; } catch ( Invalid Argument Exception e ) { throw e ; } catch ( Exception e ) { throw new Invalid Argument Exception ( e ) ;<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( JC Decl > queue ) { generate ( queue , null ) ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static Enhanced create ( , sub , , , , parameters ) { { Enhanced ( , sub , , , parameters ) ; ( ex ) { throw new Runtime Exception ( " Failed to create versioned mime type : " + primary + "/" + sub , ex ) ;<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static Long With Value ) { Long Long ) ; result != null ? ( long ) result : default Value ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void set ( String iso ) Tag { ( COMMITTED ( iso ) ) { } ( UNCOMMITTED . equals ( iso ) ) { } else if ( TRANSACTION _ REPEATABLE _ READ . equals ( iso ) ) { } else if ( TRANSACTION _ SERIALIZABLE . equals ( iso ) ) { } else { throw new Jsp Tag Exception ( Resources . get Message ( " TRANSACTION _ INVALID _ ISOLATION " ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( ) { { init Traversal ( ) ; Scope ( ) ; traverse Branch ( ) ; pop Scope ( ) ; } throw Unexpected Exception ( unexpected Exception ) ; }<CODESPLIT>Traverses a parse tree recursively .
public Request find By Workspace workspace ) { "/ workspaces /% tags workspace ) ; Request Tag > ( this , Tag . class , path , " GET " ) ;<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule Criteria Sequence peek Cli ) , peek ( ) . set Operation ( Operation . FIND ) , peek ( ) . set Criteria ( match ( ) ) ) ; }<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlink Last ( Node < E > ) { . item = ; . = ; last = ; ( == ) = null ; else prev . next = null ; size -- ; mod Count ++ ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void Properties ( String , Object , String user Dn , char ) { put ( Context SECURITY _ AUTHENTICATION , " simple " ) ; env . put ( Context . SECURITY _ PRINCIPAL , user Dn ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team create Team ) Rpc And , " create Team " , name , tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void check File ( String ) Problem { ; ( File separator Char '\\' ) { compile ( "\\*?(.+\\\\)*.+" ) ; } ( File separator Char '/' ) { compile ( "\\*?(.+/)*.+" ) ; } { } Matcher m = p . matcher ( s ) ; if ( ! m . matches ( ) ) { throw new Problem Exception ( " The string \"" + s + "\" is not a proper file name ." ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ) Transaction Sharding Transaction entry Set ( ) ) { entry . get Value ( ) . close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String get Bar ( long percentage ) { String String ( ) ; append ( percentage ) ; append ( [" ) ; append ( "=" ) ; ( == percentage - 1 ) { sb . append ( ">" ) ; else { sb . append ( " " ) ; sb . append ( "] " ) ; return sb . to String ( ) ;<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( , ) { ( ) { ( : dependencies ) { resolve ( dependency , result ) ; } blocked By . remove ( element ) ; result . add ( element ) ; } }<CODESPLIT>Resolves an element .
public camunda Out ( , ) { param set Camunda ( source ) ; param . set Camunda Target ( target ) ; add Extension Element ( param ) ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
create Arguments Reference ) { IR ) ; result . set JS Type ( arguments Type Supplier . get ( ) ) ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date to Date ( String String ) { Date ; { df . parse ( String ) ; } ( Parse ) { . out . println ( ex . fill In Stack Trace ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public static cusolver Rf cusolver Rf handle zero boost cusolver Rf Numeric Properties Native ( handle , zero , boost ) ) ; }<CODESPLIT>CUSOLVERRF set and get numeric properties
public static ) { ? quote ( ( String ) obj ) : obj ; }<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred Object delete Uid Async ( String type , String name ) { Id Type uid _ type = Id . To Id Type ( type ) ; ( uid _ type ) { METRIC : return . delete Async ( name ) ; default : Argument Exception ( " Unrecognized UID type : " + uid _ type ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scroll Down ) Logging ) Logging scroll Down ")" ) ;  scroller . scroll List ( waiter . wait For And Get View ( index , List View . class ) , Scroller . DOWN , false ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void make Doc Method meth tree ) { Doc Doc ) . get ( meth ) ; if ( result != null ) { if ( tree Path != null ) result . set Tree Path ( tree Path ) ; } else { method Map . put ( meth , result ) ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public ( method ) Pickle Pyro { internal call ( method , null , 0 , true , arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String format As Percentage ( value , ) { float average value ; PERCENT _ FORMATTER . format ( average ) ;<CODESPLIT>Returns value converted to percentage format .
public static JTS expr deltax deltay ) { Operation expr get ) , Spatial Ops . TRANSLATE , expr , Constant Impl . create ( deltax ) , Constant Impl . create ( deltay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static request Web Content ( String url ) throws TV Rage { { Http Get http Get Http Get ( url ) ; http Get add ( accept , xml ) ; ( get ( ) >= 500 ) { TV Rage ( Api Type HTTP _ 503 _ ERROR , url ) ; } else if ( response . get Status Code ( ) >= 300 ) { throw new TV Rage Exception ( Api Exception Type . HTTP _ 404 _ ERROR , url ) ; return response . get Content ( ) . get Bytes ( DEFAULT _ CHARSET ) ; catch ( IO Exception ex ) {<CODESPLIT>Get content from URL in byte array
private static boolean is Numeric ( String value ) { ( ! Character . is Digit ( ) ) { ; } } return true ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
public Map String , String > get Foo ( ) { foo . put ( " foo " , " bar " ) ; return foo Obj ; }<CODESPLIT>Controller to just support pinging .
protected static void fire Array Event ( Json Config Config ) { ( Config is Event Triggering ( ) ) { Json Event Listener listener ( Json Event Listener ) listeners ( ) ; { listener on Array ( ) ; } catch ( Runtime Exception e ) { log . warn ( e ) ; } } } }<CODESPLIT>Fires a start of array event .
public static Runnable sneaked Sneaky Runnable runnable ) ) ) Sneaky Runnable > casted Runnable = ( Sneaky Runnable < Runtime Exception > ) runnable ; casted Runnable . run ( ) ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( Bandwidth Client client , String , Map String , Object ) throws App , Parse , , { assert ( client ) ; String domains client get User Instance ( Bandwidth DOMAINS _ URI _ PATH , id ) ; final Rest Response response = client . post ( domains Uri , params ) ; return new Domain ( client , json Object ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream String get Types ( Event ) { ( modeshape jcr observation Event ) { { Stream Type types Stream ( ) ; ( Node Type type : mode Event . get Mixin Node Types ( ) ) { types . add ( type ) ; } types . add ( mode Event . get Primary Node Type ( ) ) ; return types . build ( ) . map ( Node Type :: get Name ) ; } catch ( final Repository Exception e ) { } } return empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void process ( Context context ) { ( has ( ) ) { ; } process Header Line ( line , context . get Document Model ( ) ) ; } }<CODESPLIT>Process the header of the file .
public get ( username ) { boolean Alive ( ) ; ( alive ) { create Connection ( url , username , password ) ; return connection ;<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static render Pad ( pad boolean ) { render ( ) ; ( = 0 ; i < pad ; i ++ ) { builder . append ( ' ' ) ; return builder ;<CODESPLIT>Render some leading spaces onto a line of html .
"/ xdsl eligibility ; ( ) ; Object , Object > ( ) ; add Body ( o , " city " , city ) ; add Body ( o , " contact Name " , contact Name ) ; add Body ( o , " street " , street ) ; add Body ( o , " street Number " , street Number ) ; String resp = exec ( q Path , " POST " , sb . to String ( ) , o ) ; return convert To ( resp , t 5 ) ; }<CODESPLIT>Get the active lines at given address
private static evaluate Deque operators Deque ) operators ) ) get Boolean As operators . pop ( ) , values . pop ( ) , values . pop ( ) ) ) ; return replace Integer String By Boolean Representation ( values . pop ( ) ) ;<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public write ( boolean ) { ; long request Expire request Expire ; ( request Expire request Expire Current ( ) ) { close ( ) ; } synchronized ( write Lock ) { long now = Current Time . get Current Time Actual ( ) ; long expires = _ socket Timeout + now ; do { result = write Native ( _ socket Fd , buffer , offset , length ) ; } while ( result == Jni Stream . TIMEOUT _ EXN && Current Time . get Current Time Actual ( ) < expires ) ; } if ( is End ) { close Write ( ) ; } return result ; }<CODESPLIT>Writes to the socket .
public void set Ambient Light  ambient gl gl GL GL LIGHTING ) ; gl . gl Enable ( GL 2 . GL _ LIGHT 0 ) ; gl . gl Lightfv ( GL 2 . GL _ LIGHT 0 , GL 2 . GL _ AMBIENT , ambient , 0 ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
Big set Choice ) { ) ; ; ) Choice = multi Choice Count . multiply ( fields [ i ] . set Multi Choice Count ( ) ) ; return multi Choice Count ; }<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete boolean ) API { delete get ) "? =" ) ; Http Client Helpers . throw If Not Ok ( response ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void add Name To Application Map ( String name ) { String Name = get Application Name ( ) ; ( Name == ) ; Concurrent String list = application Map . get ( app Name ) ; if ( list == null ) { if ( list == null ) list = new List ; } list . add ( name ) ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static get Table ( , Table Location , String Field ) { ( Field Field is Empty ( ) ) { String Fields get Fields ( , ) ; ( Fields is Empty ( ) ) { ( The not contain a Geometry field , then the extent " + " cannot be computed " ) ; } geometry Field = geometry Fields . get ( 0 ) ; } if ( rs . next ( ) ) { return ( ( Geometry ) rs . get Object ( 1 ) ) . get Envelope Internal ( ) ; throw new SQL Exception ( " Unable to get the table extent it may be empty " ) ;<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void   reply error specified ."     reply error " message " , " No index specified ." ) ) ; return ; } context . execute ( new Action < Object > ( ) { public Object perform ( ) { return data . get List ( format Key ( name ) ) . get ( index ) ; } } , new Handler < Async Result < Object > > ( ) { public void handle ( Async Result < Object > result ) { if ( result . failed ( ) ) { message . reply ( new Json Object ( ) . put String ( " status " , " error " ) . put String ( " message " , result . cause ( ) . get Message ( ) ) ) ; } else { message . reply ( new Json Object ( ) . put String ( " status " , " ok " ) . put Value ( " result " , result . result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static Plot Canvas plot ( String id , double [ ) { Histogram histogram = Histogram ( ) ; histogram . set ID ( id ) ; double [ lower Bound = { ; ; double [ [ freq = histogram . get Histogram ( ) ; ( int = 0 ; freq . ; ) { ( freq [ i ] [ 1 ] > upper Bound [ 1 ] ) { } } canvas . get Axis ( 0 ) . set Grid Visible ( false ) ; canvas . add ( histogram ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static List , List split ( List training , double proportion ) { ( proportion proportion ) { ( Proportion should ) ; } ( proportion 5 ) { } List small List Array List ( ) ; List > large List = new Array List < > ( ) ; int small List Size = ( int ) Math . floor ( proportion * training Data . size ( ) ) ; int ct = 0 ; Set < Integer > indices = new Hash Set < > ( ) ; while ( ct < small List Size && training Data . size ( ) > indices . size ( ) ) { int index = ( int ) ( Math . random ( ) * ( training Data . size ( ) - 1 ) ) ; while ( indices . contains ( index ) ) { index = ( int ) ( Math . random ( ) * ( training Data . size ( ) - 1 ) ) ; } indices . add ( index ) ; ct ++ ; } return new Immutable Pair < > ( small List , large List ) ;<CODESPLIT>Shuffle the data and split by proportion
public static void get Screen Shot ABGR ( Byte Buffer bgra , Buffered Image ) { Writable Raster wr = . get Raster ( ) ; Data Buffer Byte db = ( Data Buffer Byte ) wr . get Data Buffer ( ) ; [ ] Array = db . get Data ( ) ; bgra . clear ( ) ; bgra . get ( Array ) ; bgra . clear ( ) ; int width = wr . get ( ) ; int = wr . get Height ( ) ; for ( int = 0 ; / 2 ; ) { for ( int = 0 ; width ; x ++ ) { int in Ptr = ( y * width + x ) * 4 ; int out Ptr = ( ( height - y - 1 ) * width + x ) * 4 ; cpu Array [ out Ptr + 0 ] = a 1 ; cpu Array [ out Ptr + 1 ] = b 1 ; cpu Array [ out Ptr + 2 ] = g 1 ; cpu Array [ out Ptr + 3 ] = r 1 ; cpu Array [ in Ptr + 0 ] = a 2 ; cpu Array [ in Ptr + 1 ] = b 2 ; } }<CODESPLIT>Good format for java swing .
int = . size ( ) ; int [ labels = int [ ; ( . Reverse ) { . ( ) ; } ( int = 0 ; ; ) { List List String = d . as ( ) ; Collection < String > clique Features = features . get ( k ) ; data [ j ] [ k ] = new int [ clique Features . size ( ) ] ; int m = 0 ; for ( String feature : clique Features ) { int index = feature Index . index Of ( feature ) ; if ( index >= 0 ) { m ++ ; } else { } } if ( m < data [ j ] [ k ] . length ) { int [ ] f = new int [ m ] ; System . arraycopy ( data [ j ] [ k ] , 0 , f , 0 , m ) ; IN wi = document . get ( j ) ; labels [ j ] = class Index . index Of ( wi . get ( Answer Annotation . class ) ) ; if ( flags . use Reverse ) { Collections . reverse ( document ) ; return new Pair < int [ ] [ ] [ ] , int [ ] > ( data , labels ) ;<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List Class All ( String Name ) { ( Name == ) { } ( factories ) { List Callable Class > l = factories . get ( service Name ) ; if ( l != null ) { for ( Callable < Class < ? > > c : l ) { try { classes . add ( c . call ( ) ) ; } catch ( Exception e ) { } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decode C String ( Byte ) throws IO { int = . bytes Before ( Bson Constants . STRING _ TERMINATION ) ; ( < 0 ) IO ( " string termination not found " ) ; buffer . skip Bytes ( length + 1 ) ; return result ; }<CODESPLIT>default visibility for unit test
public void add ( JMF Type the ) { JS Type ( JS Type ) the ; ( ) JS Type ; { JS Type Cases . length + 1 ] ; System . arraycopy ( old Cases , 0 , cases , 0 , old Cases . length ) ; new Case . parent = this ; new Case . sibling Position = cases . length - 1 ; cases [ new Case . sibling Position ] = new Case ;<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public summarize ( ) { append ( clip Vol =" ) append ( clip Vol ) ; append ( =[" ) ; ii ; ( ii 0 ) { buf . append ( ", " ) ; } buf . append ( sound Type ) ; } return buf . append ( "]" ) . to String ( ) ;<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private String , String get ( ) { String , String map ( ) ; String ( String ) ( ) ; Matcher key Pattern . matcher ( key ) ; if ( matcher . matches ( ) ) { String id = matcher . group ( 2 ) ; String property Value = props . get Property ( key ) ; map . put ( id , property Value ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public static raw Uncompress ( ) { impl . raw Uncompress ( input Addr , input Size , dest Addr ) ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( [ ] b , int off , int ) { this . check Increase Array ( len ) ; this . pos += len ; }<CODESPLIT>Writes a byte array content into the stream
public Operation patch Health Health health Health health ) Patch Health Request request Patch Health Request ) set Health health health to String ( ) ) . set Health Check Resource ( health Check Resource ) . add All Field Mask ( field Mask ) . build ( ) ; return patch Health Check ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initialize Nox Margin ( Typed Array attributes ) { float nox Margin Default Value get Resources ( ) get ( R dimen . default _ nox _ item _ margin ) ; nox Config . set Nox Item Margin ( nox Item Margin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static Operation failed error ) Operation ( index , event Index , error , null ) ; }<CODESPLIT>Returns a failed operation result .
public static Integers ( lhs , rhs , ) { not Null ( lhs ) ; not Null ( rhs ) ; Validate . not Null ( action ) ; Insn List ret = new Insn List ( ) ; ret . add ( lhs ) ; ret . add ( rhs ) ; ret . add ( action ) ; ret . add ( not Equal Label Node ) ; return ret ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static Format of ( int , int width , int ) { ( ! check Flag Consistency ( , width UNSET ) ) { } ( ( width 1 width _ _ ) width UNSET ) { Argument ( " invalid width : " + width ) ; } if ( ( precision < 0 || precision > MAX _ ALLOWED _ PRECISION ) && precision != UNSET ) { } return new Format Options ( flags , width , precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void triple Click ) { get triple click ) ; mouse , p . y , 3 , Opera Mouse Keys . LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initialize Nox Placeholder Typed Drawable placeholder Drawable styleable nox placeholder placeholder ) . get Resources ( ) . get Drawable ( R . drawable . ic _ nox ) ; } nox Config . set Placeholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void prune ( Explorer Output output , Keys Keys ) { ( Keys . get Invalid Optional Keys ( ) ) { pruned Graph . remove ( key ) ; output . remove Binding ( key ) ; } output . set Graph ( pruned Graph . update ( ) ) ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private Persistent XML Description get ( ) { 0 ; } ( version . equals ( Version . VERSION _ 1 _ 1 ) ) { return simple Mapper Parser _ 1 _ 1 ; } return simple Mapper Parser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String get Absolute Template ( String template Name , boolean include ) { Fast String Writer Fast String Writer ( ) ; ( . index Of ( ) ) { . append ( ) ; int . Index Of ( ) ; buf . append ( tmp . substring ( 0 , i ) ) ; buf . append ( SLASH _ UNDR ) ; } else { buf . append ( SLASH _ UNDR ) ; } if ( include Extension ) { buf . append ( EXTENSION ) ; } String uri = buf . to String ( ) ; buf . close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scan ( String start Path ) throws , { String List = context . get ( start Path ) ; ( List ) { ( String path : dir List ) { } } else if ( path . ends With ( "/" ) ) { scan Resource Paths ( path ) ; } if ( path . ends With ( "/ implicit . tld " ) ) { parse Tld ( path ) ; } } else if ( path . ends With ( TLD _ EXT ) ) { parse Tld ( path ) ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected boolean Drag SVG start SVG drag boolean ) ) . during Drag ( start Point , drag Point , evt , inside ) ; } return true ; }<CODESPLIT>Method called during drags .
private PGP Ring create Ring user create Ring )" {}, {}, {}" user set "********" PGP Ring generator Creating RSA pair generator RSA generator RSA generator init RSA Generation Parameters Big Of 10001 Secure Generating Signing Bc PGP signing Bc PGP PGP RSA SIGN generator generate Date Generating Encyption Bc PGP encryption Bc PGP PGP RSA ENCRYPT generator generate Date Generating PGP Subpacket Subpacket PGP Subpacket Subpacket set SIGN CERTIFY Subpacket . set Preferred Symmetric Algorithms ( false , get Preferred Encryption Algorithms ( ) ) ; signature Subpacket Generator . set Preferred Hash Algorithms ( false , get Preferred Hashing Algorithms ( ) ) ; signature Subpacket Generator . set Preferred Compression Algorithms ( false , get Preferred Compression Algorithms ( ) ) ; LOGGER . debug ( " Generating Encyption Key Properties " ) ; PGP Signature Subpacket Generator encryption Subpacket Generator = new PGP Signature Subpacket Generator ( ) ; encryption Subpacket Generator . set Key Flags ( false , Key Flags . ENCRYPT _ COMMS | Key Flags . ENCRYPT _ STORAGE ) ; LOGGER . info ( " Creating PGP Key Ring Generator " ) ; generator = new PGP Key Ring Generator ( PGP Public Key . RSA _ SIGN , signing Key Pair , user Id , new Bc PGP Digest Calculator Provider ( ) . get ( Hash Algorithm Tags . SHA 1 ) , signature Subpacket Generator . generate ( ) , null , new Bc PGP Content Signer Builder ( PGP Public Key . RSA _ SIGN , Hash Algorithm Tags . SHA 256 ) , new Bc PBE Secret Key Encryptor Builder ( get Encryption Algorithm ( ) ) . build ( password . to Char Array ( ) ) ) ; generator . add Sub Key ( encryption Key Pair , encryption Subpacket Generator . generate ( ) , null ) ; } catch ( PGP Exception e ) { LOGGER . error ( "{}" , e . get Message ( ) ) ; generator = null ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date get Date From )  Date Format df build Date Format ) df parse ) ) throw new Date Exception ( String . format ( " Could not parse % s with pattern % s ." , date String , pattern ) , e ) ;<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public remove ) { synchronized ) { contains ) cache L 2 . contains Key ( key ) ) { return null ; } Object retval ; Map new Map ; synchronized ( _ cache L 1 ) { retval = new Map . remove ( key ) ; } _ cache L 1 = new Map ; _ cache L 2 . clear ( ) ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private get Cmdb cmdb ) item ; cmdb get ) ; cmdb get ) ; hpsm Settings hpsm Settings get App ) ; hpsm Settings hpsm Settings get App ) ; boolean = false ; boolean sub Type Check = false ; if ( ! "" . equals ( hpsm Settings Type ) ) { type Check = true ; } if ( ! "" . equals ( hpsm Settings Sub Type ) ) { sub Type Check = true ; } if ( ! type Check && sub Type Check ) { if ( sub Type != null && sub Type . equals ( hpsm Settings . get App Sub Type ( ) ) ) { } else if ( sub Type != null && sub Type . equals ( hpsm Settings . get Comp Sub Type ( ) ) ) { } else if ( sub Type != null && sub Type . equals ( hpsm Settings . get Env Sub Type ( ) ) ) { } } else if ( type Check && ! sub Type Check ) { if ( type != null && type . equals ( hpsm Settings . get App Type ( ) ) ) { } else if ( type != null && type . equals ( hpsm Settings . get Comp Type ( ) ) ) { } else if ( type != null && type . equals ( hpsm Settings . get Env Type ( ) ) ) { else { if ( sub Type != null && sub Type . equals ( hpsm Settings . get App Sub Type ( ) ) && type != null && type . equals ( hpsm Settings . get App Type ( ) ) ) { return item Type ;<CODESPLIT>Returns the type of the configuration item .
( tags ( ) ) { String value tags get ( ) ; ( uuid ( value ) ) { ( ( value ) ) { ( definition ( value ) ) { definitions add ( ( ) ) ; else if ( " definition " . equals ( _ tags . get ( 0 ) ) ) { final Abstract Definition cur Def = this . definitions . get ( this . definitions . size ( ) - 1 ) ; cur Def . read XML ( _ tags . sub List ( 1 , _ tags . size ( ) ) , _ attributes , _ text ) ; else { throw new SAX Exception ( " Unknown XML Tag : " + _ tags + " for : " + this . install File ) ;<CODESPLIT>Read event for given tags path with attributes and text .
public String get Update ( boolean Current Values ) { String Recordset get Record ( ) make Table ( ) ; Area Area get Record ( ) get Area ( ) ; boolean Current Values Current Values Area is Null ( . TEMP _ KEY _ AREA , true ) ; boolean b Is Query Record = this . get Base Record ( ) . is Query Record ( ) ; if ( s Filter . length ( ) > 0 ) s Filter = " WHERE " + s Filter ; String str Set Values = this . get Base Record ( ) . get SQL Fields ( DB Constants . SQL _ UPDATE _ TYPE , b Use Current Values ) ; if ( str Set Values . length ( ) == 0 ) return null ; return str Recordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object ... objects ) { ( Object objects ) { ( Class ) { verify Class ( ( Class ) ) ; { ( invocation Control ) { invocation Control verify ( ) ; { ( is Nice And Mode ( ) is Easy Mocked ( ) ) { { { org . easymock . Easy Mock . verify ( mock ) ; catch ( Runtime Exception e ) { throw new Runtime Exception ( mock + " is not a mock object " , e ) ;<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void map Tile Request Failed Tile Request ) { Tile Not Found Image ) { Tile Into get Tile ) Tile Not Found Image Expirable Drawable ) ; Tile Request Complete ) { if ( handler != null ) { handler . send Empty Message ( MAPTILE _ SUCCESS _ ID ) ; } } } else { for ( final Handler handler : m Tile Request Complete Handlers ) { if ( handler != null ) { handler . send Empty Message ( MAPTILE _ FAIL _ ID ) ; } } } if ( Configuration . get Instance ( ) . is Debug Tile Providers ( ) ) { } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validate Factory And Class ( Field fd , int factory Id , int class Id , String Path ) { ( factory Id fd . get Factory Id ( ) ) { } ( class Id fd . get Class Id ( ) ) { ( class Id ! Expected " + fd . get Class Id ( ) + ", Current : " + class Id + " in path " + full Path ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static get For ( Input Component boolean add Colon ) { ( ) { get ( ) ; } ( add Colon && ! label . ends With ( COLON ) ) { label += COLON ; } return label ; }<CODESPLIT>Returns the label for this component
protected View inflate Placeholder View View convert View ) { Placeholder View ) ) { Placeholder View get Context ( ) ) ; } view . set Minimum Height ( height ) ; return view ;<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stop ) { stop " Stopping Ldap Server " ) ; this . server . stop ( ) ; Log . info ( c , " stop Service " , " Stopping Directory Service " ) ; service . shutdown ( ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void set Minutes ( int Minutes ) { ( Minutes 0 ) { ( timer ) { timer ( ) ; timer ; this stop ( ) ; } else { if ( timer Cache != null ) { timer Cache . cancel ( ) ; this . start Cache ( ) ; timer Task = new DB Timer Task ( ) ; timer Cache . schedule ( timer Task , cache Minutes * 60 * 1000 ) ; }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagate Enter ( GVR Picked hit ) { GVR hit hit get ( ) ; GVR get GVR ( ) get ( ) ; ( contains ( SEND _ TOUCH _ EVENTS ) ) { if ( m Event Options . contains ( Event Options . SEND _ TO _ LISTENERS ) ) { event Manager . send Event ( this , I Touch Events . class , " on Enter " , hit Object , hit ) ; } if ( m Event Options . contains ( Event Options . SEND _ TO _ HIT _ OBJECT ) ) { event Manager . send Event ( hit Object , I Touch Events . class , " on Enter " , hit Object , hit ) ; } event Manager . send Event ( m Scene , I Touch Events . class , " on Enter " , hit Object , hit ) ; } } if ( m Event Options . contains ( Event Options . SEND _ PICK _ EVENTS ) ) { if ( m Event Options . contains ( Event Options . SEND _ TO _ LISTENERS ) ) { event Manager . send Event ( this , I Pick Events . class , " on Enter " , hit Object , hit ) ; } } } } }<CODESPLIT>Propagate onEnter events to listeners
public concurrent Get Quota get Quota Async amazonaws handlers Async Get Quota Request Get Quota ) { return get Send Quota Async ( new Get Send Quota Request ( ) , async Handler ) ; }<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short short Value ( ) throws Otp Erlang { long = long Value ( ) ; short = ( short ) l ; if ( i != l ) { } return i ; }<CODESPLIT>Get this number as a short .
private Mjdbc Prefix ( String reason , String , int Code , ) { Mjdbc = ; String = get Sql ( ) ; String Prefix = ; ( . ( ) >= 2 ) { Prefix = State . substring ( 0 , 2 ) ; if ( Spring Exception Handler Constants . SQL _ STATE _ PREFIX _ BAD _ SQL _ GRAMMAR . contains ( sql State Prefix ) == true ) { result = new Bad Sql Grammar Exception ( reason , SQL State , vendor Code ) ; } result = new Data Integrity Violation Exception ( reason , SQL State , vendor Code ) ; } result = new Data Access Resource Failure Exception ( reason , SQL State , vendor Code ) ; } result = new Transient Data Access Resource Exception ( reason , SQL State , vendor Code ) ; } else if ( Spring Exception Handler Constants . SQL _ STATE _ PREFIX _ CONCURRENCY _ FAILURE . contains ( sql State Prefix ) == true ) { result = new Concurrency Failure Exception ( reason , SQL State , vendor Code ) ; } return result ;<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean ( name ) { ( name ) { ( ) ; } ( ) { . equals ( name ) ; if ( middle != null ) { return name . contains ( middle ) ; return false ; return end == null || name . ends With ( end ) ;<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get nitro selectorname ) { set selectorname selectorname ) ; nslimitselector = ( nslimitselector ) obj . get _ resource ( service ) ; return response ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static Quad ( double eqn , double res ) { rc 0 ; ( a 0 f ) { ( 0 f ) { ; } { ( d 0 f ) { 0 ; d = Math . sqrt ( d ) ; res [ rc ++ ] = ( - b + d ) / ( a * 2 f ) ; if ( d != 0 f ) { res [ rc ++ ] = ( - b - d ) / ( a * 2 f ) ; } } return fix Roots ( res , rc ) ; }<CODESPLIT>Solves quadratic equation
public get All Terms ) Statement Group sg Groups ) final Statement stmt : sg . get All Statements ( ) ) { ret . add All ( stmt . get All Terms ( ) ) ; } } return ret ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void ( Operation ) throws { ( ! has ( ) ) { error = ; int = 0 ; { ( In ) { synchronized ( this ) { . log ( Level . FINEST , FE => Fail ) ; final [ ] = . encode 8 ( requested ) ; pg Stream . send Char ( ' f ' ) ; pg Stream . send Integer 4 ( 5 . ) ; pg Stream . send ( ) ; pg Stream . send Char ( 0 ) ; pg Stream . flush ( ) ; { process ( , ) ; } ( Exception se ) { errors ++ ; if ( error != null ) { while ( ( next = e . get Next Exception ( ) ) != null ) { } e . set Next Exception ( error ) ; } } } while ( has Lock ( op ) ) ; } } else if ( op instanceof Copy Out ) { send Query Cancel ( ) ; } } catch ( IO Exception ioe ) { } finally { synchronized ( this ) { if ( has Lock ( op ) ) { unlock ( op ) ; if ( op instanceof Copy In ) { if ( errors < 1 ) { throw new PSQL Exception ( GT . tr ( " Missing expected error response to copy cancel request " ) , PSQL State . COMMUNICATION _ ERROR ) ; else if ( errors > 1 ) {<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public ads adwords 201809 Attribute Type [ ] get Requested Attribute Types ( ) { return requested Attribute Types ; }<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void set ) Ont Mention Ont Mention ) ) ) de julielab jules types Ont Mention " ) ; jcas Type . ll _ cas . ll _ set Ref Value ( addr , ( ( Ont Relation Mention _ Type ) jcas Type ) . cas Feat Code _ range , jcas Type . ll _ cas . ll _ get FS Ref ( v ) ) ; }<CODESPLIT>setter for range - sets
public ibm wsspi wim Player get Related Player ) Player ) Player new Array List < com . ibm . wsspi . security . wim . model . Role Player > ( ) ; return this . related Role Player ;<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JC get Underlying Unifier unifier ) unifier ) unifier get Free Ident . Key ( identifier ( ) ) ) ; }<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clear ) { clear Commerce Price ) ; finder Cache . clear Cache ( FINDER _ CLASS _ NAME _ ENTITY ) ; finder Cache . clear Cache ( FINDER _ CLASS _ NAME _ LIST _ WITH _ PAGINATION ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int compute Capacity ( int ) { MINIMUM CAPACITY ; } ( MAXIMUM CAPACITY ) { MAXIMUM CAPACITY ; int capacity = 1 ; while ( capacity < initial ) { } return capacity ;<CODESPLIT>Compute capacity given initial capacity .
public get k ) Timeout { ( k , timeout , unit ) ; return cache . get ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void Classpath ( Path Class Path , Path intermediate Class Path , ) throws { String classpath Property = . get Property ( druid . hadoop . internal . classpath ) ; ( classpath Property ) { classpath Property = . get Property ( java . class . path ) ; } String jar Files = classpath Property . split ( File . path ) ; Configuration conf = . get Configuration ( ) ; File = Class Path . get File ( conf ) ; ( fs instanceof Local File System ) { return ; } for ( String jar File Path : jar Files ) { final File jar File = new File ( jar File Path ) ; if ( jar File . get Name ( ) . ends With ( ". jar " ) ) { try { } catch ( Exception e ) { throw new Runtime Exception ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void ( String javascript ) throws Widget { Web Element find Element ( ) ; { ( ( Javascript ) ) . execute Script ( javascript , ) ; ( ) { boolean success ; { ( ( Javascript ) wd ) . execute Script ( javascript , element ) ; success = true ; catch ( Exception e 2 ) { try { Thread . sleep ( 500 ) ; } catch ( Interrupted Exception e 1 ) { } } } if ( ! success ) { throw new Runtime Exception ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public add instant ) { set instant get Wrapped Value get instant ) amount , 0 , i Divisor - 1 ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected Request make Contract Coin To Me ) get ) subtract To Me ) Coin ) ) add get ) subtract To Me ) Legacy . from Key ( wallet . get Params ( ) , get Client Key ( ) ) ) ; } tx . add Input ( contract . get Output ( 0 ) ) ; return Send Request . for Tx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static String get User Name From Token ( String Token ) { ; } Token ( TOKEN ) [ 0 ] ; }<CODESPLIT>Extracts the user name from token .
protected Class resolve Proxy Class ( String [ Names ) throws Class Not Found { Class [ = Class [ Names . ; Class non = ; ( int = 0 ; Names . ; ) { Class < ? > intf = load Class ( interface Names [ i ] ) ; if ( ! Modifier . is Public ( intf . get Modifiers ( ) ) ) { Class Loader class Loader = get Class Loader ( intf ) ; if ( non Public Interface != null ) { if ( class Loader != proxy Class Loader ) { else { try { return Proxy . get Proxy Class ( proxy Class Loader , interfaces ) ; } catch ( Illegal Argument Exception ex ) { throw new Class Not Found Exception ( null , ex ) ;<CODESPLIT>Delegates class loading to the specified class loader .
public static double row Sums ( double ) { ( int = 0 ; . ; i ++ ) { x [ i ] = sum ( data [ i ] ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int Capacity ) { int Capacity . ; long Table ; int Values ; long Table long new Capacity ] ; int new Values [ ] = new int [ new Capacity ] ; byte new State [ ] = new byte [ new Capacity ] ; this . table = new Table ; this . values = new Values ; this . state = new State ; this . free Entries = new Capacity - this . distinct ; for ( int i = old Capacity ; i -- > 0 ; ) { if ( old State [ i ] == FULL ) { long element = old Table [ i ] ; new Table [ index ] = element ; new State [ index ] = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( Hpack Header Field header ) { ( header ) { clear ( ) ; ; } ( header Size ) { remove ( ) ; } size += header . size ( ) ; if ( head == hpack Header Fields . length ) { } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction ) { ( Launcher Listener listener listeners Launcher ) { listener notify Fired ( ) ; } ( Launchable Config launchable Config launchables ) { { Launchable launchable featurable get Feature ( Launchable ) ; ( launchable Config get Delay ( ) 0 ) { } else { launch ( launchable Config , initial , featurable , launchable ) ; } } catch ( final Lion Engine Exception exception ) { featurable . get Feature ( Identifiable . class ) . destroy ( ) ; throw exception ; } } }<CODESPLIT>Called when fire is performed .
public static void init Invocation invmgr omgr ) invmgr invmgr omgr omgr invmgr register Provider ( ) , Time Base Marshaller . class , GLOBAL _ GROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static Ufs Journal create start ) { Ufs Journal ( location , start , end , false ) ; }<CODESPLIT>Creates a journal log file .
protected write Replace )  Certificate Rep get ) ) ;  Certificate ) io . Not Serializable Exception ( " java . security . cert . Certificate : " + type + ": " + e . get Message ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extract Throwable ( ) { extract Throwable ( [ arguments . length - 1 ] ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static Bond Bond make Bond Maps Of Atom Maps Atom Atom Atom Atom mappings ) Bond Bond bond Maps I Bond , I Bond > > ( ) ; for ( Map < I Atom , I Atom > mapping : mappings ) { bond Maps . add ( make Bond Map Of Atom Map ( ac 1 , ac 2 , mapping ) ) ; return bond Maps ;<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public Long Constant add Long ) { Long Constant get Long By Value ) ; ( entry != null ) return entry ; add Constant ( entry ) ; add Constant ( null ) ; return entry ; }<CODESPLIT>Adds a long constant .
public get Or ) { get Or ( name , file , true ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extract From Name ( String clz name ) { ( ) ; { Integer value Of ( clz name . substring ( idx + 1 ) ) ; } catch ( Number Format Exception ex ) { return - 1 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void draw ( Canvas Paint Path Appearance Appearance bounds ) { ( Appearance Model . is Round Rect ( ) ) { canvas . draw Round Rect ( bounds , corner Size , corner Size , paint ) ; } else { canvas . draw Path ( path , paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public get ( , analyzer , analyzer Input ) { candidates ( ) ; candidates refine Candidates ( candidates , -> { get ( ) get ( ) ; ( Name ) ; } ) ; if ( analyzer Name != null ) { candidates = Collection Utils 2 . refine Candidates ( candidates , o -> { final String actual Analyzer Name = o . get Name ( ) ; return analyzer Name . equals ( actual Analyzer Name ) ; } ) ; } if ( analyzer Input Name != null ) { } if ( candidates . is Empty ( ) ) { logger . error ( " No more Analyzer Job candidates to choose from " ) ; return null ; } else if ( candidates . size ( ) > 1 ) { logger . warn ( " Multiple ({}) Analyzer Job candidates to choose from , picking first " ) ; } return candidates . iterator ( ) . next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public boolean remove Trade Bitfinex Trade trade Bi Consumer Bitfinex Trade Bitfinex Trade ) Bitfinex Client { trades . remove Callback ( trade Symbol , callback ) ; }<CODESPLIT>Remove a executed trade callback
public Health Dto Health ) { Health Health Dependencies health Dependencies ) ) Health ) collect ( Collectors . to List ( ) ) ; return check Health ( primary Health Dependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get nitro ) appfwxmlerrorpage appfwxmlerrorpage ) appfwxmlerrorpage appfwxmlerrorpage ) obj . get _ resources ( service ) ; return response [ 0 ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void Client Client ) { add Interceptor Interceptor ) { public void ) { header . get First Header ( " Location " ) ; if ( header != null ) context . set Attribute ( " Location " , header . get Value ( ) ) ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void Select ( List P , Axis , median ) { Points ( ) ; ( Points ) { = new double [ num Points ] ; } tmp [ i ] = distance . value At ( points . get ( i ) , split Axis ) ; } Quick Select . select Index ( tmp , median Num , num Points , indexes ) ; }<CODESPLIT>Uses quick - select to find the median value
) ) { Token ) ; . equals ( "<" ) ) { p Out . print ( "& lt ;" ) ; } else if ( token . equals ( ">" ) ) { p Out . print ( "& gt ;" ) ; } else if ( token . equals ( "&" ) ) { p Out . print ( "& amp ;" ) ; } else { p Out . print ( token ) ; }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected get ( ) { get ( ) ; null ? node . get Node Name ( ) : result ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void set Expiry Date Int from ) month Int from 9999 ) year ) Expiry Date set Text ( Date Utils . create Date String From Integer Input ( month , year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected write Ddl Ddl write Ddl "-- \ write Drop Dependencies "\ "-- \ write Buffer ( ) + write . apply Foreign Keys ( ) . get Buffer ( ) + write . apply History View ( ) . get Buffer ( ) + write . apply History Trigger ( ) . get Buffer ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static boolean Equals clz clz ) { clz clz ) { ) ;  clz == clz 2 || clz 1 . get Name ( ) . equals ( clz 2 . get Name ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void add Shared ) { ) ) get File Name ( ) : null ; do Add Shared Function ( source , file Name ) ; }<CODESPLIT>Add shared function by ISource
public void set Commerce Price liferay commerce price Commerce Price commerce Price ) { commerce Price List Service = commerce Price List Service ; }<CODESPLIT>Sets the commerce price list remote service .
public static ) { htmltree MAIN ) ; htmltree . set Role ( Role . MAIN ) ; return htmltree ;<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabel get ( nitro , String labelname ) { set labelname ( labelname ) ; cachepolicylabel = ( cachepolicylabel _ stats ) obj . stat _ resource ( service ) ; return response ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void Broker ( File mapfile , Map Broker ) throws { ( is Modified ( ) ) { ; } { Writer bout Writer ( new File Writer ( mapfile ) ) ; broker . write To ( bout ) ; bout . close ( ) ; } catch ( IO Exception ioe ) { } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ) Access { execute ) { public In connection ) throws SQL Exception , Data Access Exception { crud . update ( connection , values ) ; return null ; } } ) ; }<CODESPLIT>update the objects .
public static Int from Int Int Consumer ) Int ) public As Int ) { public Integer get ( ) { return get As Int ( ) ; public Mutable Int set ( final int value ) { c . accept ( value ) ; return this ;<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config ) { . ( Reloading configuration ." ) ; this . Write . ( ) ; { process App Packages ( config ) ; } finally { } }<CODESPLIT>Replace the configuration of this instance directly .
protected void add ( String type ) { ( . Type . name ( ) , type ) ; put Property ( Property Key . Status . name ( ) , Status . Start . name ( ) ) ; }<CODESPLIT>Add properties to properties map on transaction start
public List Sequence List Type . Sequence get Sequence ( ) { ( sequence == null ) { } return this . sequence ; }<CODESPLIT>Gets the value of the sequence property .
public add field boolean include supplier ) { include ) { value supplier get ) ; map . put ( get Field Name ( field Name ) , value ) ; } } return this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnect Card One Consumer ) { Tracing ) tc ) ) Sib Tr tc disconnect Card One Consumer ) ; cloned Consumer Points ; synchronized consumer Points ) { cloned Consumer Points consumer Points ) ; } FFDC ibm sib processor Consumer . disconnect Card One Consumer " , " 1 : 945 : 1 . 97 . 2 . 21 " , this ) ; Sib Tr . exception ( tc , e ) ; for ( int i = 0 ; i < cloned Consumer Points . length ; i ++ ) { Dispatchable Key ck = ( Dispatchable Key ) cloned Consumer Points [ i ] ; ck . notify Consumer Point About Exception ( e ) ; } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) Sib Tr . exit ( tc , " disconnect Card One Consumer " ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean Administrator ) get ) get ) ) && ctx . get Password ( ) != null && ctx . get Password ( ) . equals ( admin Pass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { ( settings autostart ( ) ) { settings get Runner ( ) ; } { settings set ( Opera PORT IDENTIFIER ) ; } create Scope ( ) ; ( ) { start Opera ( ) ; } services init ( ) ; debugger = services . get Debugger ( ) ; debugger . set Driver ( this ) ; window Manager = services . get Window Manager ( ) ; exec = services . get Exec ( ) ; core = services . get Core ( ) ; cookie Manager = services . get Cookie Manager ( ) ; mouse = new Opera Mouse ( this ) ; keyboard = new Opera Keyboard ( this ) ; settings . set Product ( utils ( ) . get Product ( ) ) ; preferences = new Opera Scope Preferences ( services . get Prefs ( ) ) ; if ( utils ( ) . get Product ( ) . is ( MOBILE ) ) { } } proxy = new Opera Proxy ( this ) ; proxy . parse ( settings . get Proxy ( ) ) ;<CODESPLIT>Initialize required Scope services .
public static String calculate 5 ( String ) { [ ] hash ; { } ( No ) { ( Huh , 5 should supported ?" , ) ; } ( ) { } String Builder hex = String Builder ( hash . * 2 ) ; for ( byte b : hash ) { int i = ( b & 0 x FF ) ; if ( i < 0 x 10 ) hex . append ( ' 0 ' ) ; hex . append ( Integer . to Hex String ( i ) ) ; } return hex . to String ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static find Raw ( ) { raw find Res Raw ( ) ; if ( raw Dir != null ) { return raw Dir ; } dir = dir . get Parent File ( ) ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public resolve ) { get ) ; ctx . get EL Resolver ( ) . get Value ( ctx , null , p Name ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected Dependant Value create Value ( In Flight mappings persistent ) { Value Value ; Dependant Value ; get Referenced ( ) ; ( ) { Value collection . get Owner ( ) . get Identifier ( ) ; } else { key Value = ( Key Value ) collection . get Owner ( ) . get Property ( property Ref ) . get Value ( ) ; } key = new Dependant Value ( metadata Building Context , collection . get Collection Table ( ) , key Value ) ; key . set Type Name ( null ) ; key . set Nullable ( true ) ; key . set Updateable ( false ) ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected Exp get Var Exp Lex Token vardef ) Exp get Var Exp , vardef ) ; var . set Type ( type ) ; return var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean Or White ) { Or ) trim ( ) . is Empty ( ) ) { return true ; } return false ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public By block ) Proposal { By get Shuffled Peers Enum Set . of ( Peer Role . LEDGER _ QUERY ) ) , block Number ) ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
public static get ) get Getters As type ) . get ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static String LZ To String ( [ , String dictionary ) { { String ( LZ ( ) , 8 ) ; } ( Unsupported Encoding Exception e ) { } }<CODESPLIT>Decode lz to string string .
public static Airline Flight Update add Airline Flight Update intro pnr Update Airline Flight Update Builder ( intro Message , locale , pnr Number , update Type ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void add Modules ( String argument , String , Module modules , String aditionalpath , String ) { String String ( ) ; ( aditionalpath ) { add ( argument ) ; append ( aditionalpath ) ; } ( modules modules ) { ( contains ( argument ) ) { add ( argument ) ; } ( ; modules ; ) { Module modules ; Artifact artifact null ; @ Suppress Warnings ( " unchecked " ) Set < Artifact > all Artifacts = project . get Artifacts ( ) ; for ( Artifact art : all Artifacts ) { artifact = art ; break ; } } if ( artifact == null ) { throw new Mojo Execution Exception ( " The artifact " + module . to String ( ) + " referenced in aspectj plugin as " + role + ", is not found the project dependencies " ) ; } if ( buf . length ( ) != 0 ) { buf . append ( File . path Separator Char ) ; } buf . append ( artifact . get File ( ) . get Path ( ) ) ; } } if ( buf . length ( ) > 0 ) { String path String = buf . to String ( ) ; arguments . add ( path String ) ; get Log ( ) . debug ( " Adding " + argument + ": " + path String ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extract Aero Gear Sender ( Http Request request ) { ( has Value ( client ) ) { client ; } request get ( user - agent " ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux request request ) { Flux defer ) { request and not ) ; is required and must not be null " ) ; return transport . create ( address ) . request Stream ( request ) . map ( message -> Service Message Codec . decode Data ( message , response Type ) ) . map ( this :: throw If Error ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
Object Input Stream ois ; { ois Object Input Stream ( File file Input Stream ( incremental File ) ) ; ( ) { Transaction changes read External ( ois ) ; Iterator cli changes get Iterator ( ) ; ( cli has Next ( ) ) { ( cli Log ( ) . get Event Type ( ) == Extended Event . LOCK ) { cli . remove Log ( ) ; } save Changes Log ( changes Log ) ; catch ( EOF Exception ioe ) { if ( LOG . is Trace Enabled ( ) ) { LOG . trace ( " An exception occurred : " + ioe . get Message ( ) ) ; } }<CODESPLIT>Perform incremental restore operation .
public start ) { ) ; consumers Consumer ) { count ; public void final Byte Buffer buffer ) { count += buffer . remaining ( ) ; } public Integer finish ( ) { return count ; } } ) ; return object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean is Element ( String ) { . ( ) ; boolean flag ; { } ( No Element e ) { } logger . exiting ( flag ) ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String ) throws { Thread = Thread ( ) { public void run ( ) { synchronized ( ) { . delete ( 0 , 4 ) ; . append ( the ) ; { Thread . sleep ( 4000 ) ; ( Exception e ) { buffer . append ( " of fall " ) ; Thread t 2 = new Thread ( ) { public void run ( ) { try { Thread . sleep ( 1000 ) ; } catch ( Exception e ) { t 1 . start ( ) ; t 2 . start ( ) ; t 1 . join ( ) ; t 2 . join ( ) ; System . err . println ( buffer ) ;<CODESPLIT>We have more input since wait started
protected interpolate ) { ; Double Na gp ) ) { Interpolate quadratic fprev gprev stprev fp stp ) ;  else { alpha New = Search Interpolate . cubic 2 ( fprev , gprev , stprev , fp , gp , stp ) ; } double l , u ; if ( bound A < bound B ) { l = bound A ; u = bound B ; } else { } if ( alpha New < l ) alpha New = l ; else if ( alpha New > u ) alpha New = u ; return alpha New ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List Semantic Error check ( Data Type Type ) { finer ( semantic on datatype Type name ) ; List Semantic Error Array List Semantic Error ( ) ; String constructor Names Set < String > ( ) ; for ( Constructor constructor : data Type . constructors ) { if ( data Type . constructors . size ( ) > 1 && data Type . name . equals ( constructor . name ) ) { errors . add ( _ Constructor Data Type Conflict ( data Type . name ) ) ; } if ( constructor Names . contains ( constructor . name ) ) { errors . add ( _ Duplicate Constructor ( data Type . name , constructor . name ) ) ; } else { constructor Names . add ( constructor . name ) ; } errors . add All ( check ( data Type , constructor ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
protected void register ( Grails Plugin ) { add ( plugin . get Name ( ) ) ; additional List . add ( plugin ) ; add Plugin Dependencies ( additional List , plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private Json execute Request ( Post request ) , Grooveshark { http Client execute ( request ) ; ( Logging ) { log Request ( request , ) ; } String Char String ( Input Stream Reader ( get Entity ( ) get Content ( ) , _ 8 ) ) ; try { return json Mapper . read Tree ( new String Reader ( response Payload ) ) ; } catch ( Json Processing Exception e ) { } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map String , T parse Map ( Json ) throws { ( Token ( ) Json Token ) { next Token ( ) ; if ( json Parser . get Current Token ( ) == Json Token . VALUE _ NULL ) { map . put ( key , null ) ; } else { map . put ( key , parse ( json Parser ) ) ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public Date Func Sup subtract Date Seperator ) set ) . parse ( ) ) ; return this ; }<CODESPLIT>subtract date on supported date
private double radical Inverse ( ) { double radical ; double inverse ; ( 0 ) { inverse += digit * ( double ) ( i % base ) ; digit *= radical ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String get Temp ( ) { synchronized ( File ) { ( TEMP DIR ) { String get ( . tmpdir " ) ; if ( String Util . is Empty ( tmp Dir ) ) { if ( new File ( "/ temp " ) . exists ( ) ) { } else { } return TEMP _ DIR ;<CODESPLIT>Gets the default temp directory for the system .
public static Accumulator Value Accumulator reduce Value Accumulator init Closure Accumulator Value ) Accumulator accumulator init Value ) accumulator = f . eval ( accumulator , value ) ; } return accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected Process Output execute Process ( Fax fax , String command , Fax fax ) { ( command ) { ( ) ; } String command ; ( Windows ) { append ( this . windows Command Prefix ) ; buffer . append ( " " ) ; buffer . append ( updated Command ) ; updated Command = buffer . to String ( ) ; } Process Output process Output = Process Executor Helper . execute Process ( this , updated Command ) ; this . validate Process Output ( process Output , fax Action Type ) ; return process Output ; }<CODESPLIT>Executes the process and returns the output .
public get ( name ) { ( ) add ( , , CONNECTOR , name ) ; return read Resource ( address , true ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( Detector det , int [ ] common Chars ) { int double Byte Char Count = 0 ; int common Char Count = 0 ; int Char Count = 0 ; int Char Count = 0 ; int confidence = 0 ; iterated Char = iterated Char ( ) ; for ( . reset ( ) ; Char ( , det ) ; ) { Char Count ; ( . error ) { Char Count ; { long cv = . char Value & 0 FFFFFFFFL ; ( cv <= 0 xff ) { Byte Char Count ; } { double Byte Char Count ; ( common Chars != null ) { common Char Count ++ ; } } } } break detect Block ; } if ( double Byte Char Count <= 10 && bad Char Count == 0 ) { if ( double Byte Char Count == 0 && total Char Count < 10 ) { else { break detect Block ; if ( double Byte Char Count < 20 * bad Char Count ) { break detect Block ; if ( common Chars == null ) { if ( confidence > 100 ) { else { double max Val = Math . log ( ( float ) double Byte Char Count / 4 ) ; confidence = Math . min ( confidence , 100 ) ; return confidence ;<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( Matrix , , 1 , int src X 0 , int src X 1 , D Matrix dst ) { ( ( Reshape Matrix ) dst ) . reshape ( src Y 1 - src Y 0 , src X 1 - src X 0 ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resize Eip Resize Eip Request request ) { request get Eip ) eip not ) ; request set Client Token generate Client Token ) ) ;  Internal Request internal Request create Request request Method . PUT , request . get Eip ( ) ) ; internal Request . add Parameter ( " resize " , null ) ; internal Request . add Parameter ( CLIENT _ TOKEN _ IDENTIFY , request . get Client Token ( ) ) ; fill Payload ( internal Request , request ) ; invoke Http Client ( internal Request , Abstract Bce Response . class ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void As Contact Seed Broker ) { Contact Seed Broker seed Broker ) {  Contact Net get Correct Hostname seed Broker Contact Seed Broker ) ; consumer Consumer ( new Contact Url . get Host ( ) , new Contact Url . get Port ( ) , so Timeout , buffer Size , dummy Client Id ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { String String ( ) ; ( ; value ( ) ; ) { char value char At ( ) ; ( ESCAPE ) { String String value ( , i + 3 ) ; int code = Integer . parse Int ( code String , 16 ) ; if ( code < reserved Chars . length && reserved Chars [ code ] == code ) { result . append ( reserved Chars [ code ] ) ; i += 2 ; } else { } } else { result . append ( c ) ; } } return result . to String ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected Map read File ( Map br Map ) throws { Map Map ( ) ; Map String , Map read Obv Data ( br Map ) ; Array List Map obv Data ; Map obv ; ( String exname files . key Set ( ) ) { for ( Hash Map obv Sub : obv Data ) { exp Data = new Hash Map ( ) ; obv = new Hash Map ( ) ; copy Item ( exp Data , files . get ( exname ) , " exname " ) ; copy Item ( exp Data , files . get ( exname ) , " crid " ) ; exp Data . put ( json Key , obv ) ; exp Arr . add ( exp Data ) ; } } id Names . add ( " trno _ t " ) ; remove Index ( exp Arr , id Names ) ; ret . put ( " experiments " , exp Arr ) ; return ret ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static Fixed Interpolator create Interpolator Parameters delimiters extract delimiters Fixed Interpolator create  Docker Docker Interpolator . full Interpolator ( params . get Project ( ) , Default Assembly Reader . create Project Interpolator ( params . get Project ( ) ) . with Expression Markers ( delimiters [ 0 ] , delimiters [ 1 ] ) , config Source ) . with Expression Markers ( delimiters [ 0 ] , delimiters [ 1 ] ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean Cleanup In Progress ( Zoo Keeper zk ) Keeper { zk get ( Volt ZK leaders initiators ) ; ( ) { zk get ( ZK join ZK Path ( Volt ZK leaders _ initiators , child ) , false , callback , null ) ; children Callbacks . add ( callback ) ; } for ( ZK Util . Children Callback callback : children Callbacks ) { if ( callback . get ( ) . is Empty ( ) ) { return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private unify L Data ( CEMI ldata , boolean Src , List Integer types ) { ; ( ldata CEMIL Data Ex ) { CEMIL Data Ex ext = ( ( CEMIL Data Ex ) ldata ) ; synchronized ( ) { ( Iterator Add = Info . iterator ( ) ; i . has Next ( ) ; ) { final Add Info info = i . next ( ) ; if ( ! types . contains ( info . get Type ( ) ) ) { logger . warn ( " remove L - Data additional info {}" , info ) ; i . remove ( ) ; } } } } data = ldata . to Byte Array ( ) ; if ( empty Src ) { } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static T Number as Array ( T ... array ) { ( ; . length ; i ++ ) { b [ i ] = array [ i ] . int Value ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
void set Active handle ) handle handle ) Active handle cannot readonly ." ) ) null , " Cannot set an Active Segment Chunk handle when there are no Segment Chunks ." ) ; Preconditions . check Argument ( handle == null || handle . get Segment Name ( ) . equals ( last . get Name ( ) ) , " Active Segment Chunk handle must be for the last Segment Chunk ." ) ;<CODESPLIT>Sets the Active SegmentChunk handle .
public get Value ) Timex Timex ) ) Value ) Value de . unihd . dbs . uima . types . heideltime . Timex 3 Interval " ) ; return jcas Type . ll _ cas . ll _ get String Value ( addr , ( ( Timex 3 Interval _ Type ) jcas Type ) . cas Feat Code _ empty Value ) ; }<CODESPLIT>getter for emptyValue - gets
public static Account Account Bitstamp Balance bitstamp Balance user Balance balances knowm xchange bitstamp dto Bitstamp Balance Balance bitstamp Balance Balances Balance xchange Balance Balance Instance Balance Available ( ) , b . get Reserved ( ) , ZERO , ZERO , b . get Balance ( ) . subtract ( b . get Available ( ) ) . subtract ( b . get Reserved ( ) ) , ZERO ) ; balances . add ( xchange Balance ) ; } return new Account Info ( user Name , bitstamp Balance . get Fee ( ) , new Wallet ( balances ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void after Session status ) { : {}, Close Status : {}" , session , status . to String ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trim Last Path ( String path ) { String sections path ( ) ; String Path String ( ) ; ( 1 ; i < sections . length - 1 ; i ++ ) { } return new Path . to String ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ) Style Style ) Palette Solid ( Palette Utils . MATERIAL _ RED ) ; return style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public Object Context create Context ( ) { get ( ) ; ( is Driven ( ) ) { bean = get Bean ( ) ; } Weld Manager bean Manager = get Bean Manager ( ) ; Weld Creational Context < T > creational Context = bean Manager . create Creational Context ( bean ) ; return managed Object Context ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public void delete ) Request Request ) set Name ( name ) . build ( ) ; delete Operation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean Member ( ) { check ( ) ; ( wordshift ) ( bits [ x >>> wordshift ] & ( 1 << ( x & wordmask ) ) ) != 0 ; }<CODESPLIT>Is x an element of this set?
public add ( ) { return add Handler ( handler , Search Finish Event . TYPE ) ; }<CODESPLIT>This handler will be triggered when search is finish
public void set Foreign Bus ( boolean send ) { } send On Target Foreign Bus Boolean value Of ( send ) ; ( aliases Target This ) { Iterator aliases Target This iterator ( ) ; ( has Next ( ) ) { abstract Alias Destination Handler = ( Abstract Alias Destination Handler ) i . next ( ) ; abstract Alias Destination Handler . set Foreign Bus Send Allowed ( send Allowed ) ; } } } if ( Trace Component . is Any Tracing Enabled ( ) && tc . is Entry Enabled ( ) ) { Sib Tr . exit ( tc , " set Foreign Bus Send Allowed " ) ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processing Instruction ) { null ) document Handler . processing Instruction ( target , data ) ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static get File On FTP ( String Name , , String user Name , String password , String Path ) { ; String reply String execute Command On FTP ( Name , , user Name , password , , Path ) ; ( reply String reply String contains ( " ) ) { } else { result = Integer . value Of ( reply String . split ( " " ) [ 1 ] . replace All ( "[\ r \ n ]" , "" ) ) ; } return result ; }<CODESPLIT>Get size of the FTP file .
public static _ responses enable ( nitro _ client , String trapname [ ) throws { _ responses = ; ( trapname trapname . 0 ) { snmpalarm enableresources [ = snmpalarm [ trapname . ; enableresources [ ] = new snmpalarm ( ) ; } result = perform _ operation _ bulk _ request ( client , enableresources , " enable " ) ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void Consumer ) Topo Sorter sorter Topo Sorter ( this ) ; sorter . ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static Seq Group parse ( String asg ) { int d asg index Of ( '-' ) ; ( d N 0 is Sequence ( asg , d N ) ) { d N asg length ( ) ; } return new Seq Server Group ( asg , d 1 , d 2 , d N ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int get Map Count ( int Count , int Nodes ) { Maps . ( Maps , Nodes _ MAPS _ PER _ NODE ) ; return Math . max ( num Maps , 1 ) ; }<CODESPLIT>Calculate how many maps to run .
protected void ( Channel Binary Memcache ) { ( get ( ) ) { Promise set ( ) ; ( ) remove ( ) ; fire Channel Active ( ) ; break ; case ACCESS _ ERROR : original Promise . set Failure ( new Authentication Exception ( " Authentication failure on Select Bucket command " ) ) ; break ; case NOTFOUND _ ERROR : original Promise . set Failure ( new Authentication Exception ( " Bucket not found on Select Bucket command " ) ) ; break ;<CODESPLIT>Handles incoming Select bucket responses .
private Dice unwrap ( Dice ) { Dice ; ( Wrapper ) { = ( ( Expression Wrapper ) expression ) . get Wrapped Expression ( ) ; else { return result ;<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static In lower upper ) not ) ; ; ; ) ; Float Na ) ) "[" "] not Na ) ;  < lower ) { throw new Illegal Argument Exception ( String . format ( "% s [% d ] is out of range of [% f , % f ] ( too low )" , value Name , i , lower , upper ) ) ; } else if ( v > upper ) { throw new Illegal Argument Exception ( String . format ( "% s [% d ] is out of range of [% f , % f ] ( too high )" , value Name , i , lower , upper ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy Input ) { copy input Stream , output Stream , true ) ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static get Tuples ( List Var Defs , , , tuple ) { tuples Array List ( ) ; ( ; ; i ++ ) { Var Def next Var = var Defs . get ( i ) ; Iterator < Var Value Def > values = next Var . get Valid Values ( ) ; if ( ! values . has Next ( ) ) { if ( sub Tuples == null ) { while ( values . has Next ( ) ) { } } else if ( ! sub Tuples . is Empty ( ) ) { while ( values . has Next ( ) ) { Var Binding Def next Binding = new Var Binding Def ( next Var , values . next ( ) ) ; for ( Tuple sub Tuple : sub Tuples ) { Tuple next Tuple = new Tuple ( next Binding ) . add All ( sub Tuple ) ; if ( next Tuple . is Compatible ( ) ) { tuples . add ( next Tuple ) ; } } return tuples ;<CODESPLIT>Returns all valid tuples of values for the given input variables .
public get ( ) { int hash hash ( ) ; ( Entry , ; ; next ) { if ( entry . hash Code == hash && entry . key . equals ( key ) ) { return entry . value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public boolean valid ( String , String ) { . Non Null ( , Required . SECRET . to String ( ) ) ; return Totp Utils . verified Totp ( secret , number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void update Edges State DL ( int S , int L , int S , int prev L , Emissions emission ) { update Outgoing Edges ( curr S , curr L , States . DL , prev S , prev L , States . DL , Transitions . t _ DL _ in , emission ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void set ( String , String ) { Pdf fieldname Pdf ( ) ; Pdf Object get ( fieldname ) ; ( ) ( You must set value adding a prefix ." ) ; Pdf Dictionary dict = new Pdf Dictionary ( Pdf Name . COLLECTIONSUBITEM ) ; dict . put ( Pdf Name . D , o ) ; put ( fieldname , dict ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected Expression replace Expressions With Pve ( Expression expr ) { assert ( expr ) ; ( expr Value Expression ) { int param Parameterization get Next Param ( ) ; Parameter Value Expression pve Parameter Value Expression ( param , expr ) ; Tve Map ( param , expr ) ; pve ; ( expr Aggregate Expression ) { int param Idx = Parameterization Info . get Next Param Index ( ) ; Parameter Value Expression pve = new Parameter Value Expression ( param Idx , expr ) ; assert ( m _ parent Stmt != null ) ; for ( Tuple Value Expression tve : tves ) { int orig Id = tve . get Orig Stmt Id ( ) ; } } m _ parameter Tve Map . put ( param Idx , expr ) ; return pve ; } if ( expr . get Left ( ) != null ) { if ( expr . get Right ( ) != null ) { if ( expr . get Args ( ) != null ) { for ( Abstract Expression argument : expr . get Args ( ) ) { new Args . add ( replace Expressions With Pve ( argument ) ) ; expr . set Args ( new Args ) ; return expr ;<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean add ( String Id , ) { boolean is ; ( list ) { list Array List Delayed Callback > ( ) ; BACKLOG . put ( application Id , list ) ; } list . add ( callback ) ; return is First ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static gunzip ( ) { Byte Output Stream bos Byte Output Stream ( ( ) ( length * 1 . 5 ) ) ; dos . write ( compressed Bytes ) ; dos . close ( ) ; return bos . to Byte Array ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public get ) get ) tve get Alias ( ) , get Table Alias ( ) , schema Col . get Column Alias ( ) , schema Col . get Column Alias ( ) , index ) ; return tve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
