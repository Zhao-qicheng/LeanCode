public final ExampleData getSelectedExampleData ( ) { Set < allSelectedItems getSelectedRows ( ) ; ( allSelectedItems allSelectedItems ( ) ) return null ; } ( selectedItem allSelectedItems ) < Integer > rowIndex TreeItem rowIndexList ( selectedItem ) ; return getTreeModel ( ). getExampleData ( rowIndex ) ; } return null ; }<CODESPLIT>Get the example which is selected in the tree .
public void dimAt ( float alpha ) { ( mDimEnabled ) return ; } ( mDimView ) mDimView makeDimView ( ) ; } ( mDimViewShown ( ) ) mDimView setVisibility ( VISIBLE ) ; mDimViewBackgroundColor ( mDimColor ) ; } mDimViewAlpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { (Found ( ) ) new IllegalStateException (Extract can only called once ) ; extractSW start ( ) ; SPTEntry currEdge =ptEntry ; setEndNode ( currEdge adjNode ) ;EdgeValid EdgeIterator Edge isValid ( currEdge edge ) ;Edge ; ( )EdgeValid = EdgeIterator Edge isValid ( currEdge parent edge ) ; nextEdge = nextEdgeValid? currEdge parent edge : EdgeIterator NOEDGE ; processEdge ( currEdge edge, currEdge adjNode, nextEdge ) ; currEdge = currEdge parent ; } setFromNode ( currEdge adjNode ) ; reverseOrder ( ) ; extractSW stop ( ) ; return setFound ( true ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static int writeInt ( byte [ ] target, int offset, int value ) { target offset ( byte ) ( value 24 ) ; target offset + ( byte ) ( value 16 ) ; target offset + ( byte ) ( value 8 ) ; target offset + = ( byte ) value ; return Integer. BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visitGetElem ( Node n ) { validator expectIndexMatch ( getJS ( ( ) ) getJS ( n getLastChild ( ) ) ) ; ensureTyped ( n ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class < > getTypedClass ( java. lang. reflect. Type type ) { ( type Class ) return ( ( Class ) type ) ; } ( type ParameterizedType ) java lang reflect Type rawParamizedType ( ( ParameterizedType ) type ) getRawType ( ) ; return getTypedClass ( rawParamterizedType ) ; } ( type TypeVariable ) java lang reflect Type upperBound = ( ( TypeVariable ) type ) getBounds ( ) ; return getTypedClass ( upperBound ) ; } new IllegalArgumentException ( " finding generic class for :" + type ) ; }<CODESPLIT>Gets the typed class .
public URI toUri ( JimfsPath path ) { fileStore state ( ) check ( ) ; pathServiceUri ( uri pathAbsolutePath ( ) ) ; }<CODESPLIT>Gets the URI of the given path in this file system .
public ActivityInterface getActivityInterface ( ) { ( activityInterface ) activityInterface ActivityInterface ( apiKey sharedSecret transport ) ; } return activityInterface ; }<CODESPLIT>Get the ActivityInterface .
private void initBeforeList ( ) { List < ProcessAdvice > beforeRequestProcessAdvices = < > ( ) ; final Method invokeHolder =InvokeHolder ( ) ; final Class <? > processorClass = invokeHolder getDeclaringClass ( ) ; if ( processorClass processorClass isAnnotationPresent ( Before ) ) { final Class <? ProcessAdvice > bcs = processorClass getAnnotation ( Before class ) value ( ) ; ( = ; < b ; ) final Class <? ProcessAdvice > bc = bcs i ; final ProcessAdvice beforeRequestProcessAdvice = BeanManager getInstance ( ) getReference ( bc ) ; beforeRequestProcessAdvices add ( beforeRequestProcessAdvice ) ; } } if ( invokeHolder isAnnotationPresent ( Before ) ) { final Class <? ProcessAdvice > bcs = invokeHolder getAnnotation ( Before class ) value ( ) ; ( = ; < b ; ) final Class <? ProcessAdvice > bc = bcs i ; final ProcessAdvice beforeRequestProcessAdvice = BeanManager getInstance ( ) getReference ( bc ) ; beforeRequestProcessAdvices add ( beforeRequestProcessAdvice ) ; } } this beforeRequestProcessAdvices = beforeRequestProcessAdvices ; }<CODESPLIT>Initializes before process advices .
private void init ( ) { jsFactory = JsonFactory ( ) ; jsFactory configure ( JsonParser Feature ALLOWCOMMENTS, ) ; jsFactory configure ( JsonParser Feature ALLOW_SINGLE_QUOTES, ) ; jsFactory configure ( JsonParser Feature ALLOW_NON__NUMBERS, ) ; }<CODESPLIT>Creates the JsonFactory .
static void flushStackLocalLeaks ( Looper looper ) { Handler handler = new Handler ( looper ) { public void handleMessage ( Message msg ) { sendMessageDelayed ( obtainMessage ( ) THREADCLEAN ) ; } } ; handler sendMessageDelayed ( handler obtainMessage ( ) THREADCLEANMS ) ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void addReset ( String label ) { ( buttons ) buttonsAtBottom ( ) ; Element e = Input ( Input ResetReset label ) ; if ( extendRow ) addField (, e ) ; buttons add ( e ) ; }<CODESPLIT>Add a reset button .
public static getMaximumVolume ( Context ) { ( ( AudioManager ) context getSystemService ( Context AUDIOSERVICE ) ) getStreamVolume ( AudioManager STREAMMUSIC ) ; }<CODESPLIT>Returns maximum volume the media volume can have
@ SuppressWarnings ( "checkstyle:npathity" ) public void removeSREs ( ISREInstall... sres ) { final ISREInstallSRE = getDefaultSRE ( ) ; finalId =SRE? :SRE getId ( ) ;Index = ; if ( defaultId ) { ( i = ; defaultIndex == i < this. sreTable. getItemCount ( ) ; i ) if ( defaultId ( ( ( ISREInstall ) this sreTable getItem ( i ) getData ( ) ) getId ( ) ) ) {Index = ; } } } final normedDefaultId = StringsToEmpty (Id ) ;IsRemoved = ; ( final ISREInstall sre sres ) if ( this sreArray remove ( sre ) sre getId ( ) ( normedDefaultId ) ) {IsRemoved = ; } } refreshSREListUI ( ) ; if ( defaultIsRemoved ) { if ( this sreTable getItemCount ( ) ) { setSelection ( null ) ; } { if ( defaultIndex ) {Index = ; } if ( defaultIndex >= this sreTable getItemCount ( ) ) {Index = this sreTable getItemCount ( ) ; } setSelection ( StructuredSelection ( this sreTable getItem (Index ) getData ( ) ) ) ; } } this sresList refresh ( ) ; if ( defaultIsRemoved ) { fireDefaultSREChanged ( ) ; } updateUI ( ) ; }<CODESPLIT>Removes the given SREs from the table .
public static WikiUser getUser ( String wikiId, String siteurl ) { WikiUser result = ; { Properties props = getProperties ( wikiId ) ; result = WikiUser ( ) ; resultUsername ( props getProperty (user ) ) ; resultEmail ( props getProperty (email ) ) ; Crypt pcf = Crypt ( props getProperty (cypher ), props getProperty (salt ) ) ; result setPassword ( pcf decrypt ( props getProperty (secret ) ) ) ; } ( FileNotFoundException e ) { msg = help ( wikiId, siteurl ) ; log ( Level SEVERE, msg ) ; } ( IOException e ) { log ( Level SEVERE, e getMessage ( ) ) ; } ( GeneralSecurityException e ) { log ( Level SEVERE, e getMessage ( ) ) ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public T next ( ) { retryCount ; T = delegate ( ) ; ( alreadyGenerated contains ( next ) ) alreadyGenerated add ( next ) ; return next ; } retryCount ; } ( retryCount numberOfRetries ) ; throw new IllegalStateException ( on ( " " ) join ( "Ex", numberOfRetries, "retries trying to generate unique value" ) ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private boolean isAllowedInsideList ( Node node ) { return ( node getNodeType ( ) Node ELEMENT_NODE node getNodeName ( ) equalsIgnoreCase ( TAG_LI ) ) && ( node getNodeType ( ) Node TEXT_NODE node getNodeValue ( ) trim ( ) length ( ) == ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static ResidueNumber [ ] matchSequenceToStructure ( ProteinSequence seq, Structure struct ) { Map < Integer Group > atomIndexPosition = < Integer Group > ( ) ; ProteinSequence structSeq = getProteinSequenceForStructure ( struct, atomIndexPosition ) ; SubstitutionMatrix < AminoAcidCompound > matrix = SimpleSubstitutionMatrix < AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ) ( short ) ( short ) ) ; matrix = SimpleSubstitutionMatrix < AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ) ( SimpleSubstitutionMatrix getResourceAsStream ( "/matb100txt ) )b100 ) ; SequencePair < ProteinSequence AminoAcidCompound > pair = Alignments getPairAlignment ( seq structSeq PairSequenceAlignerType GLOBAL SimpleGapPenalty ( ) matrix ) ; AlignedSequence < ProteinSequence, AminoAcidCompound > alignedSeq = pair getQuery ( ) ; AlignedSequence < ProteinSequence, AminoAcidCompound > alignedStruct = pair getTarget ( ) ; assert ( alignedSeq getLength ( ) alignedStruct getLength ( ) ) ; ResidueNumber ca = ResidueNumber seq getLength ( ) ; ( pos alignedSeq getStart ( ) getPosition ( ) ; pos alignedSeq ( ) getPosition ( ) ; pos ) ( alignedSeqGap ( pos ) ) structIndex = alignedStruct getSequenceIndexAt ( pos ) ; assert ( structIndex > ) ; Group g = atomIndexPosition ( structIndex ) ; warn ( "Chain residue in Structure has no corresponding amino acid in the sequence, g getChainId ( ), g getResidueNumber ( ) toString ( ), g getChain ( ) getStructure ( ) getPDBCode ( ) ) ; ; } ( alignedStructGap ( pos ) ) seqIndex = alignedSeq getSequenceIndexAt ( pos ) ; structIndex = alignedStruct getSequenceIndexAt ( pos ) ; Group g = atomIndexPosition ( structIndex ) ; assert ( <= seqIndex seqIndex < ca ) ; ca seqIndex = g getResidueNumber ( ) ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
@ SuppressWarnings (" } ) public static IMeta mergeMeta ( IMetaData <?,? > metaData1, IMetaData <?,? > metaData2 ) { Map <, Object > map = ( ( Map <, Object > ) metaData ) ; Set < Entry < String, Object > > set = map. entrySet ( ) ; Map <, Object > map = ( ( Map <, Object > ) metaData ) ; Set < Entry < String, Object > > set2 = map2. entrySet ( ) ; Map <, Object > rep = HashMap <, Object > ( ) ; ( < Object > set ) key = entry getKey ( ) ; if ( map ( key ) ) { Object value = map ( key ) ; Object value = map ( key ) ; if ( value Double ) { if ( Double valueOf ( value toString ( ) ) doubleValue ( ) < Double valueOf ( value toString ( ) ) doubleValue ( ) ) { rep. put ( key, value2 ) ; } } if ( value Integer ) { if ( Integer valueOf ( value toString ( ) ) intValue ( ) < Integer valueOf ( value toString ( ) ) intValue ( ) ) { rep. put ( key, value2 ) ; } } if ( value Long ) { if ( Long valueOf ( value toString ( ) ) longValue ( ) < Long valueOf ( value toString ( ) ) longValue ( ) ) { rep. put ( key, value2 ) ; } } if ( value Boolean ) { if ( Boolean valueOf ( value toString ( ) ) Boolean valueOf ( value toString ( ) ) ) { rep. put ( key, value2 ) ; } } } } set. removeAll ( rep. entrySet ( ) ) ; set. addAll ( rep. entrySet ( ) ) ; set. addAll ( set2 ) ; return metaData1 ; }<CODESPLIT>Merges the two Meta objects
public List < T > subList ( int arg0, int arg1 ) { (Results ( argResultsAvailable ( moveNextResults ( ) ; } return Collections. unmodifiableList ( allResults. subList ( arg, arg1 ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private Message prepare ( String channel, Message message, Recipient [ ] recipients ) { message setMetadata (cwfpubnode, nodeId ) ; message setMetadata (cwfpubchannel, channel ) ; message setMetadata (cwfpubevent, UUID randomUUID ( ). toString ( ) ) ; message. setMetadata (cwfpubwhen, System. currentTimeMillis ( ) ) ; message. setMetadata (cwfpubrecipients, recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private < T > GraphRequest < T > graph ( String object, JavaType type, Param... params ) { this checkForBatchExecution ( ) ; GraphRequest T req GraphRequest T > ( object params this mapper this T >MappingChain ( type ) ) ; this graphRequests ( req ) ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void writeLength ( long length ) { if ( length < 251 ) { buf position ++ = ( byte ) length ; } else if ( length < 65536 ) { buf position ++ = ( byte ) ; buf position ++ = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; } else if ( length < 1616 ) { buf position ++ = ( byte )xfd ; buf position ++ = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; buf position = ( byte ) ( length 16 ) ; } else { buf position ++ = ( byte )xfe ; buf position ++ = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; buf position ] = ( byte ) ( length 16 ) ; buf position ] = ( byte ) ( length 24 ) ; buf position ] = ( byte ) ( length 32 ) ; buf position ] = ( byte ) ( length 40 ) ; buf position ] = ( byte ) ( length 48 ) ; buf position ] = ( byte ) ( length ) ; } }<CODESPLIT>Write length .
public static < TSource, TResult > List < TResult > map ( Collection < TSource > items, Mapper < TSource, TResult > mapper ) { ( ( items ) ) return new ArrayList < > ( ) ; } TResult > > ( items ( ) ) ; ( TSource item items ) TResult mappedItem mapper map ( item ) ; ( mappedItem ) ; } return ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serializeReal ( final Number real, final ContentHandler handler ) throws SAXException { serializeElement (real valueOf ( real ( ) ) handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public JMenuBar setupStandardMenu ( ActionListener targetAction, boolean bAddHelpMenu ) { Application application BaseApplet getSharedInstance ( ) getApplication ( ) ; ResourceBundle oldResources application getResourceBundle ( ) ; application getResources (, ) ; this setupActions ( targetAction ) ; JMenuBar menuBar = new JMenuBar ( ) { private static final long =L ; public Dimension getMaximumSize ( ) { return new Dimension ( super. getMaximumSize ( ). width, super. getPreferredSize ( ). height ) ; } } ; menuBarOp ( ) ; JMenu menu ; charchItemShortcut char 20 ; menu this addMenu ( menuBar, ThinMenu FILE ) ; this addMenuItem ( menu, ThinMenu PRINT, rgchItemShortcut ) ; menu addSeparator ( ) ; this add ( menu,inMenuON,chItem ) ; this add ( menu,inMenuOUT,chItem ) ; this addMenuItem ( menu, ThinMenu CHANGEPASSWORD, rgchItemShortcut ) ; menu addSeparator ( ) ; this addMenuItem ( menu, ThinMenu CLOSE, rgchItemShortcut ) ; rgchItemShortcut char 20 ; menu this addMenu ( menuBar, ThinMenu EDIT ) ; this addMenuItem ( menu, ThinMenu CUT, rgchItemShortcut ) ; this addMenuItem ( menu, ThinMenu COPY, rgchItemShortcut ) ; this addMenuItem ( menu, ThinMenu PASTE, rgchItemShortcut ) ; menu addSeparator ( ) ; this addMenuItem ( menu, ThinMenu PREFERENCES, rgchItemShortcut ) ; ( oldResources ) application setResourceBundle ( oldResources ) ; ( bAddHelpMenu ) menu = this addHelpMenu ( menuBar ) ; return menuBar ; }<CODESPLIT>Setup the standard menu items .
public static String getPreferredAttributeNameForLaneCount ( ) { Preferences prefs Preferences userNodePackage ( RoadNetwork ) ; ( prefs ) return prefs get (LANECOUNTATTR_NAME, DEFAULT_ATTR_LANE_COUNT ) ; } return DEFAULT_ATTR_LANE_COUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd [ ] get ( nitro_service service, nsrollbackcmd_args args ) throws Exception { nsrollbackcmd obj nsrollbackcmd ( ) ; options option options ( ) ;args ( nitroutil objecttowithoutquotes ( args ) ) ; nsrollbackcmd ] response ( nsrollbackcmd ] ) obj_resources ( service option ) ; return response ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int translateElementNo ( int i ) { if ( useList i ) { return i ; } j = ; PatternRule rule = ( PatternRule ) this rule ; ( k = ; k < i ; k ) += rule getElementNo ( ) ( k ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String [ ] getProxyHostsWhiteList ( ) { if ( _proxyHostsWhiteList _proxyHostsWhiteList size ( ) ) return new String ; hosts = new String _proxyHostsWhiteList size ( ) ; hosts = ( String ) _proxyHostsWhiteList. toArray ( hosts ) ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean addMetatypeAd ( MetatypeAd metatypeAd ) { ( this metatypeAd ) this metatypeAd = new LinkedList MetatypeAd ( ) ; ( MetatypeAd ad metatypeAd ) if ( ad getID ( ) equals ( metatypeAd getID ( ) ) ) return false ; this metatypeAd add ( metatypeAd ) ; return true ;<CODESPLIT>Adds a metatype AD .
public long skip ( long n ) throws IOException { ( mInputStream available ( ) n ) return mInputStream. skip ( n ) ; } mInputStream close ( ) ; mPos n ; mObject mClient getObject ( mBucketName, mKey,,,,, mPos, ) ; mInputStream ( mObject getDataInputStream ( ) ) ; } ( ServiceException ) { new IOException ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean isSuperCall ( JCTree tree ) { Name name called ( tree ) ; ( name ) names = name table names ; return name == names. _super ; } return false ; } }<CODESPLIT>Is this a call to super?
public static String getShortRequestDump ( String fromMethod, boolean includeHeaders, HttpServletRequest request ) { dump = ( ) ; dump append (Timestamp : ) append ( ISO getTimestamp ( ) ) append ( ) ; dump append (fromMethod : ) append ( fromMethod ) append ( ) ; dump append (Method : ) append ( request getMethod ( ) ) append ( '\ ) ; dump append (Scheme : ). append ( request. getScheme ( ) ). append ( '\ ) ; dump. append (URI : ). append ( request. getRequestURI ( ) ). append ( '\ ) ; dump. append (QueryString : ). append ( request. getQueryString ( ) ). append ( '\ ) ; dump. append (AuthType : ). append ( request. getAuthType ( ) ). append ( '\ ) ; dump. append (RemoteAddr : ). append ( request. getRemoteAddr ( ) ). append ( '\ ) ; dump. append (Scheme : ). append ( request. getScheme ( ) ). append ( '\ ) ; dump. append (ContentType : ). append ( request. getContentType ( ) ). append ( '\ ) ; dump. append (ContentLength ). append ( request. getContentLength ( ) ). append ( '\ ) ; if ( includeHeaders ) { dump. append (Headers : ) ; Enumeration < String > headers = request. getHeaderNames ( ) ; ( headers ( ) ) header = headers ( ) ; dump. append (t ). append ( header ). append ( ). append ( request. getHeader ( header ) ). append ( '\ ) ; } } return ( dump. toString ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validateNotEmpty ( String stringToCheck, boolean trim, String argumentName ) throws NullArgumentException { validateNotNull ( stringToCheck, argumentName ) ; ( stringToCheck ( ) ( trim stringToCheck trim ( ) ( ) ) ) new NullArgumentException ( argumentName + ISEMPTY ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static JPanel createPanelWithVerticalLayout ( ) { JPanelpanel JPanel ( ) ;panel ( BoxLayout ( _panel BoxLayout YAXIS ) ) ; return _panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected boolean shouldAnalyze ( ) { ( analyzerAnalyzer ) FileTypeAnalyzer fileTypeAnalyzer ( FileTypeAnalyzer ) analyzer ; fileTypeAnalyzer accept ( dependency getActualFile ( ) ) ; } return ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void registerServiceClass ( Class serviceClass ) { registeredServiceClasses put ( serviceClass ( ) serviceClass ) ; Settings ServicesAvailableOption ( serviceClass ( ) ) ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public String getSectionText ( String pageTitle, int sectionNumber ) throws Exception { this getPageContent ( pageTitlervsection + sectionNumber ) ; return result ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] x, int [ ] y ) { if ( x y ) throw new IllegalArgumentException ( String format (Arrays have different x[%d y[%d, x, y ) ) ; return 1 - Math. cor ( x, y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static TileGrid getTileGridFromWGS84 ( Point point, int zoom ) { Projection projection Projection getProjection ( Projection EGGEODETSYSTEM ) ; return getTileGrid ( point, zoom, projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public List < VectorLayer > getVectorLayers ( ) { < VectorLayer > list < VectorLayer > ( ) ; ( Layer < layer layers ) ( layer VectorLayer ) list add ( ( VectorLayer ) layer ) ; } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void calcRmsd ( Point3d [ ] x, Point3d [ ] y ) { ( centered ) innerProduct ( y, x ) ; } xref CalcPoint clonePoint3Array ( x ) ; xtrans CalcPoint centroid ( xref ) ; (x centroid + x ) ; xtrans negate ( ) ; CalcPoint translate ( Vector3 ( xtrans ) xref ) ; yref CalcPoint clonePoint3Array ( y ) ; ytrans = CalcPoint centroid ( yref ) ; (y centroid + y ) ; ytrans negate ( ) ; CalcPoint translate ( Vector3 ( ytrans ) yref ) ; innerProduct ( yref, xref ) ; } calcRms ( wsum ) ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void setSectionHeading ( Title v ) { if ( SectionType featOkTst ( ( SectionType ) jcasType ) casFeatsectionHeading ) jcasType jcas throwFeatMissing (sectionHeading,de.julielab.jules.types.Section ) ; jcasType llcas ll_set ( addr, ( ( Section_Type ) jcasType ) casFeatCode_sectionHeading, jcasType ll_cas ll_getFSRef ( v ) ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( InputStream is ) throws IOException, SAXException, ParserConfigurationException { SxmpParser parser SxmpParser ( version ) ; Operation operation ; operation = parser parse ( ) ; } ( SxParsing ) { ( getOperation ( ) getOperation ( ) getType ( ) ) (Unable fully parse XML into a request returning ErrorResponse error + e getMessage ( ) + parsed + e getOperation ( ) ) ; return new ErrorResponse ( e. getOperation ( ). getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } new SAXException ( e ( ), e ) ; } } ( ( operation Request ) ) new SxmpErrorException ( Sxmp UNSUPPORTED_OPERATION, "A session can process requests" ) ; } Request req = ( Request ) operation ; ( req getAccount ( ) ) new SxmpErrorException ( Sxmp MISSING_REQUIRED_ELEMENT, "A request must include account credentials" ) ; } ( processor authenticate ( req getAccount ( ) ) ) new SxmpErrorException ( Sxmp AUTH_, "Authentication failure" ) ; } ( operation SubmitRequest ) return processor. submit ( req. getAccount ( ), ( SubmitRequest ) operation ) ; } ( operation DeliverRequest ) return processor. deliver ( req. getAccount ( ), ( DeliverRequest ) operation ) ; } ( operation DeliveryReportRequest ) return processor. deliveryReport ( req. getAccount ( ), ( DeliveryReportRequest ) operation ) ; } new SxmpErrorException ( Sxmp UNSUPPORTED_OPERATION, "Unsupported operation request type" ) ; } } ( Sx ) { ( e ( ) ) ; return new ErrorResponse ( operation. getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } ( t ) { error ( "Major uncaught throwable while processing request generating an ErrorResponse, t ) ; return new ErrorResponse ( operation. getType ( ), SxmpErrorCode. GENERIC. getIntValue ( ), "Generic error while processing request" ) ; } }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submitPayload ( String url, HttpRequestUtil. ConnectionSettings connectionSettings, String jsonPayloadObject, String pushApplicationId, String masterSecret, MessageResponseCallback callback, List < String > redirectUrls ) { if ( redirectUrls contains ( url ) ) throw new PushSenderException ( "The site contains an infinite redirect loop! Duplicate url " + url ) ; } redirectUrls add ( url ) ; } HttpURLConnection http = ; { credentials = pushApplicationId + ':' + masterSecret ; encoded = Base64 encodeBytes ( credentials getBytes ( UTF ) ) ; http = ( HttpURLConnection ) HttpRequestUtil post ( url, encoded, jsonPayloadObject, UTF8, proxy, customTrustStore, connectionSettings ) ; statusCode = http getResponseCode ( ) ; ( Level INFO, String format ( "HTTP Response code from UnifiedPush Server, ) ) ; if (Redirect ( statusCode ) ) redirectURL = http getHeaderField (Location ) ; log ( Level INFO, String format ( "Performing redirect, redirectURL ) ) ; submitPayload ( redirectURL, pushConfiguration getConnectionSettings ( ), jsonPayloadObject, pushApplicationId, masterSecret, callback, redirectUrls ) ; } if ( statusCode >= 400 ) log ( Level SEVERE, "The Unified Push Server returned status code " + ) ; throw new PushSender ( ) ; } if ( callback ) callback onComplete ( ) ; } } } ( Pushhe ) { throwhe ; } ( e ) { log ( Level INFO, "Erroring while trying send push delivery request, e ) ; throw new PushSenderException ( e. getMessage ( ), e ) ; } { if ( http ) http disconnect ( ) ; } } }<CODESPLIT>The actual method that does the real send and connection handling
public String [ ] getChildNames ( ) { if ( children children size ( ) ) return EMPTYNAMES ; String arr = new String children. size ( ) ; ( i = ; i < arr. ; i ) arr [ ] = ( ( RamResourceCore ) children. get ( i ) ). getName ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object getIndex ( Object array, int index ) throws UtilTargetError { Interpreter (getIndex, array, index, index ) ; ( array List ) return ( ( List? ) array ) ( index ) ; Object val Array ( array index ) ; return Primitive. wrap ( val, Types. arrayElementType ( array. getClass ( ) ) ) ; } ( ) { len array? ( ( <? > ) array ) ( ) : Array getLength ( array ) ; new UtilTargetError ( "Index " + index + " out-of-bounds for length " + len, e1 ) ; } }<CODESPLIT>Get object from array or list at index .
public static base_response add ( nitro_service client, aaakcdaccount resource ) throws Exception { aaakcdaccount addresource aaakcdaccount ( ) ; addresource kcccount = resource kcccount ; addresource keytab = resource keytab ; addresource realmstr = resource realmstr ; addresource delegateduser = resource delegateduser ; addresource kpassword = resource kpassword ; addresource user = resource user ; addresourceert = resource cert ; return addresource. add_resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void lockExclusive ( ) { if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr entry ( this, tc,lockExclusive, this ) ; interrupted = ; ( tryLockExclusive ( ) ) { if ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this, tc, "Waiting to exclusive lock ) ; wait ( 1000 ) ; } ( InterruptedException e ) { interrupted = ; } } (LockCount ) { if ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this, tc, "Waiting for lock count to reach " + iLockCount ) ; wait ( 1000 ) ; } ( InterruptedException e ) { interrupted = ; } } if ( interrupted ) { Thread. currentThread ( ). interrupt ( ) ; } if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr ( this, tc, "lockExclusive ) ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public void setCPOptionValueLocalService ( com. liferay. commerce. product. service. CPOptionValueLocalService cpOptionValueLocalService )LocalServiceLocalService ; }<CODESPLIT>Sets the cp option value local service .
public static String inferModulePathFromType ( TypeDeclaration type ) {Declaration pkg getPackage ( ) ; pkg? '/' + pkg getQualifiedName ( ) replace ( '.' '/' ) : "/" ; }<CODESPLIT>Infers the Struts module path from the given controller class .
final int getLeapMonth ( int cycle, int yearOfCycle ) { leapMonths = this. getLeapMonths ( ) ; elapsedYears = ( cycle ) 60 + yearOfCycle ; index = 2 ( ( elapsedYears leapMonths ) / 3 ) ; lm = ; ( ( index leapMonths. ) ) test = leapMonths index ; if ( test < elapsedYears ) { index += Math max ( 2 * ( ( elapsedYears - test ) 3 ), 2 ) ; } if ( test > elapsedYears ) { ; } else { lm = leapMonths index + ; ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet getSnippet ( Integer snippetId, boolean downloadContent ) throws GitLabApiException { ( snippetId ) new RuntimeException ( "snippetId can't null" ) ; } Response response get ( Response Status OK,,snippets, snippetId ) ; Snippet snippet response readEntity ( Snippet ) ; ( downloadContent ) snippet setContent (ippetContent ( snippet getId ( ) ) ) ; } return snippet ; }<CODESPLIT>Get a specific Snippet .
public final int get ( int codePoint ) { value ; ix ; if ( codePoint >= ) { if ( codePoint <xd800 ( codePoint >xdbff && codePoint <=x ) ) { ix = index UTESHIFT ; ix = ( ix UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 ix ; return value ; } if ( codePoint <=xffff ) { ix = index UTELSCPINDEXOFFSET + ( (xd800 ) UTESHIFT ) ; ix = ( ix UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 ix ; return value ; } if ( codePoint < highStart ) { ix = ( UTRIE2_INDEX_1_OFFSET UTRIE2_OMITTED_BMP_INDEX_1_LENGTH ) + ( codePoint UTRIE2_SHIFT_1 ) ; ix = index ix ; += ( codePoint UTE ) & UTEMASK ; ix = index ix ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 ix ; return value ; } if ( codePoint <=x10 ) { value = data32 highValueIndex ; return value ; } } return errorValue ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object getMBeanAttributeObject ( String name String attrName ) throws JMException { MBeanServer serverBeanServer ( ) ; ObjectName ObjectName ( ) ; server getAttribute ( objName attrName ) ; }<CODESPLIT>Get MBean attribute object
public synchronized void setSelectedIndex ( final int selectedIndex ) { ( items size ( ) selectedIndex selectedIndex ) throw new IndexOutOfBoundsException ( "Illegal argument to ComboBoxsetSelectedIndex " + selectedIndex ) ; } oldSelection = this selectedIndex ; this selectedIndex = selectedIndex ; ( selectedIndex ) updateText ( ) ; } updateText ( items ( selectedIndex ) ( ) ) ; } runOnGUIThreadIfExistsOtherwiseRunDirect ( new Runnable ( ) { public void run ( ) { ( Listener listener listeners ) listener onSelectionChanged ( selectedIndex, oldSelection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Stats getPhotoStats ( String photoId Date date ) throws FlickrException { getStats ( METHODGETPHOTOSTATSphotoid, photoId, date ) ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public ServiceCall < DocumentStatus > getDocumentStatus ( GetDocumentStatusOptions getDocumentStatusOptions ) { Validator. notNull ( getDocumentStatusOptions,getDocumentStatusOptions cannot be null ) ; =venvironments",collections",documents" } ; pathParameters = getDocumentStatusOptions environmentId ( ), getDocumentStatusOptions collectionId ( ), getDocumentStatusOptions. documentId ( ) } ; RequestBuilder = RequestBuilder. get ( RequestBuilder.Url ( getEndPoint ( ),, pathParameters ) ) ;. query (version, versionDate ) ; Map <, > sdkHeaders = SdkCommon getSHeaders (discovery,v,getDocumentStatus ) ; ( < String String > header : sdkHeaders. ( ) ). header ( header. getKey ( ), header. getValue ( ) ) ; }. header (Accept,applicationjson ) ; return createServiceCall ( builder. build ( ), ResponseConverterUtils. getObject ( DocumentStatus. class ) ) ; }<CODESPLIT>Get document details .
public Pager < Issue getClosesIssues ( Object projectIdOrPath Integer mergeRequestIid int itemsPerPage ) throws GitLabApiException { return Pager < Issue > ( this, Issue, itemsPerPage,,projects, getProjectIdOrPath ( projectIdOrPath ),mergerequests, mergeRequestIid,closesissues ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class <? > clazz, String msg, Exception... e ) { if ( DEBUG ) { exceptionStr = ; if ( e e length ) { sw = ( ) ; pw = ( sw ) ; e. printStackTrace ( pw ) ; pw. flush ( ) ; exceptionStr =exception = + sw. toString ( ) ; } System err println ( "[" + sSdf format ( Date ( ) ) + "]" + "-" + "[" + clazz getSimpleName ( ) + + msg + + exceptionStr ) ; } }<CODESPLIT>To output the error log message to the error out
public static HtmlTree TH ( HtmlStyle styleClass, String scope, Content body ) { HtmlTree htmltree HtmlTree ( HtmlTag THCheck ( body ) ) ; ( style ) htmltree addStyle ( styleClass ) ; htmltreeAttr ( HtmlAttr SCOPECheck ( scope ) ) ; return htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtainDividerMargin ( final int themeResourceId ) { TypedArray typedArray = getContext ( ) getTheme ( ) obtainStyledAttributes ( themeResourceId R attr materialDialogDividerMargin } ) ; setDividerMargin ( typedArray getDimensionPixelSize (, ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void setDefaultButton ( SBaseButton button ) { getScreenFieldView ( ) setDefaultButton ( button : button getScreenFieldView ( ) ) ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { ( k k ( root ) ) new IllegalArgumentException ( ) ; RedBlackTreeNode < Key Value x select ( root k ) ; return x. getKey ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( RequestHandler request ) { lock ( ) lock ( ) ; {SessionRequests add ( request ) ; } { lock ( ). unlock ( ) ; } }<CODESPLIT>Adds a request handler to this queue .
public static T T withPrintWriter ( OutputStream stream ClosureParams ( value = SimpleType. class options =javaioPrintWriter" ) Closure < T closure ) throws IOException {Writer (PrintWriter ( stream ), closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void addRegexRoute ( String urlPattern Class < Actor actorClass ) throws RouteAlreadyMappedException { addRoute ( Route ( urlPattern ) actor ) ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void sendQueuedEvents ( KeenProject project, KeenCallback callback ) { if ( isActive ) handleLibraryInactive ( callback ) ; return ; } if ( project defaultProject ) handleFailure ( IllegalStateException (No project specified no project found ) ) ; return ; } if (NetworkConnected ( ) ) KeenLogging log (Not sending events is no network connection +Events will be retried next time `sendQueuedEvents is called." ) ; handleFailure ( callback Exception (Network connected." ) ) ; return ; } KeenProject useProject = ( project?Project : project ) ; { projectId = useProject getProjectId ( ) ; Map < List < Object > > eventHandles = eventStoreHandles ( projectId ) ; Map < List < Map < Object > > > events = buildEventMap ( projectId eventHandles ) ; response = publishAll ( useProject events ) ; if ( response ) { handleAddEventsResponse ( eventHandles, response ) ; } ( e ) { KeenLogging log (Error handling response to batch publish + e getMessage ( ) ) ; } } handleSuccess ( callback ) ; } ( e ) { handleFailure ( callback, e ) ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public int getMaxQueuedConnections ( ) {ThreadPool ( )? : ( (ThreadPool ( ) getQueue ( ) ArrayBlockingQueue )? ( ( ArrayBlockingQueue )ThreadPool ( ) getQueue ( ) ) size ( ) + ( ( ArrayBlockingQueue )ThreadPool ( ) getQueue ( ) ) remainingCapacity ( ) : ) ; }<CODESPLIT>this should only be used as an estimate
final public AuxiliaryTree TreeRoot ( boolean requiresFoot ) throws ParseException { SimpleNode jj = SimpleNode ( JJTTREERO ) ; jjtc = ; jjtree openNodeScope ( jj000 ) ; Tree t ; { t = TreeNode ( ) ; jjtree closeNodeScope ( jj000, ) ; jjtc = ; if ( ) return new AuxiliaryTree ( t, requiresFoot ) ; } } ( jj ) { if ( jjtc ) jjtree clearNodeScope ( jj000 ) ; jjtc = ; } jjtree popNode ( ) ; } if ( jjte RuntimeException ) { if ( ) ( RuntimeException ) jjte ; } } if ( jjte ParseException ) { if ( ) ( ParseException ) jjte ; } } if ( ) ( Error ) jjte ; } } { if ( jjtc ) { jjtree closeNodeScope ( jj000, ) ; } } throw new Error ( "Missing return statement in function" ) ; }<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
INodeDirectory addToParent ( byte [ ] src, INodeDirectory parentINode, INode newNode, boolean propagateModTime, int childIndex ) { INodeDirectory newParent = ; ( ) ; { { newParent = rootDir addToParent ( src, newNode, parentINode,, propagateModTime, childIndex ) ; cacheName ( newNode ) ; } ( FileNotFoundException e ) { return null ; } if ( newParent ) return ; if ( newNode isDirectory ( ) ) INodeFileF = ( INodeFile ) newNode ; BlockInfo blocks =FBlocks ( ) ; ( ; < blocks ; )F setBlock ( i getFSNamesystem ( ) blocksMap addINodeForLoading ( blocks i,F ) ) ; } } } { writeUnlock ( ) ; } return newParent ; }<CODESPLIT>Add node to parent node when loading the image .
public void setModel ( final MindMap model, final boolean notifyModelChangeListeners ) { this lock ( ) ; { ( this elementUnderEdit ) Utils. safeSwingBlockingCall ( new Runnable ( ) { public void run ( ) { endEdit ( ) ; } } ) ; } List < > selectedPaths = < > ( ) ; ( final Topic t this selectedTopics ) selectedPaths add ( t getPositionPath ( ) ) ; } this selectedTopics clear ( ) ; MindMap oldModel = this model ; this model = assertNotNull (Model must not be null, model ) ; ( final PanelAwarePlugin p MindMapPluginRegistry getInstance ( ) findFor ( PanelAwarePlugin class ) ) p onPanelModelChange ( this, oldModel, this model ) ; } doLayout ( ) ; revalidate ( ) ; selectionChanged = ; ( final posPath selectedPaths ) Topic topic = this model findForPositionPath ( posPath ) ; ( topic ) selectionChanged = ; } ( MindMap isHidden ( topic ) ) this selectedTopics add ( topic ) ; } } if ( selectionChanged ) fireNotificationSelectionChanged ( ) ; } repaint ( ) ; } { this unlock ( ) ; if ( notifyModelChangeListeners ) fireNotificationMindMapChanged ( ) ; } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public OperationFuture LoadBalancer delete ( LoadBalancer loadBalancer ) { LoadBalancerMetadata loadBalancerMetadata findBy ( loadBalancer ) ; loadBalancerClient delete ( loadBalancerMetadata getDataCenter ( ) loadBalancerMetadata getId ( ) ) ; OperationFuture < > ( loadBalancer NoWaitingJobFuture ( ) ) ; }<CODESPLIT>Delete load balancer
public GetSnapshotResponse getSnapshot ( GetSnapshotRequest request ) { ( requestrequest be ) ; checkStringNotEmpty ( request getSnapshotId ( )request snapshotId no be empty ) ; InternalRequest internalRequest this createRequest ( request Http GET, SNAPSHOTPREFIX, request getSnapshotId ( ) ) ; return invokeHttpClient ( internalRequest, GetSnapshotResponse. class ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
@ SuppressWarnings ( "checkstyle:emptyblock" ) void excludeLoggers ( ) { try { BugsnagAppender. addExcludedLoggerPattern ( "orgapachecatalinacoreContainerBase." + "\\[Tomcat.*[.*[/.*[.*]" ) ; BugsnagAppender. addExcludedLoggerPattern ( "orgeclipsejettyserverHttpChannel" ) ; BugsnagAppender. addExcludedLoggerPattern ( "ioundertowrequest" ) ; } catch ( NoClassDefFoundError ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R1 relationships ) { if ( base ) { throw new AssertionError ( "" ) ; } ( i = ; i < base. ; i ) if ( null base i ) { ; } final IConceptSet set = data i = new SparseConceptHashSet ( ) ; set. addAll ( base i ) ; if ( null relationships data i ) { set. removeAll ( relationships. data i ) ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static < E > E getEndpoint ( Class < E > type, String name, Reflections reflections ) { E result = ; Set < Class <? extends E > > foundClasses = reflection getSubTypesOf ( type ) ; Set < Class <? E > > endpointClasses = HashSet < > ( ) ; ( Class < E > clazz foundClasses ) if ( isAbstract ( clazz ( ) ) ) endpointClasses add ( clazz ) ; } } Iterator < Class <? extends E > > iterator = endpointClasses iterator ( ) ; ( iterator ( ) ) Class <? E > next = iterator next ( ) ; if ( startsWithIgnoreCase ( next getName ( ),comgithubdavidcarbonirestolino.routes." ) ) iterator remove ( ) ; } } if ( endpointClasses size ( ) ) if ( endpointClasses size ( ) ) log ( "Warning found multiple candidates for endpoint, name, endpointClasses ) ; } { result = endpointClasses iterator ( ) next ( ) newInstance ( ) ; } ( e ) { log ( "Error cannot instantiate endpoint class, name, endpointClasses iterator ( ) next ( ) ) ; e printStackTrace ( ) ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public final void writtenStartedFlush ( AOStream stream, Item startedFlushItem ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, "writtenStartedFlush" ) ; String key = SIMPUtils. getRemoteGetKey ( stream. getRemoteMEUuid ( ), stream. getGatheringTargetDestUuid ( ) ) ; StreamInfo sinfo = streamTable. get ( key ) ; if ( ( sinfo null ) && sinfo. streamId. ( stream. streamId ) ) { synchronized ( s ) { sinfo. item = ( AOStartedFlushItem ) startedFlushItem ; } } else { e = new (. ( "INTERNAL__ERROR_", new Object "sibprocessorAnycastOutputHandler", "584" }, null ) ) ;. ( e, "comibmsibprocessorimplAnycastOutputHandlerwrittenStartedFlush", "12865141", this ) ; SibTr. exception ( tc, e ) ; SibTr. error ( tc, "INTERNAL__ERROR_", new Object "sibprocessorimplAnycastOutputHandler", "4" } ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, "writtenStartedFlush", e ) ; throw e ; } if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, "writtenStartedFlush" ) ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static List < Report > getDetailSubreports ( ReportLayout reportLayout ) { List < Report > subreports = < Report > ( ) ; Band band = reportLayout getDetailBand ( ) ; ( = rows = band. getRowCount ( ) ; < rows ; i ) List < BandElement > list = band getRow ( i ) ; ( = = list. ( ) ; < ; ) BandElement = list ( ) ; if ( be ReportBandElement ) { subreports add ( ( ( ReportBandElement ) be ) getReport ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public ApiAppList getApiApps ( ) throws HelloSignException { ApiAppList ( httpClientAuth ( auth ) get ( BASEURI + APIAPPLISTURI ) asJson ( ) ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detachAgent ( Object pVm ) { ( pVm ) Class clazz pVm getClass ( ) ; Method method clazz getMethod (detach ) ; method setAccessible ( ) ; method invoke ( pVm ) ; } } ( ) { new ProcessingException ( " while detaching", e, options ) ; } ( NoSuchMethodException ) { new ProcessingException ( "Error while detaching", e, options ) ; } ( ) { new ProcessingException ( "Error while detaching", e, options ) ; } }<CODESPLIT>Detach from the virtual machine
public ObjectGraph excludeClasses ( Class <? >... classes ) { ( Class < c classes ) ( c ) new NullPointerException ( "Null class allowed" ) ; } excludedClasses add ( c ) ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void setSampling ( double min, double max, int total ) { this sampleMin = min ; this sample = max ; this numSamples = total ; this scores numSamples ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void calcProductAtVar ( int v, VarTensor prod, int excl1, int excl2 ) { ( nb ; nb < bg numNbsT ( v ) ; nb ) if ( nb excl nb excl ) { ; } VarTensor nbMsg = msgs bg opposingT ( v, nb ) ; prod elemMultiply ( nbMsg ) ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected ItemState findLastItemState ( QPath itemPath ) { ( i = itemAddStates. size ( ) ; i ; i ) ItemStatestate = itemAddStates ( ) ; if ( istate getData ( ) getQPath ( ) ( itemPath ) ) return istate ; } return null ; }<CODESPLIT>Find last ItemState .
public void addDispatcher ( String dispatcherId, AbsActorDispatcher dispatcher ) { ( dispatch ) ( dispatch ( dispatcherId ) ) return ; } dispatchers put ( dispatcherId dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
private void sgdTrain ( ClassificationDataSet D, MatrixOfVecs W, Vec b, int sign_mul, boolean parallel ) { IntList order = new IntList ( D size ( ) ) ; ListUtils addRange ( order,, D size ( ), ) ; final double lambdaadj = lambda / ( D size ( ) epochs ) ; owned = new K ; assignedpositiveinstances = ; assignments = new D size ( ) ; Arrays. fill ( assignments, 1 ) ; Vec dots = new DenseVector ( W. rows ( ) ) ; long t = ; ( epoch = ; epoch < epochs ; epoch ) Collections. shuffle ( order ) ; ( i : order ) t ; double eta = 1 ( lambda_adj t ) ; Vec x_i = D. getDataPoint ( i ). getNumericalValues ( ) ; yi = ( D. getDataPointCategory ( i ) 2 ) sign ; b. copyTo ( dots ) ; W. multiply ( x_i, 1, dots ) ; if ( yi 1 ) { ( k = ; k < K ; k ) if ( dots. get ( k ) > ) W. getRowView ( k ). mutableSubtract ( eta, x_i ) ; b. increment ( k, eta ) ; } } { kmax = ; ( k = ; k < dots. ( ) ; k ) if ( dots. get ( k ) > dots. get ( k__max ) ) k__max = k ; if ( dots. get ( k__max ) < ) z = ASSIGN ( dots, i, kmax, owned, assignments, assignedpositiveinstances ) ; W. getRowView ( z ). mutableAdd ( eta, x_i ) ; b. increment ( z, eta ) ; if ( assignments i < ) assignedpositiveinstances ++ ; owned assignments i -- ; owned z ; assignments = z ; } } W. mutableMultiply ( 1 1 t ) ; b. mutableMultiply ( 1 1 t ) ; } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype [ ] get ( nitro_service service ) throws Exception { appfwfieldtype obj appfwfieldtype ( ) ; appfwfieldtype ( appfwfieldtype ) objresources ( service ) ; return ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public Future < Channel > create ( final Promise < Channel > channelReadyPromise ) { delay thisDelaySeconds ( ) ; channelReadyPromise. addListener ( new GenericFutureListener < Future < Channel > > ( ) { public void operationComplete ( final Future < Channel > future ) { updatedDelay future ( )? : max ( min ( delay 2 MAXCONNECT ) MINCONNECT ) ; ApnsChannelFactory this currentDelaySeconds compareAndSet ( delay, updatedDelay ) ; } } ) ; this. bootstrapTemplate. config ( ). group ( ). schedule ( new Runnable ( ) { public void run ( ) { Bootstrap bootstrap ApnsChannelFactory this bootstrapTemplate clone ( ) channelFactory ( AugmentingReflectiveChannelFactory < > ( ClientChannelClass getSocketChannelClass ( ApnsChannelFactory this bootstrapTemplate config ( ) group ( ) ) CHANNELPROSEATTRIBUTEKEY channelReadyPromise ) ) ; ChannelFuture connectFuture bootstrap connect ( ) ; connectFuture. addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { ( future isSuccess ( ) )FailureLog ( channelReadyPromise ( ) ) ; } } } ) ; connectFuture. channel ( ). closeFuture ( ). addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { channelReadyPromise tryFailure ( IllegalStateException (Channel closed before HTTP preface completed." ) ) ; } } ) ; } } delay TimeUnit SECONDS ) ; return channelReadyPromise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List < String > loadOptions ( String optionFileName ) { List < > args = < > ( ) ; File optionFile = File ( optionFileName ) ; stringWriter = ( ) ; { InputStream inputStream = FileInputStream ( optionFile ) ; IOUtils copy ( inputStream, stringWriter ) ; } ( FileNotFoundException e ) { System println ( "Error reading options file " + e getMessage ( ) ) ; System exit ( ) ; } ( IOException e ) { System println ( "Error reading options file " + e. getMessage ( ) ) ; System exit ( ) ; } string = stringWriter toString ( ) ; stringTokenizer = ( string ) ; ( string ( ) ) args add ( stringTokenizer nextToken ( ) ) ; } return args ; }<CODESPLIT>Load options from a file
public void runJob ( ) { this currentJob = this jobQueue take ( ) ; ExecutionContext context ExecutionContext ( ) ; this executionContextManager initialize ( context ) ; } ( Execution e ) { new RuntimeException ( "Failed to initialize Job " + this currentJob + " execution context", e ) ; } this currentJob run ( ) ; } ( InterruptedException e ) { } { this execution removeContext ( ) ; } }<CODESPLIT>Execute one job .
public Response bind ( String name Object model ) {Loc ( ) put ( model ) ; return this ; }<CODESPLIT>Binds an object to the response .
public byte [ ] getByteArray ( Integer offset ) { byte result = ; ( offset ) result = m_map ( offset ) ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ ] getMetaMethods ( ) { MetaClass metaClass = InvokerHelper getMetaClass ( objectUnderInspection ) ; List metaMethods = metaClass getMetaMethods ( ) ; Object result = Object metaMethods size ( ) ; i = ; ( Iterator metaMethods iterator ( ) ; ( ) ; ) MetaMethod metaMethod = ( MetaMethod ) iter next ( ) ; result i = methodInfo ( metaMethod ) ; } return result ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ ] parse ( String pollers ) { periods = pollers split (s*" ) ; long result = long periods length ; errors = ; Logger logger = LoggerFactory. getLogger ( Pollers. class ) ; ( i = ; i < periods. ; i ) period = periods i ; { result i = Long. parseLong ( period ) ; if ( result i <= ) { logger. error ( "Invalid polling interval {} must positive, period ) ; errors = ; } } ( NumberFormatException e ) { logger. error ( "Cannot parse '{}' as a long, period, e. getMessage ( ) ) ; errors = ; } } if ( errors periods length ) { logger. info ( "Using a default configuration for poller intervals, join ( DEFAULT_PERIODS ) ) ; return DEFAULT_PERIODS ; } { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void setFooter ( String key, String value ) { Objects requireNonNull ( value ) ; i = ;Footer = ; ( i = _footerKeys. ( ) ; i ; i ) oldKey = _footerKeys ( i ) ; if ( oldKey equalsIgnoreCase ( key ) ) { if (Footer ) { _footerKeys remove ( i ) ; _footerValues remove ( i ) ; } {Footer = ; _footerValues ( i, value ) ; } } } if (Footer ) { _footerKeys add ( key ) ; _footerValues add ( value ) ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void addAttribute ( String name, final String value ) { ( melemContext mstartTagOpen ) patched = patchName ( name ) ; localName = getLocalName ( patchedName ) ; uri = getNamespaceURI ( patchedName ) ; addAttributeAlways ( uri, localName, patchedName,CDATA, value, ) ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public MimeMessage createMimeMessage ( Session session ) throws MessagingException { ( ( htmlPart ) ( textPart ) ) new IllegalArgumentException ( "Missing email content" ) ; } MimeMessage MimeMessage ( session ) ; msg setSubject ( subject ) ; setFrom ( InternetAddress ( from ) ) ; msg setContent ( createMultiPart ( ) ) ; msgRecipients ( Message Recipient TO, InternetAddress parse ( recipients, ) ) ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static ForwardCurveInterpolation createForwardCurveFromMonteCarloLiborModel ( String name, LIBORModelMonteCarloSimulationModel model, double startTime ) throws CalculationException { timeIndex = model getTimeIndex ( startTime ) ; < RandomVariable > liborsAtTimeIndex = < > ( ) ; firstLiborIndex = modelLiborPeriodDiscretization ( ) getTimeIndexNearestGreater ( startTime ) ;LibTime = modelLibretization ( ) getTime (LibIndex ) ; if ( firstLiborTime startTime ) { liborsAtTimeIndex add ( model getLIBOR ( startTime startTimeLibTime ) ) ; } double times = double firstLiborTime startTime? ( model getNumberOfLibors ( ) firstLiborIndex ) : ( model getNumberOfLibors ( ) firstLiborIndex + ) ; times = ; indexOffset = firstLiborTime startTime? : ; ( i = firstLiborIndex ; i < model.Libors ( ) ; i ) liborsAtTimeIndex add ( model getLIBOR ( timeIndex ) ) ; times [LibIndex + indexOffset ] = model getLibretization ( ) getTime ( ) startTime ; } RandomVariable libors = liborsAtTimeIndex ( RandomVariable liborsAtTimeIndex size ( ) ) ; return ForwardCurveInterpolation. createForwardCurveFromForwards ( name, times, libors, model. getLiborPeriodDiscretization ( ). getTimeStep ( firstLiborIndex ) ) ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public ServiceCall < Void > deleteWord ( DeleteWordOptions deleteWordOptions ) { Validator. notNull ( deleteWordOptions,deleteWordOptions cannot be null ) ; =vcustomizations",words" } ; pathParameters = deleteWordOptions customizationId ( ), deleteWordOptions word ( ) } ; RequestBuilder = RequestBuilder. delete ( RequestBuilder. constructHttpUrl ( getEndPoint ( ), pathSegments, pathParameters ) ) ; Map <, > sdkHeaders = SdkCommon getSHeaders (texttospeech,v,deleteWord ) ; ( < > header sdkHeaders. ( ) ). header ( header. getKey ( ), header. getValue ( ) ) ; } return createServiceCall ( builder. build ( ), ResponseConverterUtils. getVoid ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean tryMove ( float x, float y ) {x = playerX + x ;y = player + y ; ( blocked ( newx, newy ) ) ( blocked ( newx, playerY ) ) ( blocked ( playerX, newy ) ) return false ; } player =y ; return true ; } } playerX =x ; return true ; } } playerX =x ; player =y ; return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { this messages clear ( ) ; this dataLogger prepareForRead ( ) ; this dataLogger recover ( this ) ; } ( e ) { new DelegatedRuntimeException ( e ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clearSources ( ) { ( mAudioSources ( GVRAudioSource source mAudioSources ) sourceListener ( ) ; } mAudioSources clear ( ) ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
@ ( "unchecked" ) public static < V extends NumberVector > NumberVector. Factory < V > guessFactory ( SimpleTypeInformation < V > in ) { NumberVector Factory < V > factory = ; ( in VectorInformation ) factory = ( NumberVector Factory < V > ) ( ( VectorTypeInformation < V > ) in ) getFactory ( ) ; } ( factory ) Field f = inRestrictionClass ( ) getField (FACTORY ) ; factory = ( NumberVector Factory < V > ) f ( ) ; } ( e ) { LoggingUtil (Cannot determine factory for type + inRestrictionClass ( ) e ) ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { if ( rootDir exists ( ) ) rootDir mkdirs ( ) ; if ( rootSaveDir exists ( ) ) rootSaveDir mkdirs ( ) ; if ( paths ) paths = Maps newHashMap ( ) ; if ( labelRootDirs ) labelRootDirs = ( ) ; ( i = ; i < numLabels ; i ) paths put ( i, < File > ( ) ) ; labelRootDirs add ( File ( rootDir, valueOf ( i ) ) ) ; } ( dataSetIterator. ( ) ) DataSet next = dataSetIterator. next ( ) ; if ( miniBatchSize < ) miniBatchSize = next numExamples ( ) ; ( i = ; i < next. numExamples ( ) ; i ) DataSet currExample = next. get ( ) ; if ( labelRootDirs ( currExample outcome ( ) ) exists ( ) ) labelRootDirs ( currExample outcome ( ) ) mkdirs ( ) ; File example = File ( labelRootDirs ( currExample outcome ( ) ), valueOf ( paths ( currExample outcome ( ) ) size ( ) ) ) ; currExample. save ( example ) ; paths. get ( currExample. outcome ( ) ). add ( example ) ; } } numsSaved = ; ( paths. ( ) ) List < DataSet > miniBatch = ArrayList < > ( ) ; ( miniBatch. size ( ) miniBatchSize paths. ( ) ) ( i = ; i < numLabels ; i ) if ( paths ( i ) paths ( i ) isEmpty ( ) ) { DataSet d = DataSet ( ) ; d. load ( paths. get ( ). remove ( ) ) ; miniBatch. add ( d ) ; } paths remove ( i ) ; } } if ( rootSaveDir exists ( ) ) rootSaveDir mkdirs ( ) ; if ( miniBatch isEmpty ( ) ) { DataSet merge = DataSet. merge ( miniBatch ) ; if ( dataNormalization ) dataNormalization transform ( merge ) ; merge save ( File ( rootSaveDir, format (datasetdbin, numsSaved ) ) ) ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap ( double unixTime ) { gpsTime = unixTime64 ; gps countleaps ( gps true ) ; return isleap ( gpsTime ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void setSunXMLHeaders ( final Marshaller aMarshaller, final String sXMLHeaders ) {PropertyName SUNXMLHEADERS ; _Property ( aMarshallerPropertyName sXMLHeaders ) ; }<CODESPLIT>Set the Sun specific XML header string .
private void sendKeepAliveBridgeMessage ( int appId, String bridgeId, String token, final CallStatsHttp2Client httpClient ) { apiTS System ( ) ; BridgeKeepAliveMessage message BridgeKeepAliveMessage ( bridgeId apiTS ) ; requestMessageString gson toJson ( message ) ; httpClient. sendBridgeAlive ( keepAliveEventUrl, token, requestMessageString, new CallStatsHttp2ResponseListener ( ) { public void onResponse ( Response response ) { responseStatus response code ( ) ; BridgeKeepAliveResponse keepAliveResponse ; responseString response body ( ) string ( ) ; keepAliveResponse = gson fromJson ( responseString, BridgeKeepAliveResponse ) ; } ( IOException e ) { e ( ) ; throw new RuntimeException ( e ) ; } ( Json e ) { error ( "Json Syntax Exception " + e ( ), e ) ; e printStackTrace ( ) ; throw new RuntimeException ( e ) ; } httpClientDised ( ) ; ( responseStatus CallStatsResponseStatus RESPONSESTATUSSUCCESS ) keepAliveStatusListener onSuccess ( ) ; } ( responseStatus CallStatsResponseStatus INVALIDAUTHENTICTOKEN ) stopKeepAliveSender ( ) ; keepAliveStatusListener onKeepAliveError ( CallStatsErrors AUTHERROR, keepAliveResponse getMsg ( ) ) ; } httpClientDised ( ) ; } } public void onFailure ( Exception e ) { ( "Response exception " + e ( ) ) ; httpClientDised ( ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public StreamingOutput getResource ( final String resourceName, final long nodeId, final Map < QueryParameter, String > queryParams ) throws JaxRxException { final StreamingOutput sOutput = new StreamingOutput ( ) { public void write ( final OutputStream output ) throws IOException, JaxRxException { revision queryParams ( QueryParameter REVISION ) ; wrap queryParams ( QueryParameter WRAP ) ; doNodeId queryParams ( QueryParameter OUTPUT ) ; wrapResult ( wrap )? : wrap ( YESSTRING ) ; nodeid = ( doNodeId )? : doNodeId ( YESSTRING ) ; Long rev = revision? : Long valueOf ( revision ) ; serialize ( resourceName, nodeId, rev, nodeid, output, wrapResult ) ; } } ; return sOutput ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static ManagedEntity [ ] createManagedEntities ( ServerConnection sc, ManagedObjectReference [ ] mors ) { if ( mors ) { return new ManagedEntity [ 0 ] ; } ManagedEntity mes = ManagedEntity mors ; ( = ; i < mors. ; i ) mes i = createExactManagedEntity ( sc, mors i ) ; } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static Function < String, String > createStringTemplateSource ( I_CmsFormatterBean formatter, Supplier < CmsXmlContent > contentSupplier ) { return key -> { result = ; ( formatter ) result = formatter getAttributes ( ) ( key ) ; } ( result ) CmsXmlContent content = contentSupplier ( ) ; ( content ) result = content getHandler ( ) getParameter ( key ) ; } } return result ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static final ByteBuffer createReadWriteMessage ( final byte opCode, final int logicalBlockAddress, final short transferLength ) { ByteBufferdb ByteBuffer allocate ( DEFAULTCDB ) ;db put ( opCode ) ; cdb position (BLOCKOFFSET ) ; cdb putInt ( logicalBlockAddress ) ; cdb position ( TRANSFEROFFSET ) ; cdb put ( transferLength ) ; cdb rewind ( ) ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( ByteBuffer [ ] dsts int offset int length ) throws IOException { fillAppRead ( ) ; ( ) return rc ; } return ByteBuffers move ( appRead, dst, offset, length ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void setInt ( MemorySegment [ ] segments, int offset, int value ) { ( inFirstSegment ( segments offset 4 ) ) segments putInt ( offset value ) ; } setIntMultiSegments ( segments offset, value ) ; } }<CODESPLIT>set int from segments .
public Optional < User getOptionalUser ( String username ) { ( Optional ofNullable ( getUser ( username ) ) ) ; } GitLabApiException gl ) ( GitLabApi createOptionalFromException ( glae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void registerRateLimiterComponent ( ) { String componentPropName = GatewayConfigProperties COMPONENTPREFIX + IRateLimiterComponent. class. getSimpleName ( ) ; setConfigProperty ( componentPropName, ESRateLimiterComponent. class. getName ( ) ) ; setConfigProperty ( componentPropName +clienttype",jest" ) ;Property ( component +clientprotocol", "${apimanesprotocol}" ) ;Property ( component +clienthost", "${apimaneshost}" ) ;Property ( component +client", "${apimanes}" ) ;Property ( component +clientusername", "${apimanesusername}" ) ;Property ( component +clientpassword", "${apimanespassword}" ) ; }<CODESPLIT>The rate limiter component .
public Point3d getCoordinatesFromGridPoint ( int gridPoint ) { dimCounter = ; Point3d point = new Point3d (,, ) ; ( z = ; z < grid [ [. ; z ) { ( = ; < grid [. ; ) { ( x = ; x < grid. ; x ) { if ( dimCounter gridPoint ) { point. x = minx + latticeConstant * x ; point. y = min + latticeConstant * y ; point. z = minz + latticeConstant * z ; return point ; } dimCounter ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void setColor ( final Color COLOR ) { if ( color ) _ = COLOR ; } { color ( COLOR ) ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void releaseEvent ( EventId eventId ) throws Exception { Lockable < V eventWrapper sharedBuffer getEvent ( eventId ) ; ( eventWrapper ) ( eventWrapper release ( ) ) sharedBuffer removeEvent ( eventId ) ; } sharedBuffer upsertEvent ( eventId eventWrapper ) ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String toSql ( boolean showParameters ) { sql ; if ( forPaginator ) sql = metaModel getDialect ( ) formSelect ( null, null, fullQuery, orderBy, limit, offset ) ; } { sql = fullQuery? fullQuery : metaModel getDial ( ) formSelect ( metaModel getTableName ( ),, subQuery, orderBy, limit, offset ) ; } if ( showParameters ) { = ( sql ) append ( parameters ) ; join (, params, ) ; sql = toString ( ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source getSourceFromUriResolver ( StylesheetHandler handler ) throws TransformerException { Source s ; TransformerFactoryImpl processor handlerStylesheetProcessor ( ) ; URIResolver uriresolver processor getURIResolver ( ) ; ( uriresolver ) href getHref ( ) ; base handler getBaseIdentifier ( ) ; s uriresolver resolve ( href, base ) ; } return s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public String getTitle ( ) { if ( Journal featOkTst ( ( Journal ) jcasType ) casFeattitle ) jcasType jcas throwFeatMissing (title,dejulielab.jules.types.Journal ) ; return jcasType. ll_cas. ll_getStringValue ( addr, ( ( Journal_Type ) jcasType ). casFeatCode_title ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static Val of ( Object o ) { ( o o Val ) return Cast as ( o ) ; } return Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void addContextTerms ( SparseDoubleVector meaning, Queue < String > words, int distance ) { ( term words ) if ( term ( IteratorFactory EMPTYTOKEN ) ) { dimension = basis getDimension ( term ) ; if ( dimension ) ; meaning set ( dimension, weighting weight ( distance, windowSize ) ) ; distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public ArrayList < View > getViews ( ) { ( config commandLogging ) Log d ( config commandLoggingTag,getViews ) ; } return viewFetcher. getViews ( null, false ) ; } ( ) { e ( ) ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private < E extends WeightedEdge > SparseDoubleVector getVertexWeightVector ( WeightedGraph < E > g, int vertex ) { ( keepWeightVectors ) SparseDoubleVector weight vertexWeightVector ( vertex ) ; ( weightVec ) ( this ) { weightVec vertexWeightVector ( vertex ) ; ( weightVec ) weightVec computeWeightVector ( g, vertex ) ; vertexWeightVector put ( vertex, weightVec ) ; } } } return weightVec ; } computeWeightVector ( g vertex ) ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static int fillRows ( Row [ ] rows, TypeDescription schema, VectorizedRowBatch batch, int [ ] selectedFields ) { rows = min ( ( ) batch count ( ), rows length ) ; List < TypeDescription > fieldTypes = schema getChildren ( ) ; ( field = ; field < selectedFields. ; field ) orc = selectedFields field ; readField ( rows fieldIdx, fieldTypes get (cIdx ), batch cols [cIdx ], rowsToRead ) ; } return rowsToRead ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public List ICalProperty getProperties ( T component ) ArrayList < ICalProperty > ( component getProperties ( ) values ( ) ) ; }<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double computeTauAndDivide ( final int j, final int numRows, final double [ ] u, final double max ) { tau = ; ( i = ; i < numRows ; i ) d = u /= max ; tau += d d ; } tau = sqrt ( tau ) ; if ( u j ) tau = tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic getEpic ( String epicKey, Map < String, Epic > epicMap ) { url featureSettings getJiraBaseUrl ( ) + ( featureSettings getJiraBaseUrl ( ) ( )? : ) + format ( EPICREST epicKey ) ; ResponseEntity < String > responseEntity makeRestCall ( url ) ; responseBody responseEntity getBody ( ) ; JSONObject issue = ( JSONObject ) parser parse ( responseBody ) ; ( issue ) return null ; } return saveEpic ( issue, epicMap, false ) ; } ( ParseException ) { error (Parser exception when parsing teams, pe ) ; } ( Hygieia ) { error (Error in calling JIRA API, e ) ; } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable getLayoutConstraints ( final WComponent child ) { PanelModel model getComponentModel ( ) ; ( model layoutConstraints ) return model layoutConstraints get ( child ) ; } return ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map < String, Set < String > > getReverseMap ( ) { Set < Map Entry < String, Set < String > > > entries = map entrySet ( ) ; Map < Set < > > rMap = HashMap <, Set < > > ( entries size ( ) ) ; ( Map < Set < > > me entries ) k = me getKey ( ) ; Set < String > transList = me getValue ( ) ; ( trans transList ) Set < > entry = rMap ( trans ) ; if ( entry ) Set < > toAdd = LinkedHashSet < > ( 6 ) ; toAdd add ( k ) ; rMap put ( trans, toAdd ) ; } entry add ( k ) ; } } } return rMap ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential setRefreshToken ( String refreshToken ) { lock. lock ( ) ; { if ( refreshToken ) { Preconditions checkArgument ( jsonFactory && transport && clientAuthentication && tokenServerEncodedUrl,Please use the Builder and call setJsonFactory setTransport setClientAuthentication + andServerUrl/setTokenServerEncodedUrl ) ; } this refreshToken = refreshToken ; } { lock. unlock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void makeCurrent ( EGLSurface eglSurface ) { ( mEGLDisplay EGL14 EGLDISPLAY ) Log d ( TAG, makeCurrent wo display ) ; } ( EGL14 eMakeCurrent ( mEGLDisplay, eSurface, eSurface, mEGLContext ) ) throw new RuntimeException ( "eglMakeCurrent failed" ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static < T T navigateSafe ( T defaultValue Object source Object... paths ) { navigateOrDefault ( defaultValue, source, paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clearCache ( CommerceWarehouseItem commerceWarehouseItem ) { entityCache removeResult ( CommerceWarehouseItemModelImpl ENTITYCACHEENABLED, CommerceWarehouseItemImpl class, commerceWarehouseItem getPrimaryKey ( ) ) ; finderCache clearCache ( FINDERCLASSNAMELISTWITHINATION ) ; finderCache clearCache ( FINDERCLASSNAMELISTWITHOUTINATION ) ; clearUniqueFindersCache ( ( CommerceWarehouseItemModelImpl ) commerceWarehouseItem, ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String input, String output ) throws MPXJException, IOException { MPPReader reader = MPPReader ( ) ; mproject = reader read ( input ) ; varDataFileName ; projectDirName ; mppFileType = NumberHelper getInt ( mproject getProjectProperties ( ) getMppFileType ( ) ) ; ( mp ) 8 projectDirName = ; varData =FixDeferFix" ; ; } 9 projectDirName =" ; varData =VarData" ; ; } projectDirName =" ; varData =VarData" ; ; } projectDirName =" ; varData =VarData" ; ; } : throw new IllegalArgumentException ( "Unsupported file type " + mpp ) ; } } FileInputStream = FileInputStream ( input ) ; POIFSFileSystem fs = POIFSFileSystem ( ) ; is close ( ) ; DirectoryEntry root = fs getRoot ( ) ; mprojectDir = ( DirectoryEntry ) root getEntry ( projectDirName ) ; Map <, > replacements = HashMap <, > ( ) ; ( Task task m_project.Tasks ( ) ) mapText ( task getName ( ), replacements ) ; } processReplacements ( ( ( DirectoryEntry ) mprojectDir getEntry (TBkTask ) ), varDataFileName, replacements, ) ; replacements clear ( ) ; ( Resource resource m_project. getResources ( ) ) mapText ( resource getName ( ), replacements ) ; mapText ( resource getInitials ( ), replacements ) ; } processReplacements ( ( DirectoryEntry ) mprojectDir getEntry (TBkRsc ), varDataFileName, replacements, ) ; replacements clear ( ) ; ProjectProperties properties = mproject getProjectProperties ( ) ; mapText ( properties getProjectTitle ( ), replacements ) ; processReplacements ( mprojectDir,Props, replacements, ) ; replacements clear ( ) ; mapText ( properties getProjectTitle ( ), replacements ) ; mapText ( properties getSubject ( ), replacements ) ; mapText ( propertiesAuthor ( ) replacements ) ; mapText ( properties getKeywords ( ), replacements ) ; mapText ( propertiesComments ( ) replacements ) ; processReplacements ( root,SummaryInformation, replacements, ) ; replacements clear ( ) ; mapText ( properties getManager ( ), replacements ) ; mapText ( propertiesCompany ( ) replacements ) ; mapText ( properties getCategory ( ), replacements ) ; processReplacements ( root,DocumentSummaryInformation, replacements, ) ; FileOutputStream os = FileOutputStream ( output ) ; fs writeFilesystem ( os ) ; os flush ( ) ; os close ( ) ; fs close ( ) ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void setRollbackOnly ( ) { final = TraceComponent isAnyTracingEnabled ( ) ; if ( tc isEntryEnabled ( ) ) { Tr. entry ( tc,setRollbackOnly, this ) ; } LocalTransactionCoordinator lCoord = getLocalCoord ( ) ; if ( lCoord ) { lCoordRollbackOnly ( ) ; } { {ServiceRollbackOnly ( ) ; } ( e ) { ( e, CLASS_NAME +setRollbackOnly,6, this ) ; throw new IllegalStateException ( "No active transaction" ) ; } } if ( tc isEntryEnabled ( ) ) { Tr. exit ( tc,setRollbackOnly ) ; } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse404Response ( final String content ) { if ( content contains ( "\"reason\":missing\"" ) ) return true ; } (Design document found error, content ) ; return false ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private ListenableFuture <? > writeBlocksToTargets ( Collection < DBBPool. BBContainer > outputBuffers, int [ ] serialized ) { Preconditions checkArgument ( mtableTasks size ( ) serialized ) ; Preconditions checkArgument ( outputBuffers size ( ) serialized ) ; List < ListenableFuture <? > > writeFutures = < ListenableFuture <? > > ( outputBuffers size ( ) ) ; Iterator < DBBPool BBContainer > container = outputBuffers iterator ( ) ; serializedIndex = ; ( SnapshotTableTask task m_tableTasks ) DBBPool BBContainer container = containerIter ( ) ; ByteBuffer buf = container b ( ) ; buf limit ( serialized serializedIndex + task mtarget getHeaderSize ( ) ) ; buf position ( ) ; Callable < DBBPool BBContainer > valueForTarget = Callables returning ( container ) ; ( task mfilters ) ( SnapshotDataFilter filter task m_filters ) valueForTarget = filter filter ( valueForTarget ) ; } } ListenableFuture <? > writeFuture = task mtarget write ( valueForTarget mtableId ) ; ( writeFuture ) writeFutures add ( writeFuture ) ; } } return F. allAsList ( writeFutures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean isTerminal ( IAtom atom Map < IAtom Integer atomToIndex ) { return graph atomToIndex get ( atom ) ] length == ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler < AsyncResult < Void > > createUndeployHandler ( final Message < JsonObject > message ) { return new Handler < AsyncResult < Void > > ( ) { public void handle ( AsyncResult < Void > result ) { if ( result failed ( ) ) message reply ( JsonObject ( ) putString (statuserror ) putString (message, result cause ( ) getMessage ( ) ) ) ; } message reply ( JsonObject ( ) putString (status, ) ) ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public PhotoAllContext getAllContexts ( String photoId ) throws FlickrException { PhotoSetList < PhotoSet > setList = PhotoSetList < PhotoSet > ( ) ; PoolList < Pool > poolList = PoolList < Pool > ( ) ; PhotoAllContext allContext = PhotoAllContext ( ) ; Map <, Object > parameters = HashMap <, Object > ( ) ; parameters. put (method, METHOD_GET_ALL_CONTEXTS ) ; parameters. put (photo_id, photoId ) ; response = transport. get ( transport. getPath ( ), parameters,, shared ) ; if ( response isError ( ) ) { throw new FlickrException ( response. ( ), response. ( ) ) ; } Collection < Element > photosElement = response getPayloadCollection ( ) ; ( Element : photosElement ) if ( setElementTagName ( ) ( "set ) ) { PhotoSet pset = PhotoSet ( ) ; pset setTitle ( setElement getAttribute (title ) ) ; pset setSecret ( setElement getAttribute (secret ) ) ; pset setId ( setElement getAttribute (id ) ) ; pset setF ( setElement getAttribute (f ) ) ; pset setPrimary ( setElement getAttribute ( ) ) ; pset setServer ( setElement getAttribute (server ) ) ; pset setViewCount ( Integer ( setElement getAttribute (view_count ) ) ) ; pset setCommentCount ( Integer ( setElement getAttribute (comment_count ) ) ) ; pset setCountPhoto ( Integer ( setElement getAttribute (count_photo ) ) ) ; pset setCountVideo ( Integer ( setElement getAttribute (count_video ) ) ) ; setList. add ( pset ) ; allContext setPhotoSetList ( setList ) ; } if ( setElementTagName ( ) ( "pool ) ) { Pool pool = Pool ( ) ; pool setTitle ( setElement getAttribute (title ) ) ; pool setId ( setElement getAttribute (id ) ) ; pool setUrl ( setElement getAttribute (url ) ) ; pool setIconServer ( setElement getAttribute (iconserver ) ) ; pool setIconF ( setElement getAttribute (iconf ) ) ; pool setMemberCount ( Integer ( setElement getAttribute (members ) ) ) ; pool setPoolCount ( Integer ( setElement getAttribute (pool_count ) ) ) ; poolList. add ( pool ) ; allContext setPoolList ( poolList ) ; } } return allContext ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map < String, Object > getFieldData ( Map < String, Object > properties ) { Map <, Object > propReturn = ; if ( properties ) { propReturn = Hashtable <, Object > ( ) ; ( = ; ; ) strFieldNumber = DBParams FIELD + Integer toString ( i ) ; strFieldName = ( ) properties ( strFieldNumber ) ; if ( strFieldName ) ; Record record = this getMainRecord ( ) ; if ( strFieldName ( '.' ) ) { record = this getRecord ( strFieldName substring (, strFieldName indexOf ( '.' ) ) ) ; strFieldName = strFieldName substring ( strFieldName indexOf ( '.' ) + ) ; } BaseField field = ; if ( record ) field = record getField ( strFieldName ) ; if ( field ) propReturn put ( strFieldNumber, field getData ( ) ) ; } } return propReturn ; }<CODESPLIT>GetFieldData Method .
protected void connect ( InetAddress address int port ) throws SocketException { BlockGuard getThreadPolicy ( ) onNetwork ( ) ; connect ( address port ) ; connected = address ; connected = ; connected ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char getEscaped ( ) { pos ++ ; if ( pos == length ) { throw new IllegalStateException ( "Unexpected end of DN: " + dn ) ; } ( chars [ pos ] ) '"' '\\' ',' '=' '+' '<' '>' '#' ';' : case': case '*' : case '%' : case '_' : return chars [ pos ] ; default : return getUTF8 ( ) ; } }<CODESPLIT>returns escaped char
private static String cutOffValidationMatchersPrefix ( String expression ) { ( expression ( Citrus VALIDMATCH ) expression ( Citrus VALIDMATCHSUFFIX ) ) return expression substring ( Citrus. VALIDATION_MATCHER_PREFIX. length ( ), expression. length ( ) - Citrus. VALIDATION_MATCHER_SUFFIX. length ( ) ) ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public SortedSet < TypeElement > implementingClasses ( TypeElement typeElement ) { SortedSet < TypeElement > result = get ( implementingClasses, typeElement ) ; SortedSet < TypeElement > intf = allSubClasses ( typeElement, ) ; Iterator < TypeElement > subInterfaces = intfcs iterator ( ) ; ( sub ( ) ) Iterator < TypeElement > implementingClasses = implementingClasses ( subInterfaces ( ) ) iterator ( ) ; ( implementingClasses ( ) ) TypeElement c = implementingClasses ( ) ; ( result contains ( c ) ) result add ( c ) ; } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ( ValidationResult validation ) { correct validation correct ; ( validate ) return ; errors addAll ( validation errors ) ; warnings addAll ( validation warnings ) ; }<CODESPLIT>Adds a validation result to this .
public static String toMetaFieldInfoString ( Object obj ) { buf = ( 100 ) ; MetaFieldInfo fields = toMetaFieldInfoArray ( obj, null, ) ; ( i = ; i < fields. ; i ) MetaFieldInfo field = fields ; buf append ( field name ) ; buf append ( "=" ) ; if ( field actualValue field actualValue getClass ( ) ( String ) ) { buf append ( '"' ) ; buf. append ( field. value ) ; buf. append ( '"' ) ; } { buf. append ( field. value ) ; } if ( i + fields ) buf append ( "," ) ; } return buf. toString ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public String getArrayClassName ( Class < clazz ) { ( clazz isArray ( ) ) getArrayClassName ( clazz getComponentType ( ) ) + "[ ; } return clazz getName ( ) ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void addBlock ( Block block ) { ( isInitialized ( ) ) return ; } BlockScanInfo info blockMap ( block ) ; ( info ) (Adding already existing block + block ) ; delBlockInfo ( info ) ; } info BlockScanInfo ( block ) ; info lastScanTime getNewBlockScanTime ( ) ; addBlockInfo ( info ) ; adjustThrottler ( ) ; }<CODESPLIT>Adds block to list of blocks
public String getTile ( int x, int y ) { ( ( x getArrayWidth ( ) ) ( y getArray ( ) ) ( x ) ( y ) ) new IllegalArgumentException ( ) ; } return image [ x ] [ y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBPDslBuilder BitArray ( final String name, final String bitLenExpression, final String sizeExpression ) { Item item Item ( Bin BITARRAY name this byteOrder ) ; item bitExpression assertExpressionChars ( bitExpression ) ; itemExpression assertExpressionChars ( sizeExpression ) ; this addItem ( item ) ; return this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object indexOf ( String strPattern, String strInput, int offset, boolean caseSensitive, boolean matchAll ) throws MalformedPatternException { PatternMatcherInput input = PatternMatcherInput ( strInput ) ; Perl5Matcher = Perl5Matcher ( ) ; compileOptions = caseSensitive? : Perl5Compiler CASEINSENS ;Options Per5 SINGLELINEMASK ; if ( offset ) offset = ; Pattern pattern = getPattern ( strPattern, compileOptions ) ; if ( offset strInput ( ) ) input setCurrentOffset ( offset ) ; if ( offset strInput ( ) ) { Array matches = ArrayImpl ( ) ; ( contains ( input pattern ) ) match =Match ( ) beginOffset ( ) + ; if ( matchAll ) { return new Double ( match ) ; } matches appendEL ( match ) ; } if ( matches size ( ) ) { return matches ; } } return 0 ; }<CODESPLIT>return index of the first occurence of the pattern in input text
private Object checkRegisteredServicesByLdapFilter ( String filter ) throws InvalidSyntaxException { ServiceReference <? > references getBundleContext ( ) getServiceReferences ( ( String ), filter ) ; ( ( references ) ) return null ; } ( references ) return getBundleContext ( ). getService ( references [ 0 ] ) ; } new RuntimeException ( " services registered for filter " + filter ) ; }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void postEvent ( DEvent event ) { ( _tevent ) _tevent postEvent ( event ) ; } if ( _omgr ) _omgr postEvent ( event ) ; } ( "Dropping event for non- no longer managed object, "oid, getOid ( ), "class, getClass ( ) getName ( ), "event, event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static Identity createOverlayManagerGroup ( String name ) { return ExtendedIdentifiers createExtendedIdentifier ( IfmapStrings ICSMETADATANSURI, IfmapStrings ICSMETADATAPREFIX,overlaymanagergroup, name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static DoubleMatrix cholesky ( DoubleMatrix A ) { DoubleMatrix result = A dup ( ) ; info = NativeBlas dpotrf (U A rows result data A rows ) ; if ( info ) throw new LapArgumentException ( "DPRF", - info ) ; } if ( info ) throw new LapPosException ( "DPRF", "Minor " + info + " was negative Matrix must be positive definite." ) ; } clearLower ( result ) ; return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean isCaller ( final String className, final String methodName ) { final Throwable throwable = Throwable ( ) ; final StackTraceElement stackElements = throwable getStackTrace ( ) ; if ( stackElements ) { log ( Level WARN,Empty call stack ) ; return false ; } final matchAllMethod = "*" ( methodName ) ; ( = ; < stackElements ; ) if ( stackElements i getClassName ( ) ( className ) ) { return matchAllMethod? true : stackElements [ i ]. getMethodName ( ). equals ( methodName ) ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public InputStream setFlag ( String name String value ) throws IOException { executeCommand (setflag name value ) ; }<CODESPLIT>set JVM command line flag
public Q addFlag ( Position position, String prefix, Expression < > expr ) { Expression? flag = Expressions template ( expr getType ( ) prefix expr ) ; return queryMixin addFlag ( QueryFlag ( position, flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ConnectionInfo newConnectionInfo ( Channel c ) { SocketChannel channel = ( SocketChannel ) ; InetSocketAddress hostAddress channel localAddress ( ) ; InetSocketAddress remoteAddress getRemoteAddress ( channel ) ; scheme channel pipeline ( ) ( SslHandler )?https :http ; return new ConnectionInfo ( hostAddress, remoteAddress, scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDPDomain getPDPDomain ( String pdpDomainName ) throws IOException { SortedSet < > domainRanges ; ( serializedCache ) ( serializedCache ( pdpDomainName ) ) domain = serializedCache ( pdp ) ; } }RequestDomainRanges checkDomainRanges ( domainRanges ) ; ( shouldRequestDomainRanges ) URL u URL ( server +getPDPDomainpdpId + pdpDomainName ) ; ( "Fetching, u ) ; InputStream response = URLConnectionTools getInputStream ( u ) ; xml JFatCatClient convertStreamToString ( response ) ; domainRanges = XMLUtil getDomainRangesFromXML ( xml ) ; ( domainRanges ) cache ( pdpDomainName, domainRanges ) ; } } ( MalformedURLException e ) { error ( "Problem generating PDP request URL for " + pdDomainName, e ) ; new IllegalArgumentException ( "Invalid PDP name " + pdpDomainName, e ) ; } pdbId ; List < ResidueRange > ranges < ResidueRange > ( ) ; ( domainRange domainRanges ) SubstructureIdentifier strId SubstructureIdentifier ( domainRange ) ; ( pdbId ) pdbId = strucId getPdbId ( ) ; } ( pdbId ( strucId getPdbId ( ) ) ) new RuntimeException ( "Don't know to take union of domains from multiple PDB IDs." ) ; } ranges addAll ( strucId getResidueRanges ( ) ) ; } return new PDPDomain ( pdpDomainName, ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public Context getContext ( ) { ( searchView ) return searchView. getContext ( ) ; } ( supportView ) return supportView. getContext ( ) ; } new IllegalStateException ( ERRORNO_SEARCHVIEW ) ; }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean isMacroCycle ( IRing ring, IRingSet rs ) { if ( ring getAtomCount ( ) 8 ) return false ; ( IBond bond ring bonds ( ) ) found = ; ( IAtomContainer other rs atomContainers ( ) ) if ( ring other ) ; if ( other contains ( bond ) ) found = ; ; } } if ( found ) return ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T > T datastoreToJava ( Entity entity ) { ( entity ) return null ; } T ( T ) persistentClass newInstance ( ) ; populate ( entity, result ) ; return result ; } ( InstantiationException ) { new RuntimeException ( e ) ; } ( ) { new RuntimeException ( e ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void updateCacheState ( Map < String Object props ) { getAuthenticationConfig ( ) ; ( cache ) authCacheService activate ( cc ) ; } authCacheServiceRef deactivate ( cc ) ; } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static QuerySnapshot withChanges ( final Query query, Timestamp readTime, final DocumentSet documentSet, final List < DocumentChange documentChanges ) { return QuerySnapshot ( query, readTime ) List QueryDocumentSnapshot documents ; List < QueryDocumentSnapshot getDocuments ( ) { ( documents ) (Set ( documents ) documents document ( ) ; } } } return unmodifiableList ( documents ) ; } public List < DocumentChange getDocumentChanges ( ) { return unmodifiableList ( documentChanges ) ; } public int size ( ) { return documentSet size ( ) ; } public boolean equals ( Object o ) { ( this o ) return ; } ( o getClass ( ) o getClass ( ) ) return ; } QuerySnapshot = ( QuerySnapshot ) ; return Objects equals ( query, that query ) && Objects equals ( this size ( ), that size ( ) ) && Objects equals ( this getDocumentChanges ( ), that getDocumentChanges ( ) ) && Objects equals ( this getDocuments ( ), that getDocuments ( ) ) ; } public int hashCode ( ) { return Objects hash ( query, this getDocumentChanges ( ), this getDocuments ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean readSend ( InH3 hIn, OutboxAmp outbox, HeadersAmp headers ) throws IOException { MethodRefHamp methodHamp = ; { methodHamp = readMethod ( hIn ) ; } ( e ) { ( Level FINER, e ( ), e ) ; skipArgs ( hIn ) ; return true ; } MethodRefAmp method = methodHamp getMethod ( ) ; ClassLoader loader = methodHamp getClassLoader ( ) ; Thread thread = Thread currentThread ( ) ; thread setContextClassLoader ( loader ) ; Object args = readArgs ( methodHamp h ) ; if ( log ( _logLevel ) ) ( _logLevel, this + " send-r " + method getName ( ) +Args ( args ) + " {to + method + + headers + ) ; } SendMessageN sendMessage = SendMessageN ( outbox headers method serviceRef ( ) method method ( ) args ) ; timeout = 1000L ; { sendMessage offer ( timeout ) ; } ( e ) { fine ( e ( ) ) ; if ( log ( Level ) ) ( Level FINEST, e ( ), e ) ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private String getRemoteFileName ( UploadFile file ) { ( file getProperty ( PARAMREMOTEPATH ) endsWith ( "/" ) ) return file. getName ( service ) ; } ( file getProperty ( PARAMREMOTEPATH ) contains ( "/" ) ) file getProperty ( PARAMREMOTEPATH ) split ( "/" ) ; return tmp [ tmp. length - 1 ] ; } return file. getProperty ( PARAM_REMOTE_PATH ) ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initializeBufferMetrics ( Task task ) { MetricGroup buffers = addGroup (buffers ) ; buffers gauge (inputQueueLength InputBuffersGauge ( task ) ) ; buffers gauge (outputQueueLength OutputBuffersGauge ( task ) ) ; buffers gauge (inPoolUsage, InputBufferPoolUsageGauge ( task ) ) ; buffers gauge (outPoolUsage, OutputBufferPoolUsageGauge ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void doubleClick ( String fileName ) throws QTasteException { Region ( this rect )Click ( fileName ) ; } ( ) { throw new QTasteException ( ex ( ), ex ) ; } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void setDestinationSSECustomerKey ( SSECustomerKey sseKey ) { ( sseKey this sseAwsKeyManagementParams ) new IllegalArgumentException ( "Either SSECustomerKey SSEAwsKeyManagementParams set at same time." ) ; } this destinationSSECustomerKey = sseKey ; }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void onFailure ( Throwable t ) { Toast makeText ( this t ( ) LENGTHLONG ) show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paintDropLines ( SeaGlassContext context, Graphics g ) { JTable DropLocation loc = table getDropLocation ( ) ; if ( loc ) { return ; } Color color = ( Color ) style get ( contextTabledropLineColor ) ; Color shortColor = ( Color ) style get ( contextTabledropLineShortColor ) ; if ( color shortColor ) { return ; } Rectangle rect ; rect = getHDropLineRect ( loc ) ; if ( rect ) { x = rect x ; w = rect width ; if ( color ) { extendRect ( rect, ) ; g setColor ( color ) ; g fillRect ( rect x, rect y, rect width, rect height ) ; } if ( locInsertColumn ( ) shortColor ) { g setColor ( shortColor ) ; g fillRect ( x, rect y, w, rect height ) ; } } rect = getVDropLineRect ( loc ) ; if ( rect ) { y = rect y ; h = rect height ; if ( color ) { extendRect ( rect, ) ; g setColor ( color ) ; g fillRect ( rect x, rect y, rect width, rect height ) ; } if ( locInsertRow ( ) shortColor ) { g setColor ( shortColor ) ; g fillRect ( rect x, y, rect width, h ) ; } } }<CODESPLIT>Paint the drop lines if any .
public DatalogProgram createDatalog ( SWRLRule rule ) { rule accept ( this ) ; (Supported ) (Not Supported Translation of + errors ) ; errors clear ( ) ; } DatalogProgram dp datalog getDatalogProgram ( ) ; dpRule ( facts ) ; return dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflateAuthnRequest ( final byte [ ] decodedBytes ) { val infl Compression inflate ( decoded ) ; ( ( infl ) ) return inflated ; } return CompressionUtils. decodeByteArrayToString ( decodedBytes ) ; }<CODESPLIT>Inflate authn request string .
public static FrameworkProjectConfig create ( final String name, final File propertyFile, final Properties properties, final IFilesystemFramework filesystemFramework ) { ( property ( ) ) generateProjectProperties ( name property properties ) ; } return create ( name, propertyFile, filesystemFramework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clearLogContext ( ) { LogContext embeddedLogContext = Holder LOGCONTEXT ; Configurator configurator = embeddedLogContext getLogger ( ) detach ( Configurator ATTACHMENTKEY ) ; if ( configurator PropertyConfigurator ) { LogContextConfiguration logContextConfiguration = ( ( PropertyConfigurator ) configurator ) getLogContextConfiguration ( ) ; clearLogContext ( logContextConfiguration ) ; } if ( configurator LogContextConfiguration ) { clearLogContext ( ( LogContextConfiguration ) configurator ) ; } { List < > loggerNames = Collections list ( embeddedLogContext getLoggerNames ( ) ) ; ( name loggerNames ) Logger logger = embeddedLogContext getLoggerIfExists ( name ) ; if ( ) { Handler handlers = logger clearHandlers ( ) ; if ( handlers ) { ( Handler handler handlers ) handler close ( ) ; } } setFilter ( null ) ; setUseParentFilters ( false ) ; setUseParentHandlers ( ) ; setLevel ( Level INFO ) ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public RestApiResponse execute ( long timeout TimeUnit ) { Blocking blockForSingle ( delegate execute ( ) timeout timeUnit ) ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public InputStream getInputStream ( HttpServletRequest request, MutableObject < byte [ ] > sourceMapResult ) throws IOException { byte bytes = this bytes ; byte sourceMap = this sourceMap ; filename = this filename ; InputStream result = ; if ( bytes ) result = ( bytes ) ; if ( sourceMapResult sourceMapSize ) sourceMapResult setValue ( sourceMap ) ; } } if ( filename ) ICacheManager cmgr = ( ( IAggregator ) request getAttribute ( IAggregator AGGREGATORREQATTRNAME ) ) getCacheManager ( ) ; File file = File ( cmgr getCacheDir ( ) filename ) ; if ( sourceMapSize ) result = FileInputStream ( file ) ; } CacheData data ; ObjectInputStream = ObjectInputStream ( FileInputStream ( file ) ) ; { data = ( CacheData ) is readObject ( ) ; } ( ClassNotFoundException e ) { throw new IOException ( e. getMessage ( ), e ) ; } { IOUtils closeQuietly ( is ) ; } bytes = data bytes ; sourceMap = data sourceMap ; if ( sourceMapResult ) sourceMapResult setValue ( sourceMap ) ; } result = ( bytes ) ; } } throw new IOException ( ) ; } return result ; }<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void cacheIncludeAndIgnore ( WebElement table ) { (IgnoreByMatches ( ) )IgnoreByMatches ( < WebElement > ( ) ) ; ( ByIgnoreRowsMatching ( ) ) getIgnoreByMatches ( ) addAll ( table findElements ( by ) ) ; } } if ( getIncludeByMatches ( ) )IncludeByMatches ( < WebElement > ( ) ) ; ( By getIncludeOnlyRowsMatching ( ) ) getIncludeByMatches ( ) addAll ( table findElements ( by ) ) ; } } }<CODESPLIT>Does the table comparison
public < E List < InlineDiffChunk < E > > inline ( List < E > previous, List < E > next ) { setError ( ) ; return this inlineDiffDisplayer display ( this diffManager diff ( previous, next, ) ) ; } Diff ) setError ( ) ; return ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static CompletableFuture < MessageSet > getMessagesAroundUntil ( TextChannel channel, Predicate < Message > condition, long around ) { CompletableFuture < MessageSet > future CompletableFuture < > ( ) ; channel getApi ( )ThreadPool ( )ExecutorService ( ) submit ( ( ) < Message > messages < > ( ) ; Optional < Message untilMessage getMessagesAroundAsStream ( channel, around ) peek ( messages :: add ) filter ( condition ) findFirst ( ) ; future complete ( MessageSetImpl ( untilMessage map ( message messages ) ( ( ) ) ) ) ; } ( t ) { future completeExceptionally ( t ) ; } } ) ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean findSipApplicationAnnotation ( InputStream stream ) { { byte rawClassBytes ; rawClassBytes = byte stream available ( ) ; stream read ( rawClassBytes ) ; one = contains ( rawClassBytes SIPAPPLICATIONBYTES ) ; two = contains ( rawClassBytes ANNOTATIONBYTES ) ; ( one two ) return ; } ( e ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map < String, Object > buildJobDataMap ( final JmxCommand jmxCommand, final Object [ ] params ) throws MBeanException { Map < Object > job = HashMap <, Object > ( ) ; { ind = ; ( JmxOption option JmxOptions getOptions ( ) ) option process ( jobDataMap, String valueOf ( params ind ) ) ; } ( Argument arg this remoteProgram getArguments ( ) ) arg setValueUsingParser ( String valueOf ( params ind ) ) ; } } ( e ) { throw new MBeanException ( e ) ; } return jobDataMap ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void V ( StringBuilder buf ) { Token t = getNextToken ( ) ; ( t tokenType TokenType VALUE ) throw new IllegalStateException ( "Unexpected token " + t ) ; } buf ( t getValue ( ) ) ; t = getNextToken ( ) ; ( t tokenType TokenType EOL ) return ; } if ( t tokenType TokenType TRAILINGBACKSLASH ) Vopt ( buf ) ; } }<CODESPLIT>Vopt = EOL V
public void addHeader ( final String sName final String sValue ) { ( sValue )addHeader ( sName sValue ) ; }<CODESPLIT>Add the passed header as is .
public static N Number Number max ( List N numberList ) { cal ( numberList DoubleStream :: max ) ; }<CODESPLIT>Max number .
public int getChaincodeActionResponseStatus ( ) throws InvalidArgumentException { ( statusReturnCode ) return statusReturnCode ; } ProposalResponsePayloadDeserializer proposalResponsePayloadDeserializer getProposalResponsePayloadDeserializer ( ) ; statusReturnCode proposalResponsePayloadDeserializer getExtension ( ) getResponseStatus ( ) ; return statusReturnCode ; } ( ) { e ; } ( ) { new InvalidArgumentException ( e ) ; } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Queue < Pair < Env < AttrContext JCClassDecl queue ) { generate ( queue ) ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static EnhancedMimeType create ( final String primary, final String sub, final Charset encoding, final String version, final Map < String, String > parameters ) { return EnhancedMimeType ( primary, sub, encoding, version, parameters ) ; } MimeType ) new ( create versioned mime type + primary + + sub, ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static long toLongWithDefault ( Object value, long defaultValue ) {NullableLong ( value ) ; return? ( long ) : defaultValue ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void setIsolation ( String iso ) throws JspTagException { if ( TRANSACTIONREADCOMMITTED ( iso ) ) { isolation = Connection TRANSACTIONREADCOMMIT ; } if ( TRANSACTIONREADUNCOMMITTED ( iso ) ) { isolation = Connection. TRANSACTIONREADUNCOMMIT ; } if ( TRANSACTIONREPEATABLEREAD ( iso ) ) { isolation = Connection. TRANSACTIONREPEATABLEREAD ; } if ( TRANSACTIONSERIALIZABLE ( iso ) ) { isolation = Connection. TRANSACTIONSERABLE ; } { throw new JspTagException ( Resources. getMessage ( "TRANSACTION_INVALID_ISOL" ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node root ) { initTraversal ( root ) ;Node = root ; pushScope ( root ) ; traverseBranch ( root, ) ; popScope ( ) ; } ( | )Exception ( unexpectedException ) ; } }<CODESPLIT>Traverses a parse tree recursively .
public CollectionRequest < Tag > findByWorkspace ( String workspace ) { path format ( "/workspaces/%tags workspace ) ; return new CollectionRequest < Tag > ( this, Tag., path,GET ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule CriteriaOnlyFindQuery ( ) { Sequence ( peek ( )CliQuery ( ) JsonParameter ( JsonObject ( ) ) peek ( )Operation ( Operation FIND ) peek ( )Criteria ( match ( ) ) ) ; }<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlinkLast ( Node < E > l ) { E element = l item ; final Node < E > prev = l prev ; l item = ; l prev = ; last = prev ; if ( prev ) first = ; prev next = ; size ; modCount ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void setupSimpleSecurityProperties ( Hashtable < String, Object > env, String userDn, char [ ] pwd ) { env put ( Context SECURITYAUTHENTIC,simple ) ; env put ( Context SECURITYPRINCIPAL, userDn ) ; env put ( Context SECURITYCREDENTIALS ( ) ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team createTeam ( String name String tag ) { client sendRpcWait ( SERVICEcreateTeam, name, tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void checkFilePattern ( String s ) throws ProblemException { Pattern p = ; if ( File separatorChar '\\' ) p = Pattern compile ( "\\+" ) ; } if ( File separatorChar '/' ) { p = Pattern compile ( "\\+" ) ; } { throw new ProblemException ( "This platform uses the unsupported " + File. separatorChar + " as file separator character Please add support for!" ) ; } m = p ( s ) ; if ( m matches ( ) ) { throw new ProblemException ( "The string \"" + s + not a proper file name." ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ( ) throws Exception { ( < TransactionType ShardingTransactionManager > transactionManagerMap. ( ) ) entry getValue ( ) close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String getBar ( long percentage ) { = new ( ) ;. append ( percentage ) ;. append ( "% [" ) ; ( i = ; i < 100 ; i ) if ( percentage 100 i < percentage 1 ) {. append ( "=" ) ; } if ( i percentage 1 ) {. append ( ">" ) ; } {. append ( " ) ; } }. append ( " ) ; return sb. toString ( ) ; }<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T element, List < T > result ) { Set < T > dependencies blockedBy ( element ) ; ( dependencies ) ( T dependency dependencies ) resolve ( dependency, ) ; } blockedBy remove ( element ) ; add ( element ) ; } }<CODESPLIT>Resolves an element .
public B camundaOut ( String source, String target ) { Camunda param modelInstance ( CamundaOut ) ; setCundSource ( source ) ; setCundTarget ( target ) ; addExtensionElement ( param ) ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
Node createArgumentsReference ( ) { Node result = IR name (arguments ) ; (AddingTypes ( ) ) resultJSType ( argumentsTypeSupplier ( ) ) ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date toDate ( String dateString ) { Date date = ; DateFormat = SimpleDateFormat (yyyy--dd ) ; { date = df parse ( dateString ) ; } ( ParseException ) { System println ( ex fillInStackTrace ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public cusolverRfSetNumericProperties ( cusolverRfHandle handle double zero double boost checkResult ( cusolverRSetNumericPropertiesNative ( handle zero boost ) ) ; }<CODESPLIT>CUSOLVERRF set and get numeric properties
public Object quoteIfString ( Object obj ) obj? quote ( ( ) obj ) : obj ; }<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred < Object > deleteUidAsync ( final String type, final String name ) { final UniqueIdType uidtype = UniqueId. stringToUniqueIdType ( type ) ; ( uidtype ) MET metrics deleteAsync ( name ) ; TAGK tagnames deleteAsync ( name ) ; TAGV tagvalues deleteAsync ( name ) ; default : throw new IllegalArgumentException (Unrecognized UID type + uid_type ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scrollDownList ( int index ) { ( commandLogging ) d ( config commandLoggingTagscrollDownList + index + ) ; } return scroller scrollList ( waiter. waitForAndGetView ( index, ListView. ), Scroller. DOWN, ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void makeAnnotationTypeElementDoc ( MethodSymbol meth, TreePath treePath ) { AnnotationTypeElementDocImpl result = ( AnnotationTypeElementDocImpl ) methodMap ( meth ) ; ( ) ( treePath ) setTreePath ( treePath ) ; } result AnnotationTypeElementDocImpl ( this meth treePath ) ; methodMap put ( meth, ) ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object call ( String method Object... arguments ) throws PickleException PyroException IOException { internalcall ( method,,,, arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String formatAsPercentage ( int value, int total ) { average? :F value total ; return PERCENT_FORMATTER. format ( average ) ; }<CODESPLIT>Returns value converted to percentage format .
public static < T Geometry JTSGeometryExpression < T translate ( Expression < T expr float del float deltay ) { geometryOperation ( expr getType ( ), SpatialOps TRAN, expr, ConstantImpl create ( deltax ), ConstantImpl create ( delay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static byte [ ] requestWebContent ( String url ) throws TVRageException { HttpGet httpGet HttpGet ( url ) ; httpGet addHeader (accept,applicationxml ) ; DigestedResponse response DigestedResponseReader requestContent ( httpClient httpGet CHARSET ) ; ( response ( ) 500 ) new TVRageException ( ApiExceptionType HTTP_3_, url ) ; } ( response ( ) ) throw new TVRageException ( ApiExceptionType HTTP__, url ) ; } return response. getContent ( ). getBytes ( DEFAULT_CHARSET ) ; } ( IOException ) { throw new TVRageException ( ApiExceptionType MAPPING_FAILED, UNABLE_TO_PARSE, url, ex ) ; } }<CODESPLIT>Get content from URL in byte array
private static boolean isNumeric ( String value ) { ( char c value toCharArray ( ) ) ( Character isDigit ( ) ) return false ; } } return true ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
@ RequestMapping ( method = GET, value = "/foo" ) public Map < String, String > getFoo ( ) { Map < >Obj = < > ( ) ;Obj put (foo,bar ) ; return fooObj ; }<CODESPLIT>Controller to just support pinging .
protected static void fireArrayStartEvent ( JsonConfig jsonConfig ) { ( jsonConfig isEventTriggeringEnabled ( ) ) ( Iterator listeners jsonConfig getJsonEventListeners ( ) ( ) ; listeners ( ) ; ) JsonEventListener listener = ( JsonEventListener ) listeners ( ) ; listener onArrayStart ( ) ; } ( RuntimeException e ) { warn ( e ) ; } } } }<CODESPLIT>Fires a start of array event .
public static < E Exception > Runnable sneaked ( SneakyRunnable < E > runnable ) { return ( ) -> ( ) SneakyRunnable RuntimeException castedRunnable = ( SneakyRunnable RuntimeException ) ; castedRunnable run ( ) ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( final BandwidthClient client, final String id, final Map < String, Object > params ) throws AppPlatformException, ParseException, IOException, Exception { assert ( client id ) ; domainsUri client getUserResourceInstanceUri ( BandwidthConstants DOMAINSURIPATH id ) ; RestResponse response client post ( domainsUri params ) ; JSONObject jsonObject toJSONObject ( client ( domainsUri ) ) ; return new Domain ( client, jsonObject ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream < String > getResourceTypes ( final Event event ) { if ( event org modeshape jcr api observation Event ) { { modeshape jcr api observation Event modeEvent = ( modeshape jcr api observation Event ) event ; Stream Builder < NodeType > types = Stream ( ) ; ( final NodeType type modeEvent getMixinNodeTypes ( ) ) types add ( type ) ; } types add ( modeEvent getPrimaryNodeType ( ) ) ; return types. build ( ). map ( NodeType :: getName ) ; } ( final RepositoryException e ) { throw new RepositoryRuntimeException ( e ) ; } } return empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void processDefaultHeader ( ParserContext context ) { ( line context getFileLines ( ) ) ( hasHeaderSeparator ( ) ) ; } processHeaderLine ( line context getDocumentModel ( ) ) ; } }<CODESPLIT>Process the header of the file .
public Connection getConnection ( String url String username, String password ) throws SQLException { aliveConnectionAlive ( ) ; ( alive ) createConnection ( url username password ) ; } return connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static final StringBuilder renderPad ( final StringBuilder builder, final int pad, final boolean newLine ) { renderNewLine (, ) ; ( = ; < pad ; ) append ('' ) ; } return builder ; }<CODESPLIT>Render some leading spaces onto a line of html .
public OvhAsyncTaskArray < OvhLine > eligibility_lines_active_POST ( OvhCity city, String contactName, OvhStreet street, String streetNumber ) throws IOException { qPath = "/xdsleligibilitylinesactive ; StringBuilder = path ( qPath ) ; < Object > o = HashMap < Object > ( ) ; ( o,city, city ) ; ( o,contactName, contactName ) ; ( o,street, street ) ; ( o,streetNumber, streetNumber ) ; resp = exec ( qPathPOST toString ( ) o ) ; return convertTo ( resp, t5 ) ; }<CODESPLIT>Get the active lines at given address
private static String evaluateExpressionStack ( final Deque < String > operators, final Deque < String > values ) { ( operators ( values push (Result ( operators pop ( ) values pop ( ) values pop ( ) ) ) ; } return replaceIntegerStringByBooleanRepresentation ( values pop ( ) ) ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public int write ( byte [ ] buffer, int offset, int length, boolean isEnd ) throws IOException { result ; requestExpireTime = _requestExpireTime ; if ( requestExpireTime requestExpireTime CurrentTime currentTime ( ) ) close ( ) ; throw new ClientDisconnectException ( L. l ( request write exp, addressRemote ( ), CurrentTime currentTime ( ) requestExpireTime ) ) ; } synchronized ( _writeLock ) { now = CurrentTime getCurrentTimeActual ( ) ; expires = _socketTimeout + now ; result = writeNative ( _socketFd, buffer, offset, ) ; } ( result JStream TIMEOUTEXN Current getCurrent ( ) expires ) ; } if (End ) closeWrite ( ) ; } return result ; }<CODESPLIT>Writes to the socket .
public void setAmbientLight ( float r, float g, float b ) { ambient =, g, b, 255 } ; normalize ( ambient ) ; gl glEnable ( GL GL_LIGHTING ) ; gl glEnable ( GL GL_LIGHT ) ; gl glLightfv ( GL GL_LIGHT, GL GL_AMENT, ambient, ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
BigInteger setMultiChoiceCount ( ) { if ( fields ) for ( int i = ; i fields ; i ) multiChoiceCount = multiChoiceCount multiply ( fields i setMultiChoiceCount ( ) ) ; return multiChoiceCount ;<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete ( boolean forceDelete ) throws APIException { client delete ( getUrl ( ) +force + forceDelete ) ; HttpClientHelpersIfNotOk ( ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void addNameToApplicationMap ( String name ) { appName = getApplicationName ( ) ; ( appName ) return ; ConcurrentLinkedQueue < > list = applicationMap ( appName ) ; ( list ) ConcurrentLinkedQueue < > newList = ConcurrentLinkedQueue < > ( ) ; list = applicationMap putIfAbsent ( appName, newList ) ; ( list ) list = ; } list add ( name ) ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static Envelope getTableEnvelope ( Connection connection, TableLocation location, String geometryField ) throws SQLException { ( geometryField geometryField ( ) ) List < > geometryFields getGeometryFields ( connection location ) ; ( geometryFields ( ) ) throw new SQLException ( "The table " + location + " contain a Geometry field then extent " + "cannot computed" ) ; } geometryField = geometryFields ( ) ; } ResultSet = connection ( ) executeQuery (SELECT STExtent(" + TableLocation quoteIdentifier ( geometryField ) + ext FROM + location ) ; ( next ( ) ) return ( ( Geometry ) rs. getObject ( 1 ) ). getEnvelopeInternal ( ) ; } throw new SQLException ( "Unable to get table extent may empty" ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void doListGet ( final Message < JsonObject > message ) { final name = message body ( ) getString (name ) ; if ( name ) { message reply ( JsonObject ( ) putString (status,error ) putString (message,No name specified." ) ) ; return ; } final Integer index = message body ( ) getInteger (index ) ; if ( index ) { message reply ( new JsonObject ( ) putString (status,error ) putString (message,No index specified." ) ) ; return ; } context. execute ( new Action < Object > ( ) { public Object perform ( ) { return data. getList ( formatKey ( name ) ). get ( index ) ; } }, new Handler < AsyncResult < Object > > ( ) { public void handle ( AsyncResult < Object > result ) { if ( result failed ( ) ) { message reply ( new JsonObject ( ) putString (status,error ) putString (message, result cause ( ) getMessage ( ) ) ) ; } { message reply ( new JsonObject ( ) putString (status, ) putValue (result, result result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static PlotCanvas plot ( String id, double [ ] data ) { Histogram histogram = new Histogram ( data ) ; histogram. setID ( id ) ; double lowerBound = Math. min ( data ), } ; double upperBound = Math. max ( data ), } ; double freq = histogram. getHistogram ( ) ; ( i = ; i < freq. ; i ) if ( freq i 1 > upperBound 1 ] ) { upperBound = freq ; } } PlotCanvas canvas = new PlotCanvas ( lowerBound, upperBound ) ; canvas. getAxis ( ). setGridVisible ( ) ; canvas. add ( histogram ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static Pair < List < Tuple >, List < Tuple > > splitData ( final List < Tuple > trainingData, double proportion ) { if ( proportion proportion ) { throw new RuntimeException ( "Proportion should between 00 - 10" ) ; } if ( proportion.5 ) { proportion = proportion ; } List < Tuple > smallList = < > ( ) ; List < Tuple > largeList = < > ( ) ; smallListSize = ( ) floor ( proportion trainingData size ( ) ) ; ct = ; Set < Integer > indices = HashSet < > ( ) ; ( ct smallListSize trainingData size ( ) indices size ( ) ) index = ( ) ( random ( ) ( trainingData size ( ) ) ) ; ( indices contains ( index ) ) index = ( int ) ( random ( ) ( trainingData size ( ) ) ) ; } indices add ( index ) ; ; } smallList addAll ( indices stream ( ). map ( trainingData :: get ). collect ( Collectors. toList ( ) ) ) ; IntStream range ( trainingData size ( ) ) filter ( x -> indices ( x ) ) forEach ( -> largeList add ( trainingData get ( ) ) ) ; return new ImmutablePair < > ( smallList, largeList ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void getScreenShotABGR ( ByteBuffer bgraBuf, BufferedImage out ) { WritableRaster wr = out. getRaster ( ) ; DataBufferByte db = ( DataBufferByte ) wr. getDataBuffer ( ) ; byte cpuArray = db. getData ( ) ; bgraBuf. clear ( ) ; bBuf. get ( cpuArray ) ; bgraBuf. clear ( ) ; width =. getWidth ( ) ; height =. getHeight ( ) ; ( = ; < height / 2 ; ) { for ( x = ; x < width ; x ) { inPtr = ( y width + x ) 4 ; outPtr = ( ( height - y - 1 ) width + x ) 4 ; byte b = cpuArray inPtr + ; byte g = cpuArray inPtr + 1 ; byte r = cpuArray inPtr + 2 ; byte a = cpuArray inPtr + 3 ; byte b = cpuArray outPtr + ; byte g = cpuArray outPtr + 1 ; byte r = cpuArray outPtr + 2 ; byte a = cpuArray outPtr + 3 ; cpuArray outPtr + = a ; cpuArray outPtr + 1 = b ; cpuArray outPtr + 2 = g ; cpuArray outPtr + 3 = r ; cpuArray inPtr + = a ; cpuArray inPtr + 1 = b ; cpuArray inPtr + 2 = g ; cpuArray inPtr + 3 = r ; } } }<CODESPLIT>Good format for java swing .
public Pair < int [ ] [ ] [ ], int [ ] > documentToDataAndLabels ( List < IN > document ) { docSize = document. size ( ) ; data = new docSize windowSize ; labels = new docSize ; if ( flags useReverse ) { Collections. reverse ( document ) ; } ( = ; < docSize ; ) CRFDatum < List < String >, CRFLabel > d = makeDatum ( document, j, featureFactory ) ; List < List < String > > features = d. asFeatures ( ) ; ( k =, fSize = features. size ( ) ; k < fSize ; k ) Collection < String > cliqueFeatures = features. get ( k ) ; data j k = new cliqueFeatures. size ( ) ; m = ; ( String feature : cliqueFeatures ) index = featureIndex. indexOf ( feature ) ; if ( index >= ) { data j k m = index ; m ; } else { } } if ( m < data j ] k ] length ) { f = new m ; System. arraycopy ( data j k,, f,, m ) ; data j k = f ; } } IN wi = document. get ( ) ; labels [ ] = classIndex. ( wi. get ( AnswerAnnotation. class ) ) ; } if ( flags useReverse ) { Collections. reverse ( document ) ; } return new Pair < int [ ] [ ] [ ], int [ ] > ( data, labels ) ; }<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List < Class <? > > locateAll ( final String serviceName ) { ( serviceName ) throw new IllegalArgumentException ( "serviceName cannot null" ) ; } List < Class <? > > classes = < Class <? > > ( ) ; ( factories ) List < Callable < Class <? > > > l = factories ( serviceName ) ; ( l ) ( Callable < Class < > > c ) { classes add ( c call ( ) ) ; } ( e ) { } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decodeCString ( ByteBuf buffer ) throws IOException { = buffer bytesBefore ( BsonConstants STRINGTERMINATION ) ; if ( ) throw new IOException (string termination not found ) ; result = buffer toString ( buffer readerIndex ( ),, StandardCharsets UTF8 ) ; buffer. skipBytes ( length + ) ; return result ; }<CODESPLIT>default visibility for unit test
public void addCase ( JMFType theCase ) { if ( theCase ) throw new NullPointerException ( "Variant case cannot be ) ; JSType newCase = ( JSType ) theCase ; if ( cases ) cases = new JSType 1 ; { JSType oldCases = cases ; cases = JSTypeCases length + ; System. arraycopy ( oldCases,, cases,, oldCases. length ) ; } newCase parent = this ; newCase. siblingPosition = cases. length ; casesCase siblingPosition =Case ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarizeState ( ) { buf = ( ) ; buf append (clipVol ) append ( _clipVol ) ; buf append ( ", disabled ) ; = ; ( SoundType soundType _disabledTypes ) if ( ii ) { buf. append ( ", ) ; } buf. append ( soundType ) ; } return buf. append ( "]" ). toString ( ) ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map < String, String > getCustomMap ( Pattern keyPattern ) { Map <, > map = HashMap < > ( ) ; ( Iterator < Object > = props keySet ( ) iterator ( ) ; ( ) ; ) key = ( ) it next ( ) ; = keyPattern ( key ) ; if ( matcher matches ( ) ) { id = group ( 2 ) ; propertyValue = props getProperty ( key ) ; map put ( id, propertyValue ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public static long rawUncompress ( long inputAddr long inputSize long destAddr ) { impl rawUncompress ( inputAddr inputSize destAddr ) ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( byte [ ] b, int off, int len ) { this checkIncreaseArray ( len ) ; System ( b off this buffer this pos len ) ; this pos len ; }<CODESPLIT>Writes a byte array content into the stream
public final Operation patchHealthCheck ( ProjectGlobalHealthCheckName healthCheck HealthCheck healthCheckResource, List < String fieldMask ) { PatchHealthCheckHttpRequest request PatchHealthCheckHttpRequest newBuilder ( )HealthCheck ( healthCheck : healthCheck ( ) )HealthCheckResource ( healthCheckResource )FieldMask ( fieldMask ) ( ) ; return patchHealthCheck ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initializeNoxItemMargin ( TypedArray attributes ) { noxItemMarginDefaultValue getResources ( ) getDimension ( R dimennoxitemmargin ) ; noxItemMargin = attributes getDimension ( R styleable noxitemmargin noxItemMarginDefaultValue ) ; noxConfigNoxItemMargin ( noxItemMargin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static OperationResult failed ( long index long eventIndex Throwable error ) { OperationResult ( index eventIndex error, ) ; }<CODESPLIT>Returns a failed operation result .
public static InsnList ifIntegersEqual ( InsnList lhs, InsnList rhs, InsnList action ) { Validate notNull ( lhs ) ; Validate notNull ( rhs ) ; Validate notNull ( action ) ; InsnList InsnList ( ) ; LabelNodeEqualLabelNode LabelNode ( ) ; add ( lhs ) ; add ( rhs ) ; add ( JumpInsnNode ( Opcodes IFMPNEEqualLabelNode ) ) ; add ( action ) ; add (EqualLabelNode ) ; return ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static FormatOptions of ( int flags, int width, int precision ) { ( checkFlagConsistency ( flags, width UNSET ) ) throw new IllegalArgumentException ( "invalid flags 0x" + Integer. ( flags ) ) ; } ( ( width width MAXALLOWEDWIDTH ) width UNSET ) throw new IllegalArgumentException ( "invalid width " + width ) ; } if ( ( precision precision MAXALLOWEDPRE ) precision UNSET ) throw new IllegalArgumentException ( "invalid precision " + precision ) ; } return new FormatOptions ( flags, width, precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void tripleClick ( Coordinates where ) { Point p getPoint ( wheretriple click ) ; exec mouseAction ( p x p y,, OperaMouseKeys LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initializeNoxItemPlaceholder ( TypedArray attributes ) { Drawable placeholder = attributes getDrawable ( R styleable noxitemplaceholder ) ; ( placeholder ) placeholder = getContext ( ) getResources ( ) getDrawable ( R drawable icnox ) ; } noxConfigPlaceholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void pruneInvalidOptional ( DependencyExplorerOutput output, InvalidKeys invalidKeys ) { DependencyGraph GraphPruner prunedGraph DependencyGraph GraphPruner ( output getGraph ( ) ) ; ( Key key invalidKeysInvalidOptionalKeys ( ) ) prunedGraph remove ( key ) ; output removeBinding ( key ) ; }Graph ( prunedGraph update ( ) ) ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private PersistentResourceXMLDescription getSimpleMapperParser ( ) { if ( version ( Version VERSION ) ) { return simpleMapperParser_1_0 ; } if ( version ( Version VERSION1 ) ) { return simpleMapperParser_1_1 ; } return simpleMapperParser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String getAbsoluteTemplateURI ( String templateName, boolean includeExtension ) { FastStringWriter buf = FastStringWriter ( ) ; = templateName substring (, templateName ( ) ) ; if ( ( SLASH ) ) { buf append ( SLASH ) ; i = ( SLASH ) ; buf append ( tmp substring (, i ) ) ; buf append ( SLASHUNDR ) ; buf append ( tmp substring ( i +, tmp length ( ) ) ) ; } { buf append ( SLASHUNDR ) ; buf append ( templateName substring (, templateName length ( ) ) ) ; } if ( includeExtension ) { buf append ( EXTENSION ) ; } uri = buf toString ( ) ; buf close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scanResourcePaths ( String startPath ) throws IOException, SAXException { Set < String > dirList = context getResourcePaths ( startPath ) ; if ( dirList ) ( path dirList ) if ( path startsWith ( "/WEBINFclasses ) ) } if ( path startsWith ( "/WEBINFlib ) ) } if ( path endsWith ( "/" ) ) scanResourcePaths ( path ) ; } if ( path startsWith ( "/WEBINFtags ) ) if ( path endsWith ( "/implicit.tld ) ) parseTld ( path ) ; } } if ( path endsWith ( TLDEXT ) ) { parseTld ( path ) ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected boolean duringDrag ( SVGPoint startPoint SVGPoint dragPoint Event evt boolean inside ) { ( listener ) listener duringDrag ( startPoint, dragPoint, evt, inside ) ; } ; }<CODESPLIT>Method called during drags .
private PGPKeyRingGenerator createKeyRingGenerator ( String userId, String password, int keySize ) { trace (createKeyRingGeneratorString String int ) ; trace (User ID Password Key Size, userId, password?not set :********, keySize ) ; PGPKeyRingGenerator generator = ; { LOGGER debug (Creating RSA key pair generator ) ; RSAKeyPairGenerator generator = RSAKeyPairGenerator ( ) ; generator init ( RSAKeyGenerationParameters ( BigInteger valueOf (x100 ), getSecureRandom ( ), keySize, 12 ) ) ; LOGGER debug (Generating Signing Key Pair ) ; BcPGPKeyPair signingKeyPair = BcPGPKeyPair ( PGPPublicKey RSASIGN, generator generateKeyPair ( ), Date ( ) ) ; LOGGER debug (Generating Encyption Key Pair ) ; BcPGPKeyPair encryptionKeyPair = BcPGPKeyPair ( PGPPublicKey RSAENCRYPT, generator generateKeyPair ( ), Date ( ) ) ; LOGGER debug (Generating Signature Key Properties ) ; PGPSignatureSubpacketGenerator signatureSubpacketGenerator = PGPSignatureSubpacketGenerator ( ) ; signatureSubGenerator setKeyFlags (, KeyFlags_DATA | KeyFlags CERTIFY_ ) ; signatureSubGenerator setPreferred (, getPreferredEncryption ( ) ) ; signatureSubGenerator setPreferredHash (, getPreferredHashing ( ) ) ; signatureSubGenerator setPreferredCompression (, getPreferredCompression ( ) ) ; LOGGER debug (Generating Encyption Key Properties ) ; PGPSignatureSubpacketGenerator encryptionSubpacketGenerator = PGPSignatureSubpacketGenerator ( ) ; encryptionSubGenerator setKeyFlags (, KeyFlags ENCRYPT_COMMS | KeyFlags ENCRYPT_STORAGE ) ; LOGGER info (Creating PGP Key Ring Generator ) ; generator = PGPKeyRingGenerator ( PGPPublicKey RSASIGN, signingKeyPair, userId, BcPGPDigestCalculatorProvider ( ) ( HashAlgorithmTags SHA ), signatureSubpacketGenerator generate ( ),, BcPGPContentSignerBuilder ( PGPPublicKey RSASIGN, HashAlgorithmTags SHA256 ), BcPBESecretKeyEncryptorBuilder (EncryptionAlgorithm ( ) ) build ( password toCharArray ( ) ) ) ; generator addSubKey ( encryptionKeyPair, encryptionSubpacketGenerator generate ( ), null ) ; } ( PGP e ) { error ( "{}", e getMessage ( ) ) ; generator = ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date getDateFromString ( final String dateString, final String pattern ) { SimpleDateFormat df buildDateFormat ( pattern ) ; return df. parse ( dateString ) ; } ( ParseException ) new DateException ( String format ( " parse with pattern, dateString, pattern ), e ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public Object remove ( Object key ) { ( _cacheL2 ) { ( _cacheL ( key ) _cacheL ( key ) ) return null ; } Object retval ; Map ; synchronized ( _cacheL1 ) { newMap = HashMap merge ( _cacheL, _cacheL ) ; retval = newMap remove ( key ) ; } _cacheL = ; _cacheL clear ( ) ; _missCount = ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private String getItemType ( Cmdb cmdb ) { String itemType = ; String subType = cmdb. getConfigurationItem ( ) ; String type = cmdb. getConfigurationItemType ( ) ; String hpsmSettings = hpsmSettings. getApp ( ) ; String hpsmSettingsType = hpsmSettings. getAppType ( ) ; typeCheck = ; subTypeCheck = ; if ( "" ( hpsmSettingsType ) ) { typeCheck = true ; } if ( "" ( hpsmSettingsSubType ) ) { subTypeCheck = true ; } if ( typeCheck && subTypeCheck ) { if ( subType && subType ( hpsmSettings getAppSubType ( ) ) ) { itemType = APPTYPE ; } if ( subType && subType ( hpsmSettings getCompSubType ( ) ) ) { itemType = COMPTYPE ; } if ( subType && subType ( hpsmSettings getEnvSubType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } if ( typeCheck && subTypeCheck ) { if ( type && type ( hpsmSettings getAppType ( ) ) ) { itemType = APPTYPE ; } if ( type && type ( hpsmSettings getCompType ( ) ) ) { itemType = COMPTYPE ; } if ( type && type ( hpsmSettings getEnvType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } { if ( subType && subType ( hpsmSettings getAppSubType ( ) ) && type && type ( hpsmSettings getAppType ( ) ) ) { itemType = APPTYPE ; } if ( subType && subType ( hpsmSettings getCompSubType ( ) ) && type && type ( hpsmSettings getCompType ( ) ) ) { itemType = COMPTYPE ; } if ( subType && subType ( hpsmSettings getEnvSubType ( ) ) && type null && type ( hpsmSettings getEnvType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } return itemType ; }<CODESPLIT>Returns the type of the configuration item .
public void readXML ( final List < String > _tags, final Map < String, String > _attributes, final String _text ) throws SAXException, EFapsException { if ( _tags size ( ) ) { final value = _tags ( ) ; if (uuid ( value ) ) { this uuid = _text ; } if (fileapplication ( value ) ) { this fileApplication = _text ; } if (definition ( value ) ) { this definitions add (Definition ( ) ) ; } } if (definition ( _tags ( ) ) ) { final AbstractDefinition curDef = this definitions ( this definitions size ( ) ) ; curDef. readXML ( _tags. subList (, _tags. size ( ) ), _attributes, _text ) ; } { throw new SAXException ( "Unknown XML Tag " + _tags + " for " + this. installFile ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public String getSQLUpdate ( boolean bUseCurrentValues ) { strRecordset = this getBaseRecord ( ) makeTableNames ( ) ; KeyArea keyArea = this. getBaseRecord ( ). getKeyArea ( ) ; bUseCurrentKeyValues = bUseCurrentValues? : keyArea isNull ( DBConstants TEMPKEYAREA, ) ;QueryRecord = this getBaseRecord ( ) isQueryRecord ( ) ; sFilter = keyArea addSelectParams ( "=", DBConstants TEMPKEYAREA,,QueryRecord, bUseCurrentKeyValues,,, ) ; if ( sFilter ( ) > ) sFilter = WHERE + sFilter ; strSetValues = this getBaseRecord ( ) getSQLFields ( DBConstants SQLUPDATETYPE, bUseCurrentValues ) ; if ( strSetValues ( ) ) return ; strRecordset =UPDATE + strRecordset + SET + strSetValues + sFilter ; return strRecordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object... objects ) { ( Object mock objects ) ( mock Class? ) verifyClass ( ( Class <? > ) mock ) ; } EasyMockMethodInvocationControl invocationControl = ( EasyMockMethodInvocationControl ) MockRepository getInstanceMethodInvocationControl ( mock ) ; ( invocationControl ) invocationControl verify ( ) ; } ( isNiceReplayAndVerifyMode ( )EasyMocked ( mock ) ) } { org easymock EasyMock verify ( mock ) ; } ( RuntimeException e ) { throw new RuntimeException ( mock + " a mock object", e ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void mapTileRequestFailed ( final MapTileRequestState pState ) { ( mTileNotFoundImage ) putTileIntoCache ( pState getMapTile ( ), mTileNotFoundImage, ExrableBitmapDrawable NOTFOUND ) ; ( final Handler handler mTileRequestCompleteHandlers ) ( handler ) handler sendEmptyMessage ( MAPTILESUCCESSID ) ; } } } ( final Handler handler mTileRequestCompleteHandlers ) if ( handler ) handler sendEmptyMessage ( MAPTILEFAILID ) ; } } } if ( Configuration getInstance ( ) isDebugTileProviders ( ) ) Log d ( IMapViewTAG, "MapTileProviderBasemapTileRequestFailed(): " + MapTileIndex ( pState getMapTile ( ) ) ) ; } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validateFactoryAndClass ( FieldDefinition fd, int factoryId, int classId, String fullPath ) { ( factoryId fd getFactoryId ( ) ) new IllegalArgumentException ( " factoryId " + fd getFactoryId ( ) + Current " + factoryId + " in path " + fullPath ) ; } ( classId fd getClassId ( ) ) new IllegalArgumentException ( " classId " + fd getClassId ( ) + Current " + classId + " in path " + fullPath ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static String getLabelFor ( InputComponent <?,? > input, boolean addColon ) { label = input getLabel ( ) ; ( label ) label = input getName ( ) ; } ( add label endsWith ( COLON ) ) label COLON ; } return label ; }<CODESPLIT>Returns the label for this component
protected final View inflatePlaceholderView ( final View convertView final int height ) { View view = convertView ; ( ( view PlaceholderView ) ) view PlaceView ( ( ) ) ; } view setMinimum ( ) ; return view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stopService ( ) throws Exception { Log info ( c,stopService,Stopping LdapServer ) ; this server stop ( ) ; Log info ( c,stopService,Stopping DirectoryService ) ; service shutdown ( ) ; Log. info ( c,stopService,Ldap stopped." ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void setCacheMinutes ( int iMinutes ) { if (Minutes )Minutes = DEFAULTCACHEDMIN ; cacheMinutes =Minutes ; if ( iMinutes ) { if ( timerCache ) { timerCache cancel ( ) ; timerCache = ; this stopCache ( ) ; } } { if ( timerCache ) { timerCache cancel ( ) ; } this startCache ( ) ; timerTask = DBTimerTask ( ) ; timerCache = java util Timer ( ) ; timerCache schedule ( timerTask, cacheMinutes 60 1000 ) ; } }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagateOnEnter ( GVRPickedObject hit ) { GVRSceneObject hitObject = hit getHitObject ( ) ; GVREventManager eventManager = getGVRContext ( ) getEventManager ( ) ; if ( mEvent contains ( Event SENDTOUCHEVENTS ) ) { if ( mEvent contains ( Event SENDTOLISTENERS ) ) { eventManager sendEvent ( this, ITouchEvents class,onEnter, hitObject, hit ) ; } if ( mEvent contains ( Event SENDTOHITOBJECT ) ) { eventManager sendEvent ( hitObject, ITouchEvents class,onEnter, hitObject, hit ) ; } if ( mEvent contains ( Event SENDTOSCENE ) ( mScene ) ) { eventManager sendEvent ( mScene, ITouchEvents class,onEnter, hitObject, hit ) ; } } if ( mEvent contains ( Event SENDPICKEVENTS ) ) { if ( mEventOptions contains ( EventOptions SENDTOLISTENERS ) ) { eventManager sendEvent ( this, IPickEvents class,onEnter, hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOHITOBJECT ) ) { eventManager sendEvent ( hitObject, IPickEvents class,onEnter, hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOSCENE ) ( mScene ) ) { eventManager sendEvent ( mScene, IPickEvents class,onEnter, hitObject, hit ) ; } } }<CODESPLIT>Propagate onEnter events to listeners
public java... Future GetSendQuotaResult getSendQuotaAsync ( com... AsyncHandler GetSendQuotaRequest GetSendQuotaResult asyncHandler ) getSendQuotaAsync ( GetSendQuotaRequest ( ) asyncHandler ) ; }<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short shortValue ( ) throws OtpErlangRangeException { l longValue ( ) ; short ( short ) l ; ( l ) new OtpErlangRange ( "Value too large for short " + val ) ; } return i ; }<CODESPLIT>Get this number as a short .
private MjdbcSQLException translateSQLStatePrefix ( String reason, String SQLState, int vendorCode, SQLException cause ) { MjdbcSQLException result = ; sqlState = getSqlState ( cause ) ; sqlStatePrefix = ; if ( sqlState && sqlState length ( ) >= 2 ) { sqlStatePrefix = sqlState. substring (, 2 ) ; if ( SpringExceptionHandler SQLSTATEPREFIXBADSQLGRAMMAR contains ( sqlStatePrefix ) true ) { result = BadSqlGrammarException ( reason, SQLState, vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXDATAINTEGRITYVIOLATION contains ( sqlStatePrefix ) true ) { result = DataIntegrity ( reason, SQLState, vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXDATAACCESSRESOURCEFAILURE contains ( sqlStatePrefix ) true ) { result = DataAccessResourceFailureException ( reason, SQLState, vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXTRANSIENTDATAACCESSRESOURCEEXCEPTION contains ( sqlStatePrefix ) true ) { result = TransientDataAccess ( reason, SQLState, vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXCONCURFAILURE contains ( sqlStatePrefix ) true ) { result = new ConcurrencyFailureException ( reason, SQLState, vendorCode ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean matches ( String name ) { ( name ) return pattern. equals ( "" ) ; } ( all ) return all. equals ( name ) ; } if ( middle ) return name. contains ( middle ) ; } if ( start name ( start ) ) return false ; } return end == null || name. endsWith ( end ) ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get ( nitro_service service, String selectorname ) throws Exception { nslimitselector obj nslimitselector ( ) ;name ( selectorname ) ; nslimitselector ( nslimitselector )resource ( service ) ; return ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int solveQuad ( double [ ] eqn, double [ ] res ) { double a = eq 2 ; double b = eq 1 ; double c = eq ; rc = ; if ( af ) { if ( bf ) { return - 1 ; } res rc ++ = - c / b ; } else { double d = b * b - 4 * a * c ; if ( d <f ) { return 0 ; } d =. sqrt ( d ) ; res rc = ( b + d ) ( a 2f ) ; if ( df ) { res rc = ( b d ) ( a 2f ) ; } } return fixRoots ( res, rc ) ; }<CODESPLIT>Solves quadratic equation
public Set < Term > getAllTerms ( ) { Set < Term > HashSet < Term > ( ) ; ( final StatementGroup sg statementGroups ) ( final Statement stmt sg getAllStatements ( ) ) addAll ( stmt getAllTerms ( ) ) ; } } return ret ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void cancelCopy ( CopyOperationImpl op ) throws SQLException { (Lock ( op ) ) throw new PSQLException ( GT. tr ( "Tried to cancel an inactive copy operation" ), PSQLState. OBJECT__IN_STATE ) ; } SQLException error = ; errors = ; { ( op CopyIn ) synchronized ( this ) { log ( Level FINEST,FE => CopyFail ) ; byte msg = Utils encodeUTF (Copy cancel requested ) ; pgStream sendChar ( 'f ) ; pgStream sendInteger4 ( 5 + msg ) ; pgStream send ( msg ) ; pgStream sendChar ( ) ; pgStream flush ( ) ; { processCopyResults ( op, ) ; } ( SQLException ) { errors ; ( error ) SQLException = se ; SQLException next ; ( ( getNextException ( ) ) ) = next ; } setNextException ( error ) ; } error = se ; } } (Lock ( op ) ) ; } } ( op CopyOut ) sendQueryCancel ( ) ; } } ( IOException ) { throw new PSQLException ( GT. tr ( "Database connection failed when canceling copy operation" ), PSQLState. CONNECTION_, ) ; } { synchronized ( this ) { (Lock ( op ) ) unlock ( op ) ; } } } if ( op CopyIn ) if ( errors ) throw new PSQLException ( GT. tr ( "Missing expected error response to copy cancel request" ), PSQLState. COMMUNIC_ ) ; } if ( errors ) throw new PSQLException ( GT. tr ( "Got error responses to single copy cancel request, String valueOf ( errors ) ), PSQLState COMMUNICATIONERROR, error ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public com. google.. ads. adwords. axis. v201809. o. AttributeType getRequestedAttributeTypes ( requestedAttributeTypes ;<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void setRange ( Annotation v ) { if ( OntRelationMentionType featOkTst ( ( OntRelationMentionType ) jcasType ) casFeatrange ) jcasType jcas throwFeatMissing (range,de.julielab.jules.types.OntRelationMention ) ; jcasType llcas llset ( addr, ( ( OntRelationMentionType ) jcasType ) casFeatCode_range, jcasType ll_cas ll_getFSRef ( v ) ) ; }<CODESPLIT>setter for range - sets
public List < com. ibm. wsspi. security. wim. model. RolePlayer > getRelatedRolePlayer ( ) { ( relatedRolePlayer ) relatedRolePlayer ibm wsspi security wim model RolePlayer > ( ) ; } return this. relatedRolePlayer ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JCExpression getUnderlyingBinding ( Unifier unifier ( unifier )? : unifier getBinding ( UFreeIdent Key ( identifier ( ) ) ) ; }<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clearCache ( ) { entityCache clearCache ( CommercePriceEntryImpl class ) ; finderCache clearCache ( FINDERCLASSNAMEENTITY ) ; finderCache clearCache ( FINDERCLASSNAMELISTWITH_INATION ) ; finderCache clearCache ( FINDER_CLASS_NAME_LIST_WITHOUT_INATION ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int computeCapacity ( int initial ) { ( initial MINIMUMCAPACITY ) return MINIMUM_CAPACITY ; } if ( initial MAXIMUMCAPACITY ) return MAXIMUM_CAPACITY ; } capacity = ; ( capacity initial ) capacity ; } return capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public V get ( K k long timeout TimeUnit unit ) throws TimeoutException { await ( k timeout unit ) ; cache get ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void setupClasspath ( final Path distributedClassPath, final Path intermediateClassPath, final Job job ) throws IOException { classpathProperty = System getProperty (druidhadoopinternalclasspath ) ; ( classpathProperty ) classpathProperty = System getProperty (javaclasspath ) ; } jarFiles = classpathProperty split ( File pathSeparator ) ; Configuration conf = job getConfiguration ( ) ; FileSystem fs = distributedClassPath getFileSystem ( conf ) ; if ( fs LocalFileSystem ) return ; } ( jarFilePath jarFiles ) File jarFile = File ( jarFilePath ) ; if ( jarFile getName ( ) endsWith (jar ) ) { Retry retry ( ( ) if (Snapshot ( jarFile ) ) addSnapshotJarToClassPath ( jarFile, intermediateClassPath, fs, job ) ; } addJarToClassPath ( jarFile, distributedClassPath, intermediateClassPath, fs, job ) ; } return true ; }, shouldRetryPredicate ( ), NUMRETRIES ) ; } ( e ) { throw new RuntimeException ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void eval ( String javascript ) throws WidgetException { WebElement element = findElement ( ) ; WebDriver wd = getGUIDriver ( ) getWrappedDriver ( ) ; { ( ( JavascriptExecutor ) wd ) executeScript ( javascript, element ) ; } ( e ) { time = System ( ) + 2000 ; = ; ( System ( ) time ) { ( ( JavascriptExecutor ) wd ) executeScript ( javascript, element ) ; = ; } ( e ) { { Thread. sleep ( 500 ) ; } ( InterruptedException e ) { } e = e ; } } if ( ) { throw new RuntimeException ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public long addWrapField ( long instant int amount ) { set ( instant, FieldWrappedValue ( ( instant ), amount,, iDivisor ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected synchronized SendRequest makeUnsignedChannelContract ( Coin valueToMe ) { Transaction tx Transaction ( wallet getParams ( ) ) ; ( getTotal ( ) subtract ( valueToMe ) ( Coin ZERO ) ) txOutput ( getTotalValue ( ) subtract ( valueToMe ) LegacyAddress fromKey ( wallet getParams ( ) getClientKey ( ) ) ) ; } txInput ( contract getOutput ( ) ) ; return SendRequest. forTx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static String getUserNameFromToken ( String authToken ) { ( authToken ) return ; } return authToken split ( TOKEN_SEPARATOR ) ] ; }<CODESPLIT>Extracts the user name from token .
protected Class <? > resolveProxyClass ( String [ ] interfaceNames ) throws ClassNotFoundException { ClassLoader proxyClassLoader = classLoader ; Class <? > interfaces = Class interfaceNames ; Class <? > nonPublicInterface = ; ( ; < interfaceNames ; ) Class <? > intf = loadClass ( interfaceNames ) ; if ( isPublic ( intf ( ) ) ) ClassLoader classLoader = getClassLoader ( intf ) ; if ( nonPublicInterface ) if ( classLoader proxyClassLoader ) throw new IllegalAccessError ( nonPublicInterface + " and " + intf + " declared non-public in different class loaders" ) ; } } nonPublicInterface = intf ; proxyClassLoader = classLoader ; } } interfaces = intf ; } { return Proxy. getProxyClass ( proxyClassLoader, interfaces ) ; } ( IllegalArgumentException ) { throw new ClassNotFoundException ( null, ex ) ; } }<CODESPLIT>Delegates class loading to the specified class loader .
public static double [ ] rowSums ( double [ ] [ ] data ) { double x = new double data. length ; ( i = ; i < x. ; i ) { x i = sum ( data i ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int newCapacity ) { oldCapacity = table length ; long oldTable = table ; oldValues = values ; byte oldState = state ; long newTable = new long newCapacity ; newValues = new newCapacity ; byte newState = new byte newCapacity ; this. lowWaterMark = chooseLowWaterMark ( newCapacity, this. minLoadFactor ) ; this. highWaterMark = chooseHighWaterMark ( newCapacity, this. maxLoadFactor ) ; this. table = newTable ; this. values = newValues ; this. state = newState ; this. freeEntries = newCapacity this. distinct ; ( i = oldCapacity ; i > ; ) if ( oldState i FULL ) { long element = oldTable i ; index = indexOfInsertion ( element ) ; newTable index = element ; newValues index = oldValues ; newState index = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( HpackHeaderField header ) { headerSize = header size ( ) ; if ( headerSize capacity ) clear ( ) ; return ; } ( capacity size headerSize ) remove ( ) ; } hpackHeaderFields head = header ; size header size ( ) ; if ( head hpackHeaderFields ) { head = ; } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction initial ) { ( final LauncherListener listener listenersLauncher ) listener notifyFired ( ) ; } ( final LaunchableConfig launchableConfig launchables ) Media media = Med create ( launchableConfig getMedia ( ) ) ; Featurable featurable = factory create ( media ) ; { Launchable launchable = featurable getFeature ( Launchable ) ; if ( launchableConfig getDelay ( ) ) delayed add ( DelayLaunch ( launchableConfig initial featurable launchable ) ) ; } launch ( launchableConfig, initial, featurable, launchable ) ; } } ( final LionEngine ) { featurable getFeature ( Identifiable ) destroy ( ) ; throw exception ; } } }<CODESPLIT>Called when fire is performed .
public static void init ( InvocationManager invmgr, RootDObjectManager omgr ) { _vm = invmgr ; _om = om ; inv registerProvider ( TimeBaseProvider ( ) TimeBaseMarshaller GLOBALGROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static UfsJournalFile createLogFile ( URI location long start long end ) { UJournalFile ( location start, end, ) ; }<CODESPLIT>Creates a journal log file .
protected Object writeReplace ( ) throws java. io. ObjectStreamException { return new CertificateRep ( type, getEncoded ( ) ) ; } ( CertificateException ) { new java NotSerializableException ( "javasecuritycertCertificate " + type + " + e ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extractThrowable ( final Object [ ] arguments ) { return arguments length? : extractThrowable ( arguments arguments length ] ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static List < Map < IBond, IBond > > makeBondMapsOfAtomMaps ( IAtomContainer ac1, IAtomContainer ac2, List < Map < IAtom, IAtom > > mappings ) { Map IBond IBond > > bondMaps Map < IBond IBond > > ( ) ; ( Map IAtom IAtom mapping mappings ) bondMaps add ( makeBondMapAtomMap ( ac ac mapping ) ) ; } return bondMaps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public LongConstant addLong ( long value ) { LongConstant entry getLongByValue ( value ) ; ( ) return ; entry LongConstant ( this _entries ( ) value ) ; addConstant ( entry ) ; addConstant ( ) ; return entry ; }<CODESPLIT>Adds a long constant .
public GeoPackage getOrOpen ( String name File file ) { getOrOpen ( name file ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extractVersionFromSchemaName ( String clz_name ) { idx = clzname (V ) ; ( idx ) return ; { return Integer. valueOf ( clz_name. substring ( idx + 1 ) ) ; } ( NumberFormatException ) { return - 1 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void drawShape ( Canvas canvas, Paint paint, Path path, ShapeAppearanceModel shapeAppearanceModel, RectF bounds ) { ( shapeAppearanceModelRoundRect ( ) ) corner shapeAppearanceModel getTopCorner ( ) getCorner ( ) ; canvas drawRoundRect ( bounds cornerSize cornerSize paint ) ; } canvas drawPath ( path paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public AnalyzerJob getAnalyzerJob ( final String descriptorName, final String analyzerName, final String analyzerInputName ) { List < AnJob > candidates = < > ( _jobs ) ; candidates = CollectionUtilsCandidates ( candidates, o actualDescriptorName = o getDescriptor ( ) getDisplayName ( ) ; return descriptorName. equals ( actualDescriptorName ) ; } ) ; ( analyzerName ) candidates = CollectionUtilsCandidates ( candidates, o actualAnalyzerName = o getName ( ) ; return analyzerName. equals ( actualAnalyzerName ) ; } ) ; } ( analyzerInputName ) candidates = CollectionUtilsCandidates ( candidates, o InputColumn <? > inputColumn = getIdentifyingInputColumn ( o ) ; ( inputColumn ) return false ; } return analyzerInputName. equals ( inputColumn. getName ( ) ) ; } ) ; } if ( candidates ( ) ) error ( " more AnalyzerJob candidates choose from ) ; return null ; } if ( candidates size ( ) ) warn ( "Multiple AnalyzerJob candidates choose from picking first ) ; } return candidates. iterator ( ). next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public removeExecutedTradeCallback ( BitfinexExecutedTradeSymbol tradeSymbol BiConsumer BitfinexExecutedTradeSymbol BitfinexExecutedTrade callback ) throws BitfinexClientException { traCallbacks removeCallback ( tradeSymbol callback ) ; }<CODESPLIT>Remove a executed trade callback
public HealthDto doPrimaryHealthCheck ( ) { < HealthDependency > primaryHealthDependencies healthDependencies values ( ) stream ( ) filter ( HealthDependencyPrimary ) ( ( ) ) ; return checkHealth ( primaryHealthDependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitro_service service ) throws Exception { appfwxmlpage obj appfwxmlpage ( ) ; appfwxmlerrorpage ( appfwxmlerrorpage ) obj_resources ( service ) ; return response [ ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void setupClient ( final AbstractHttpClient client ) { this. client. addResponseInterceptor ( new HttpResponseInterceptor ( ) { void process ( final HttpResponse response, final HttpContext context ) throws HttpException, IOException { HeaderHeader (Location ) ; ( header ) context setAttribute (Location header ( ) ) ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quickSelect ( List < P > points, int splitAxis, int medianNum ) { numPoints = points size ( ) ; if ( tmp numPoints ) { tmp = double numPoints ; indexes = numPoints ; } ( i = ; i < numPoints ; i ) tmp [ ] = distance valueAt ( points get ( ) splitAxis ) ; } QuickSelect selectIndex ( tmp, medianNum, numPoints, indexes ) ; }<CODESPLIT>Uses quick - select to find the median value
public void writeHtml ( JspWriter pOut, String pHtml ) throws IOException { parser = ( pHtml, "<>&, ) ; ( parser ( ) ) token = parser ( ) ; if ( token ( "<" ) ) { pOut print ( "&lt ) ; } if ( token ( ">" ) ) { pOut print ( "&gt ) ; } if ( token ( "&" ) ) { pOut. print ( "&amp ) ; } { pOut. print ( token ) ; } } }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected String getNodeName ( Node node ) { node getLocalName ( ) ; return == null? node getNodeName ( ) : ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void setExpiryDate ( IntRange ( from =, to = ) int month, IntRange ( from =, to = 9999 ) int year ) {ExpiryDateEditText setText ( DateDateIntegerInput ( month year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected void writeApplyDdl ( DdlWrite write ) { scriptInfoApplyDdl ( "-- drop dependenciesn + write applyDropDependencies ( ) ( ) +n + "-- apply changesn + write apply ( ) ( ) + write applyForeignKeys ( ) getBuffer ( ) + write applyHistoryView ( ) getBuffer ( ) + write applyHistoryTrigger ( ) getBuffer ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static final boolean classEquals ( Class clz1, Class clz2 ) { ( clz clz ) new NullPointerException ( ) ; } return clz == clz2 clz. getName ( ). equals ( clz2. getName ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void addSharedFunction ( ISource source ) { fileName sourceSource? ( (Source ) source ) ( ) : ; doAddSharedFunction ( source fileName ) ; }<CODESPLIT>Add shared function by ISource
public void setCommercePriceListService ( com. liferay. commerce. price. list. service. CommercePriceListService commercePriceListService commercePriceList commercePriceList ; }<CODESPLIT>Sets the commerce price list remote service .
public static HtmlTree MAIN ( ) { HtmlTree htmltree HtmlTree ( HtmlTag MAIN ) ; htmltreeRole ( Role MAIN ) ; htmltree ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabel_stats get ( nitro_service service, String labelname ) throws Exception { cachepolicylabelstats obj cachepolicylabelstats ( ) ; objlabelname ( labelname ) ; cachepolicylabelstats ( cachepolicylabelstats ) obj statresource ( service ) ; return ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void saveBroker ( File mapfile, HashMapIDBroker broker ) throws RuntimeException { ( broker isModified ( ) ) return ; } = ( ( mapfile ) ) ; broker writeTo ( bout ) ; bout close ( ) ; } ( IOException ) { throw new RuntimeException ( "Unable to store component ID mapmapfile=" + mapfile +, ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( Collection T values ) DataAccessException { jdbcTemplate. execute ( ConnectionCallback Object ( ) { Object doInConnection ( Connection connection ) throws SQLException DataAccessException { crud update ( connection values ) ; ; } } ) ; }<CODESPLIT>update the objects .
public static MutableInt fromExternal ( IntSupplier s IntConsumer c ) { MutableInt ( ) int getAsInt ( ) { s getAsInt ( ) ; } Integer get ( ) { getAsInt ( ) ; } MutableInt set ( final int value ) { accept ( ) ; this ; } } ; }<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) { debug (Reloading configuration ) ; this configWriteLock lock ( ) ; this config = config ; processAppPackages ( config ) ; } { this configWriteLock unlock ( ) ; } }<CODESPLIT>Replace the configuration of this instance directly .
protected void addPropertiesStart ( String type ) { putProperty ( PropertyKey Host name ( ) Ip getHostName ( ) ) ; putProperty ( PropertyKey Type name ( ) type ) ; putProperty ( PropertyKey Status name ( ) Status Start name ( ) ) ; }<CODESPLIT>Add properties to properties map on transaction start
public List < SequenceListType. Sequence > getSequence ( ) { ( sequence ) sequence < SequenceListType Sequence > ( ) ; } return this. sequence ; }<CODESPLIT>Gets the value of the sequence property .
public MapBuilder addNumber ( String fieldName, boolean include, Supplier < Number supplier ) { ( include ) Number value supplier ( ) ; ( value ) map put ( getFieldName ( fieldName ) value ) ; } } return this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnectCardOneConsumer ( ) { if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr entry ( tc, "disconnectCardOneConsumer ) ; Object clonedConsumerPoints = null ; synchronized ( consumerPoints ) { clonedConsumerPoints = consumerPoints. toArray ( ) ; } Simit e = new Simit (. (CONSUMERCARDINALITY_LIMIT_REACHED_, new Object getDestName ( ), getLocalisationUuid ( ). toString ( ) }, null ) ) ;. ( e, "comsibprocessorimplRemoteConsumerDispatcherdisconnectCardOneConsumer", "11221", this ) ; SibTr. exception ( tc, e ) ; ( i = ; i < clonedConsumerPoints. ; i ) DispatchableKey ck = ( DispatchableKey ) clonedConsumerPoints ; ck. notifyConsumerPointAboutException ( e ) ; } if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr exit ( tc, "disconnectCardOneConsumer ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean isAdministrator ( AuthContext ctx ) { ctx getUsername ( ) && ctx getUsername ( ) equals ( adminName ) && ctx getPassword ( ) && ctx getPassword ( ) equals ( adminPass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { if ( settings autostart ( ) ) { = settingsRunner ( ) ; config ( "Using runner " + runner getClass ( ) getSimpleName ( ) ) ; } { settingsPort ( OperaDefaults SERVER_DEFAULT_PORT_IDENTIFIER ) ; } createScopeServices ( ) ; if ( runner ) { runner startOpera ( ) ; } services init ( ) ; debugger = servicesDebugger ( ) ; debuggerDriver ( this ) ; windowManager = services getWindowManager ( ) ; exec = servicesExec ( ) ; core = services getCore ( ) ; cookieManager = services getCookieManager ( ) ; mouse = OperaMouse ( this ) ; keyboard = OperaKeyboard ( this ) ; servicesConsoleLogger ( ) onConsoleMessage ( ConsoleMessageConverter ( logs ) ) ; settingsProduct ( ( ) getProduct ( ) ) ; if ( utils ( ) getUserAgent ( ) contains (Mini ) ) { preferences = OperaScopePreferences ( services getPrefs ( ) ) ; preferences ( ) (User Prefs,Ignore Un Pop, ) ; if ( utils ( ) getProduct ( ) ( M ) ) { preferences ( ) (User Prefs,Allow Autofocus Form Element, ) ; } } proxy = OperaProxy ( this ) ; proxy parse ( settings getProxy ( ) ) ; }<CODESPLIT>Initialize required Scope services .
public static String calculateMD5 ( String string ) { byte hash ; { hash = MessageDigest getInstance (MD5 ) digest ( string getBytes (UTF8 ) ) ; } ( NoSuchAlgorithmException e ) { throw new RuntimeException ( "Huh MD5 should be supported?", e ) ; } ( UnsupportedEncodingException e ) { throw new RuntimeException ( "Huh UTF-8 should be supported?", e ) ; } hex = ( hash 2 ) ; ( byte b hash ) i = ( b & ) ; if ( ix10 ) hex append ( ) ; hex append ( Integer. toHexString ( i ) ) ; } return hex. toString ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File findRawDir ( File dir ) { ( ; dir null < 20 ; ) File rawDir = findResRawDir ( dir ) ; if ( rawDir ) { return rawDir ; } dir = dir getParentFile ( ) ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public Object resolveVariable ( String pName ) throws ELException { EL ctxEL ( ) ; return ctx getELResolver ( ) getValue ( ctx,, pName ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected DependantValue createPrimaryKeyValue ( InFlightMetadataCollector mappings, PersistentProperty property, Collection collection, Map <?,? > persistentClasses ) { KeyValue keyValue ; DependantValue key ; propertyRef = collection getReferencePropertyName ( ) ; ( propertyRef ) keyValue = collection getOwner ( ) getIdentifier ( ) ; } keyValue = ( KeyValue ) collection getOwner ( ) getProperty ( propertyRef ) getValue ( ) ; } ( ( ) ) ( "[GrailsDomainBinder creating dependant key value to table + keyValue getTable ( ) getName ( ) + "]" ) ; key = DependantValue ( metadataBuildingContext collection getCollectionTable ( ) keyValue ) ; keyTypeName ( ) ; keyNullable ( ) ; keyUpdateable ( ) ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected AVariableExp getVarExp ( ILexNameToken name PDefinition vardef, PType type ) { AVariableExp getVarExp ( name ) ; ( ) ; return var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean isNullOrWhiteSpace ( String arg ) { ( isNullOrEmpty ( arg ) arg trim ( ) ( ) ) return true ; } return false ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public BlockInfo queryBlockByNumber ( long blockNumber ) InvalidArgumentException Proposal { queryBlockByNumber ( getShuffledPeers ( EnumSet ( PeerRole LEDQUERY ) ) blockNumber ) ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
 (" ) static Getter getGetter ( Class type String name ) { getGettersAsMap ( type ) get ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static String decodeLZToString ( byte [ ] data, String dictionary ) { return new String ( decodeLZ ( data ),UTF-8 ) ; } ) new RuntimeException ( ) ; } }<CODESPLIT>Decode lz to string string .
public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate ( introMessage locale pnrNumber UpdateType updateType ) { AirlineFlightUpdateTemplateBuilder ( introMessage locale pnNumber updateType ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void addModulesArgument ( final String argument, final List < String > arguments, final Module [ ] modules, final String aditionalpath, final String role ) throws MojoExecutionException { buf = ( ) ; if ( adpath ) { arguments. add ( argument ) ; buf. append ( aditionalpath ) ; } if ( modules modules ) { if ( arguments contains ( argument ) ) { arguments. add ( argument ) ; } ( i = ; i < modules. ; i ) Module module = modules ; Artifact artifact = ; ( ) Set < Artifact > allArtifacts = project getArtifacts ( ) ; ( Artifact art allArtifacts ) if ( art getGroupId ( ) ( module getGroupId ( ) ) art getArtifactId ( ) ( module getArtifactId ( ) ) defaultString ( module getClassifier ( ) ) ( defaultString ( art getClassifier ( ) ) ) defaultString ( module getType ( ),jar ) ( defaultString ( art getType ( ) ) ) ) { artifact = art ; ; } } if ( artifact ) { throw new MojoExecutionException ( "The artifact " + module. toString ( ) + " referenced in aspectj plugin as " + role + ", not found the project dependencies" ) ; } if ( buf ( ) ) { buf. append ( File. pathSeparatorChar ) ; } buf. append ( artifact. getFile ( ). getPath ( ) ) ; } } if ( buf ( ) > ) { pathString = buf toString ( ) ; arguments. add ( pathString ) ; getLog ( ). debug (Adding + argument + + pathString ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extractAeroGearSenderInformation ( final HttpServletRequest request ) { client request getHeader (aogearsender ) ; ( hasValue ( client ) ) return client ; } return request getHeader (user-agent ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux < ServiceMessage > requestMany ( ServiceMessage request, Class < > responseType, Address address ) { return Flux. defer ( ( ) -> ( addressMany address parameter required ) ; ( transporttransport required ) ; return transport. create ( address ). requestStream ( request ). map ( message -> ServiceMessageCodec. decodeData ( message, responseType ) ). map ( this :: throwIfError ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incrementalRestore ( File incrementalBackupFile ) throws FileNotFoundException, IOException, ClassNotFoundException, RepositoryException { ObjectInputStream ois = ; { ois = ObjectInputStream ( PrivilegedFileHelper fileInputStream ( incrementalBackupFile ) ) ; ( ) TransactionChangesLog changesLog = readExternal ( ois ) ; changesLog setSystemId ( Constants JCRCORERESTOREWORKSPACEINITIALIZSYSTEMID ) ; ChangesLogIterator cli = changesLog getLogIterator ( ) ; (Log ( ) ) if ( cli nextLog ( ) getEventType ( ) ExtendedEvent LOCK ) { cli removeLog ( ) ; } } saveChangesLog ( changesLog ) ; } } ( EOFException ) { if ( ( ) ) { trace ( "An exception occurred " + ( ) ) ; } } }<CODESPLIT>Perform incremental restore operation .
public Key < Integer start ( ) { Key object Key ( ) ; consumers. put ( object, new Consumer < Integer ( ) { ; public void consume ( final ByteBuffer buffer ) { buffer remaining ( ) ; } public Integer finish ( ) { return count ; } } ) ; return object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean isElementPresent ( String locator ) { entering ( locator ) ; flag = ; { flag = HtmlElement locateElement ( locator ) ; } ( NoSuchElementException e ) { } exiting ( flag ) ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String args [ ] ) throws Exception { final buffer = (The lazy fox ) ; Thread t1 = new Thread ( ) { public void run ( ) { synchronized ( buffer ) { buffer delete (, 4 ) ; buffer append ( in the middle ) ; System println ( "Middle" ) ; { Thread sleep ( 4000 ) ; } ( e ) { } buffer append ( of fall ) ; System println ( "Fall" ) ; } } } ; Thread t2 = new Thread ( ) { public void run ( ) { { Thread sleep ( 1000 ) ; } ( e ) { } buffer append ( jump over the fence ) ; System println ( "F" ) ; } } ; t start ( ) ; t start ( ) ; t join ( ) ; t join ( ) ; System println ( buffer ) ; }<CODESPLIT>We have more input since wait started
protected double interpolate ( double boundA, double boundB ) { alphaNew ; ( Double isNaN ( gp ) ) alphaNew SearchInterpolate quadratic ( f, g, st, fp, stp ) ; } alphaNew SearchInterpolate cubic ( f, g, st, fp, gp, stp ) ; ( Double isNaN ( alphaNew ) ) alphaNew = SearchInterpolate quadratic ( fprev gprev stprev fp, stp ) ; }, u ; ( boundA boundB ) = boundA ; u = boundB ; } = boundB ; u = boundA ; } ( alphaNew l ) alphaNew = l ; ( alphaNew u ) alphaNew = u ; return alphaNew ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List < SemanticError > check ( DataType dataType ) {er ( "Checking semantic constraints on datatype " + dataType name ) ; List < SemanticError > errors = < SemanticError > ( ) ; Set < > constructorNames = HashSet < > ( ) ; ( Constructor constructor dataType constructors ) ( "Checking semantic constraints on constructor " + constructor name + " in datatype " + dataType name ) ; if ( dataType constructors size ( ) dataType name ( constructor name ) ) { ( "Constructor with same name as its data type " + dataType name + ) ; errors add ( _ConstructorDataTypeConflict ( dataType name ) ) ; } if ( constructorNames contains ( constructor name ) ) { ( "Two constructors with same name " + constructor name + " in data type " + dataType name + ) ; errors add ( _DuplicateConstructor ( dataType name, constructor name ) ) ; } { constructorNames add ( constructor name ) ; } errors addAll ( check ( dataType, constructor ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
@ (, } ) protected void registerDependency ( List additionalList, GrailsPlugin plugin ) { ( addedNames contains ( plugin getName ( ) ) ) addedNames add ( plugin getName ( ) ) ; additionalList add ( plugin ) ; addPluginDependencies ( additionalList, plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private JsonNode executeRequest ( HttpPost request ) throws IOException, GroovesharkException { HttpResponse response = httpClient execute ( request ) ; (Logging )Request ( request, response ) ; } responsePayload CharStreams toString ( ( response getEntity ( ) getContent ( ) Char UTF ) ) ; return jsonMapper. readTree ( new StringReader ( responsePayload ) ) ; } ( JsonProcessingException e ) { new GroarkException ServerErrorException ( "Failed to parse response - received data valid JSON " + responsePayload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map < String, T > parseMap ( JsonParser jsonParser ) throws IOException { < T > map = HashMap < T > ( ) ; ( jsonParser nextToken ( ) JsonToken ENDOBJECT ) key = jsonParser getText ( ) ; jsonParser nextToken ( ) ; if ( jsonParser getCurrentToken ( ) JsonToken VALUENULL ) map put ( key, null ) ; } map put ( key, parse ( jsonParser ) ) ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public DateFuncSup subtract ( DateSeperator d ) { date ( date ( ) parse ( ) ) ; return this ; }<CODESPLIT>subtract date on supported date
private double radicalInverse ( long i ) { digit = ( double ) base ; double radical = digit ; double inverse = ; ( > ) inverse += digit * ( double ) ( i base ) ; digit *= radical ; /= base ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String getTempDir ( ) { synchronized ( FileUtil. class ) { if ( TEMPDIR ) tmpDir = System getProperty (javaiotmpdir ) ; if ( StringUtil ( tmpDir ) ) if ( new File ( "/temp ) exists ( ) ) tmpDir = "/temp ; } { tmpDir = "/tmp ; } } TEMPDIR = tmpDir ; } } return TEMP_DIR ; }<CODESPLIT>Gets the default temp directory for the system .
public static < Accumulator Value Accumulator reduce ( List < Value list Accumulator init ReduceClosure < Accumulator, Value f ) { Acc accumulator = init ; ( Value value list ) accumulator f eval ( accumulator value ) ; } return accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected ProcessOutput executeProcess ( FaxJob faxJob, String command, FaxActionType faxActionType ) { ( command ) this throwUnsupportedException ( ) ; } updatedCommand command ; ( this useWindowsCommandPrefix ) buffer ( updatedCommand ( ) + this windowsCommandPrefix ( ) + ) ; buffer ( this windowsCommandPrefix ) ; buffer ( ) ; buffer ( updatedCommand ) ; updatedCommand = buffer ( ) ; } ProcessOutput processOutput = ProcessExecutorHelper executeProcess ( this, updatedCommand ) ; this validateProcessOutput ( processOutput, faxActionType ) ; this updateFaxJob ( faxJob, processOutput, faxActionType ) ; return processOutput ; }<CODESPLIT>Executes the process and returns the output .
public ModelNode getConnector ( String name ) throws Exception { Address address Address root ( ) ( SUBSYSTEM SUBSYSTEMWEB CONNECTOR name ) ; return readResource ( address, ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( CharsetDetector det, int [ ] commonChars ) { SuppressWarnings (unused" ) int singleByteCharCount = ; doubleByteCharCount = ; commonCharCount = ; badCharCount = ; totalCharCount = ; confidence = ; iteratedChar iter = iteratedChar ( ) ; detectBlock : (. reset ( ) ; nextChar ( det ) ; ) totalCount ; if ( iter error ) { badCount ; } { cv = iter charValue &xFFFFFFFFL ; if ( cv ) { singleByteCount ; } { doubleByteCount ; if ( commonChars ) { if ( Arrays binarySearch ( commonChars, ( int ) cv ) >= ) { commonCount ; } } } } if ( badCharCount >= 2 badCharCount 5 >= doubleByteCharCount ) { detectBlock ; } } if ( doubleByteCharCount 10 badCharCount ) { if ( doubleByteCharCount totalCharCount < 10 ) { confidence = ; } { confidence = 10 ; } detectBlock ; } if ( doubleByteCharCount < 20 badCharCount ) { confidence = ; detectBlock ; } if ( commonChars ) { confidence = 30 +ByteCharCount 20 badCharCount ; if ( confidence > 100 ) { confidence = 100 ; } } { maxVal =. log ( ( float )ByteCharCount 4 ) ; scale = 90 maxVal ; confidence = ( int ) (. log ( commonCharCount + ) scaleFactor + 10 ) ; confidence =. min ( confidence, 100 ) ; } } return confidence ; }<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( DMatrix src, int srcY0, int srcY1, int srcX0, int srcX1, DMatrix dst ) { ( ( ReshapeMatrix ) dst ) reshape ( src src srcX srcX ) ; extract ( src, src, src, srcX, srcX, dst,, ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resizeEip ( ResizeEipRequest request ) { ( request getNewBandwidthMbps ( )newBandwidthMbps be ) ; checkStringNotEmpty ( request getEip ( ),ip not be empty ) ; ( Strings isNullOrEmpty ( request getClientToken ( ) ) ) request setClientToken ( generateDefaultClientToken ( ) ) ; } InternalRequest internalRequest = this createRequest ( request, HttpMethodName PUT, request getEip ( ) ) ; internalRequest addParameter (resize, ) ; internalRequest addParameter ( CLIENTTOKENIDENTIFY, request getClientToken ( ) ) ; fillPayload ( internalRequest, request ) ; invokeHttpClient ( internalRequest, AbstractBceResponse ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void useNextAddressAsNewContactSeedBroker ( ) { if ( currentContactSeedBrokerIndex seedBrokerAddresses ) currentContactSeedBrokerIndex = ; } URLContactUrl = Net getCorrectHostnamePort ( seedBrokerAddresses currentContactSeedBrokerIndex ) ; this consumer = SimpleConsumer (ContactUrl getHost ( )ContactUrl getPort ( ) soTimeout bufferSize, dummyClientId ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { result = ( ) ; ( = ; < value ( ) ; ) char c = value charAt ( i ) ; if ( c ESCAPEPREFIX ) { codeString = value ( i +, i + 3 ) ; code = Integer ( codeString, 16 ) ; if ( code reservedChars reservedChars code code ) { result append ( reservedChars code ) ; i 2 ; } { throw new ServiceLocationException ( "Unknown escaped character " + ESCAPE_PREFIX + codeString + " at position " + ( i + 1 ) + " of " + value, SLPError. PARSE_ ) ; } } { result append ( c ) ; } } return result. toString ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected HashMap readFile ( HashMap brMap ) throws IOException { HashMap ret = HashMap ( ) ; < HashMap > expArr = < HashMap > ( ) ; HashMap < String, HashMap > files = readObvData ( brMap ) ; ArrayList < HashMap > obvData ; HashMap obv ; HashMap expData ; ( exname files keySet ( ) ) obvData = ( ArrayList ) files (name ) ( obv ) ; ( HashMap obvSub obvData ) expData = HashMap ( ) ; obv = HashMap ( ) ; copyItem ( expData files (name )exname ) ; copyItem ( expData files (name )crid ) ; copyItem ( expData files (name )local_name ) ; expData put ( jsonKey, obv ) ; obv put ( obvFileKey obvSub ( obv ) ) ; expArr add ( expData ) ; } } idNames = ( ) ; idNames add (trnot ) ; removeIndex ( expArr, idNames ) ; ret put (experiments, expArr ) ; return ret ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static FixedStringSearchInterpolator createInterpolator ( MojoParameters params, String filter ) { delimiters extractDelimiters ( filter ) ; ( delimiters ) return FixedStringSearchInterpolator create ( ) ; } DockerAssemblyConfigurationSource configSource DockerAssemblyConfigurationSource ( params ) ; return AssemblyInterpolator fullInterpolator ( params getProject ( ), DefaultAssemblyReader createProjectInterpolator ( params getProject ( ) ) withExpressionMarkers ( delimiters ], delimiters ] ), configSource ) withExpressionMarkers ( delimiters ], delimiters 1 ] ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean isPartitionCleanupInProgress ( ZooKeeper zk ) throws KeeperException, InterruptedException { List < > children = zk getChildren ( VoltZK leadersinitators, ) ; List < ZKUtil ChildrenCallback > childrenCallbacks = Lists ( ) ; ( child children ) ZKUtil ChildrenCallback callback = ZKUtil ChildrenCallback ( ) ; zk getChildren ( ZKUtil joinZKPath ( VoltZK leadersinitators, child ),, callback, null ) ; childrenCallbacks add ( callback ) ; } ( ZK ChildrenCallback callback childrenCallbacks ) if ( callback ( ) ( ) ) { return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private byte [ ] unifyLData ( final CEMI ldata, final boolean emptySrc, final List < Integer > types ) { final byte data ; if ( ldata CEMILDataEx ) { final CEMDataEx ext = ( ( CEMDataEx ) ldata ) ; final List < AddInfo > additionalInfo = ext additionalInfo ( ) ; synchronized ( additionalInfo ) { ( final Iterator < AddInfo > = additionalInfo. iterator ( ) ;. ( ) ; ) final AddInfo info = i next ( ) ; if ( types contains ( info getType ( ) ) ) { warn ( "remove L-Data additional, info ) ; i remove ( ) ; } } } } data = ldata toByteArray ( ) ; data = ; data + data + = ; if ( emptySrc ) { data + data + 3 = ; data + data + 4 = ; } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static < T extends Number > int [ ] asArray ( final T... array ) { b = new array. length ; ( i = ; i < b. length ; i ) { b i = array i. intValue ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void setActiveChunkHandle ( SegmentHandle handle ) { Preconditions checkArgument ( handle handle isReadOnly ( )Active SegmentChunk handle cannot be readonly." ) ; SegmentChunk last = lastChunk ( ) ; Preconditions checkState ( lastCannot set an Active SegmentChunk handle when are no SegmentChunks." ) ; Preconditions checkArgument ( handle handle getSegmentName ( ) ( last getName ( ) ),Active SegmentChunk handle must be for the last SegmentChunk." ) ; this activeChunkHandle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String getEmptyValue ( ) { if ( Timex3Interval featOkTst ( ( Timex3Interval ) jcasType ) casFeatemptyValue ) jcasType jcas throwFeatMissing (emptyValue,deunihddbsuimatypesheideltimeTimex3Interval ) ; return jcasType. ll_cas. ll_getStringValue ( addr, ( ( Timex3Interval_Type ) jcasType ). casFeatCode_emptyValue ) ; }<CODESPLIT>getter for emptyValue - gets
public static AccountInfo adaptAccountInfo ( BitstampBalance bitstampBalance, String userName ) { List < Balance > balances = < > ( ) ; ( org knowmchange bitstamp dto account BitstampBalance Balance b bitstampBalance getBalances ( ) ) Balance xchangeBalance = Balance ( Currency getInstance ( b getCurrency ( ) toUpperCase ( ) ) b getBalance ( ) b getAvailable ( ) bReserved ( ),,, b getBalance ( ) subtract ( b getAvailable ( ) ) subtract ( bReserved ( ) ), ) ; balances add ( xchangeBalance ) ; } return new AccountInfo ( userName, bitstampBalance. getFee ( ), new Wallet ( b ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void afterConnectionClosed ( WebSocketSession session, CloseStatus status ) { ( "WebSocket closed Close Status, session, status toString ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trimLastPathSection ( String path ) { sections = path split ( "/" ) ; newPath = new ( "/" ) ; ( i = ; i < sections. ; i ) newPath. append ( sections i ). append ( "/" ) ; } return newPath. toString ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ( ) { Style style Style ( ) ; style color = Palette getSolidColor ( Palette MATERIALRED ) ; return style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public ManagedObjectContext createContext ( ) { Bean < T > bean ; EjbDescriptor T ejbDescriptor getEjbDescriptor ( ) ; ( ejbDescriptorMessageDriven ( ) ) bean getBean ( ) ; } WManager beanManager getBeanManager ( ) ; WCreationalContext T creationContext beanManager createCreationalContext ( bean ) ; ManagedObjectContext managedObjectContext CDIManagedObjectState ( creationContext ) ; return managedObjectContext ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public final void deleteOperation ( String name ) { DeleteOperation DeleteOperation newBuilder ( ) setName ( name ) ( ) ; deleteOperation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean isMember ( int x ) { Assert check ( currentState BitsState UNKNOWN ) ; return <= x && x < ( bits length word ) && ( bits x word ] & ( 1 ( x & word ) ) )!= ; }<CODESPLIT>Is x an element of this set?
public HandlerRegistration addSearchFinishHandler ( SearchFinishEvent. SearchFinishHandler handler addHandler ( handler SearchFinishEvent ) ; }<CODESPLIT>This handler will be triggered when search is finish
public void setForeignBusSendAllowed ( boolean sendAllowed ) { ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr entry ( tc,setForeignBusSendAllowed, Boolean valueOf ( sendAllowed ) ) ; } _sendAllowedOnTargetForeignBus = Boolean valueOf ( sendAllowed ) ; ( aliasesTargetThisDest ) synchronized ( aliasesThatDest ) { Iterator i = aliasesThatTargetThisDest iterator ( ) ; ( ( ) ) AbstractAliasDestinationHandler abstractAliasDestinationHandler = ( AbstractAliasDestinationHandler ) i next ( ) ; abstractAliasDestinationHandlerForeignBusSendAllowed ( sendAllowed ) ; } } } ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr exit ( tc,setForeignBusSendAllowed ) ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processingInstruction ( String target String data ) throws SAXException { ( documentHandler ) documentHandler processing ( target data ) ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer getFileSizeOnFTPServer ( String hostName, Integer port, String userName, String password, String filePath ) { Integer result = ; replyString = executeCommandOnFTPServer ( hostName, port, userName, password,SIZE, filePath ) ; if ( replyString replyString contains ( ) ) throw new RuntimeException ( String. format ( "Unable to get size of thes file Got [%s reply from FTP server.", filePath, replyString ) ) ; } result = Integer valueOf ( replyString split ( ) replaceAll ( "[r, ) ) ; } return result ; }<CODESPLIT>Get size of the FTP file .
public static base_responses enable ( nitro_service client, String trapname [ ] ) throws Exception { baseresponses result = ; if ( trapname && trapname length > ) { snmpalarm enableresources = snmpalarm trapname length ; ( i = ; i < trapname. ; i ) enableresources i = new snmpalarm ( ) ; enableresources. trapname = trapname ; } result = perform_operation_bulk_request ( client, enableresources,enable ) ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void ordered ( Consumer < T > action ) { TopSorter T sorter TopSorter > ( this ) ; sorter ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static SeqServerGroup parse ( String asg ) { d = asg ( '-' ) ; d = asg ( '-' d + ) ; dN = asg ( '-' ) ; if ( dNSequence ( asg, dN ) ) dN = asg length ( ) ; } return new SeqServerGroup ( asg, d1, d2, dN ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int getMapCount ( int srcCount, int numNodes ) { numMaps ( ) ( srcCount OPPERMAP ) ; numMaps min ( numMaps, numNodes MAXMAPSNODE ) ; return Math. max ( numMaps, 1 ) ; }<CODESPLIT>Calculate how many maps to run .
protected void channelRead0 ( ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg ) throws Exception { ( msg. getStatus ( ) ) { SUCCESS originalPromiseSuccess ( ) ; ctx. pipeline ( ). remove ( this ) ; ctx. fireChannelActive ( ) ; ; ACCESS originalPromiseFailure ( AuthenticationException (Authentication on Select Bucket command ) ) ; ; NOT originalPromiseFailure ( AuthenticationException (Bucket found on Select Bucket command ) ) ; ; default : originalPromise. setFailure ( new AuthenticationException ( "Unhandled select bucket status " + msg. getStatus ( ) ) ) ; } }<CODESPLIT>Handles incoming Select bucket responses .
private final DiceNotationExpression unwrap ( final DiceNotationExpression expression ) { DiceNotationExpression ; ( expression ExpressionWrapper ) ( ( ExpressionWrapper ) expression )WrappedExpression ( ) ; } = expression ; } return result ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float [ ] checkArrayElementsInRange ( float [ ] value, float lower, float upper, String valueName ) { checkNotNull ( value, valueName + must not be null ) ; ( ; < value ; ) v = value ; if ( Float isNaN ( v ) ) throw new IllegalArgumentException ( valueName + "[" + i + must be NaN" ) ; } if ( v lower ) throw new IllegalArgumentException ( String. format ( "%sd out of range of [%ff ( low)", valueName, i, lower, upper ) ) ; } if ( v upper ) throw new IllegalArgumentException ( String. format ( "%s[%d out of range of [%ff ( high)", valueName, i, lower, upper ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy ( InputStream inputStream OutputStream outputStream ) throws { copy ( inputStream outputStream ) ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection < Tuple > getTuples ( List < VarDef > varDefs, int varStart, int varEnd, int tupleSize ) { Collection < Tuple > tuples = < Tuple > ( ) ; ( varStart ; < var ; ) VarDef nextVar = varDefs ( ) ; Iterator < VarValueDef > values = nextVar getValidValues ( ) ; if ( values ( ) ) throw new IllegalStateException ( "Can't complete tuples -- no valid values defined for var=" + nextVar ) ; } Collection < Tuple > subTuples = tupleSize? : getTuples ( varDefs i + varEnd + tupleSize ) ; if ( subTuples ) ( values ( ) ) tuples add ( Tuple ( VarBindingDef ( nextVar, values next ( ) ) ) ) ; } } if ( subTuples ( ) ) ( values ( ) ) VarBindingDef nextBinding = VarBindingDef ( nextVar, values next ( ) ) ; ( Tuple subTuple subTuples ) Tuple nextTuple = Tuple ( nextBinding ) addAll ( subTuple ) ; if ( nextTupleCompatible ( ) ) tuples add ( nextTuple ) ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public V get ( K key ) { final hash = hash ( key ) ; final slot = indexOf ( hash ) ; ( Entry < K V > = table slot ; null ; =. next ) if ( entry hashCode hash && entry key ( key ) ) { return entry. value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public boolean validSecondFactor ( String secret, String number ) { Objects ( secret Required SECRET ( ) ) ; Objects ( number Required TOTP ( ) ) ; return TotpUtils verifiedTotp ( secret, number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void updateOutgoingEdgesStateDL ( int currS, int currL, int prevS, int prevL, Emissions emission ) { updateOutgoingEdges ( currS currL States DLSL, States DL, Transitions tDLin, em ) ; updateOutgoingEdges ( currS, currL, States DL,S,L, States S, Transitions tSDL, em ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void setPrefix ( String key, String prefix ) { PdfName fieldname PdfName ( key ) ; PdfObject o get ( fieldname ) ; ( o ) new IllegalArgumentException ( set a value before adding a prefix ) ; PdfDictionary dict PdfDictionary ( PdfName COLLECTIONSUBITEM ) ; dict put ( PdfName D, o ) ; dict put ( PdfName P PdfString ( prefix PdfObject TEXTUNICODE ) ) ; put ( fieldname, dict ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected AbstractExpression replaceExpressionsWithPve ( AbstractExpression expr ) { assert ( expr ) ; if ( expr TupleValueExpression ) param = ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpression pve = ParameterValueExpression ( param, expr ) ; mparameterTveMap put ( param, expr ) ; return pve ; } if ( expr AggregateExpression ) param = ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpression pve = ParameterValueExpression ( param, expr ) ; List < TupleValueExpression > tves = ExpressionUtil getTupleValueExpressions ( expr ) ; assert ( mparentStmt ) ; ( TupleValueExpression tve tves ) origId = tveStmtId ( ) ; if ( mstmtId origId mparentStmt mstmtId origId ) throw new PlanningErrorException ( "Subqueries do not support aggregation of parent statement columns" ) ; } } mparameterTveMap put ( param, expr ) ; return pve ; } if ( expr getLeft ( ) ) exprLeft ( replaceExpressionsP ( expr getLeft ( ) ) ) ; } if ( expr getRight ( ) ) exprRight ( replaceExpressionsP ( expr ( ) ) ) ; } if ( expr getArgs ( ) ) { List < AbstractExpression >Args = < > ( ) ; ( AbstractExpression argument expr getArgs ( ) )Args add ( replaceExpressionsWithPve ( argument ) ) ; } expr setArgs (Args ) ; } return expr ; }<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean addCallback ( String applicationId, DelayedCallback callback ) { = ; List < DelayCallback > list = BACKLOG ( applicationId ) ; if ( list ) list = < DelayCallback > ( ) ; BACKLOG put ( applicationId, list ) ; = ; } list add ( callback ) ; return isFirst ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static byte [ ] gunzipBytes ( byte [ ] compressedBytes ) throws IOException { = ( ( ) ( compressedBytes5 ) ) ; Inflater dos = InflaterOutputStream ( ) ; dos write ( compressedBytes ) ; dos close ( ) ; return. toByteArray ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public TupleValueExpression getOutputExpression ( int index ) { SchemaColumn schemaCol getSchemaColumn ( index ) ; TupleExpressionve TupleExpression ( getTableAlias ( ) getTableAlias ( ) schema getColumnAlias ( ) schema getColumnAlias ( ) index ) ; return tve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
