public final ExampleData getSelectedExampleData ( ) {SelectedItems getSelectedRows ( ) ; (SelectedItemsSelectedItems ( ) ) ; } ( selectedItemItems rowIndex TreeItem rowIndex ( selectedItem ) ; getTreeModel ( ) getExampleData ( rowIndex ) ; } ; }<CODESPLIT>Get the example which is selected in the tree .
public void dimAt ( float alpha ) { (Dim ; } (DimViewDimViewDimView ( ) ; } (DimViewShown (DimView ( VISIBLE ) ;DimViewBackgroundColor (Dim ) ; }DimViewAlpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { ( ( ) ) (Extract once ) ; extractSW start ( ) ; SEntry =Entry ; setEndNode (Edge adjNode ) ;Valid EdgeIterator Edge isValid (Edge edge ) ;Edge ; (EdgeValid EdgeIterator Edge isValid (Edge parent edge ) ; =Valid parent edge : EdgeIterator NO ; processEdge (Edge edgeEdge adjNodeEdge ) ; = parent ; } setFromNode (Edge adjNode ) ; reverseOrder ( ) ; extractSW stop ( ) ; return set ( ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static int writeInt ( byte [ ] target int offset int value ) { target offset ( ) ( ) ; target offset + ( ) ( ) ; target offset + ( ) ( value ) ; target offset ( ) ; Integer BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visitGetElem ( Node n ) validator expectMatch ( getJS ( ( getJS ( ( ) ) ) ;Typed ( ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class getTypedClass ( java. lang. reflect. Type type ) { ( Class ( ( Class ) type ) ; } ( ParameterizedType java lang reflect raw ( ( ParameterizedType ) ) ( ) ; getTypedClass ( rawParamterizedType ) ; } ( TypeVariable upperBound ( ( TypeVariable ) ) ( ) ; getTypedClass ( upperBound ) ; } new ( finding generic class + type ) ; }<CODESPLIT>Gets the typed class .
public URI toUri ( JimfsPath path fileStore ( ( ; pathServiceUri ( uri pathPath ( ) ) ;<CODESPLIT>Gets the URI of the given path in this file system .
public ActivityInterface getActivityInterface ( ) ( activity activityInterface ActivityInterface ( shared transport ; } activityInterface ; }<CODESPLIT>Get the ActivityInterface .
private void initBeforeList ( ) { ProcessAdvice > beforeRequestProcessAd > ( ) ; Method invokeHolderInvokeHolder ( ) ;? > processorClass invokeHolder getDeclaringClass ( ) ; ( processorClass processorClass isAnnotationPresent ( Before ) )? ProcessAdvice > processorClass getAnnotation ( Before ) value ( ) ; ( ; ; )? ProcessAdvice > bc ; ProcessAdvice beforeRequestProcessAdvice BeanManager ( ) getReference ( bc ) ; beforeRequestProcessAd add ( beforeRequestProcessAd ) ; } } ( invokeHolder isAnnotationPresent ( Before ) )? ProcessAdvice > invokeHolder getAnnotation ( Before ) value ( ) ; ( ; ; )? ProcessAdvice > bc ; ProcessAdvice beforeRequestProcessAdvice BeanManager ( ) getReference ( bc ) ; beforeRequestProcessAd add ( beforeRequestProcessAd ) ; } } thisRequestProcessAdvices =RequestProcessAdvices ; }<CODESPLIT>Initializes before process advices .
private void init ( ) { js Json ( ) ; js configure ( JsonParser Feature ALLOWCOMMENT ) ; js configure ( JsonParser Feature ALLOWSINGLEQUOTES ) ; js configure ( JsonParser Feature ALLOWNONNUMBERS ) ; }<CODESPLIT>Creates the JsonFactory .
static void flushStackLocalLeaks ( Lo lo ) Handler handler Handler ( lo ) void handleMessage ( Message msg ) sendMessageDelayed ( ( THREADLEAN ) ; } } ; handler sendMessageDelayed ( handler ( ) THREADLEAN ) ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void addReset ( String label ) { ( buttons buttons ( ; Element Input ( Input ResetReset label ) ; ( extendRow addField ( ) ; buttons ( ) ; }<CODESPLIT>Add a reset button .
public getMaximumVolume ( Context ( ( Audio ) getSystemService ( Context AUDISERVICE ) ) getStreamVolume ( Audio STREAMUSIC ) ;<CODESPLIT>Returns maximum volume the media volume can have
@ (checkstyle:npathity" ) public void removeSREs ( ISREInstall... sres ) { ISREInstallRE getDefaultRE ( ) ;IdRE? :RE getId ( ) ; ; ( defaultId ) ( ; default thisreTable getItem ( ) ; ) ( defaultId ( ( ( ISInstall ) this sreTable getItem ( ) getData ( ) ) getId ( ) ) ) = ; } } } normIdEmpty (Id ) ;Removed ; ( ISREInstallre ) ( this sreArray remove ( sre ) sre getId ( ) ( normDefaultId ) )Removed ; } } refreshREListUI ( ) ; ( defaultRemoved ) ( this sreTable getItem ( ) ) setSelection ( ) ; } ( defaultIndex ) = ; } ( defaultIndex this sreTable getItem ( ) ) = thisTable ( ) ; }Selection ( StructuredSelection ( this sreTable getItem ( ) getData ( ) ) ) ; } } this sList refresh ( ) ; ( defaultRemoved ) fireDefaultREChanged ( ) ; } updateUI ( ) ; }<CODESPLIT>Removes the given SREs from the table .
public static WikiUser getUser ( String wikiId, String siteurl ) { WikiUser ; Properties props getProperties ( wikiId ) ; WikiUser ( ) ;Username ( props ( ) ) ;Email ( props (email ) ) ; Crypt pc Crypt ( props getProperty (cy ) props getProperty (salt ) ) ; setPassword ( pc decrypt ( props ( ) ) ) ; } ) help ( wikiId siteurl ) ; log ( Level SEVERE msg ) ; } ) log ( Level SEVERE e ( ) ) ; } ( General ) log ( Level SEVERE e ( ) ) ; } return ; }<CODESPLIT>get the Wiki user for the given wikiid
public T next ( ) { retryCount ; T delegate ( ) ; (Generated ( ) ) alreadyGenerated ( ) ; return next ; } ; } ( numberOfRetries ; new ( on ( ) join (", numberOfRetries,retries generate unique value" ) ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private isAllowedInsideList ( Node node ( node ( ) Node ELEMENTNODE node getNodeName ( ) ( TAGLI ) ) ( node ( ) Node TEXTNODE node getNodeValue ( ) trim ( ) ( ) ) ;<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static ResidueNumber [ ] matchSequenceToStructure ( ProteinSequence seq, Structure struct ) { Group atomPosition Group ( ) ; ProteinSequence structSeq getProteinSequenceStructure ( struct atomIndexPosition ) ; SubstitutionMatrix AminoAcidCompound matrix SimpleSubstitutionMatrix AminoAcidCompound ( AminoAcidCompound getAminoAcidCompound ( ) ( ) ( ) ) ; matrix SimpleSubstitutionMatrix AminoAcidCompound ( AminoAcidCompound getAminoAcidCompound ( ) ( SimpleSubstitutionMatrix getResourceAsStream ( "/txt ) ) ) ; SequencePair ProteinSequence AminoAcidCompound Align getPairAlignment ( seqSeqSequenceAlign GLOBAL SimplePen ( ) matrix ) ; AlignSequence ProteinSequence AminoAcCompound alignedSeq getQuery ( ) ; AlignSequence ProteinSequence AminoAcCompound alignedStruct getTarget ( ) ; assert ( alignedSeq getLength ( ) alignedStruct getLength ( ) ) ; ResidueNumber ca ResidueNumber seq ( ) ; ( aligned ( ) getPosition ( ) ; aligned ( ) getPosition ( ) ; ) ( alignedSeqGap ( ) ) aligned getSequence ( ) ; assert ( structIndex ) ; Group g atomPosition ( struct ) ; (Chain residue Structure no corresponding amino sequence g getChain ( ) g getResidueNumber ( ) ( ) g getChain ( ) getStructure ( ) getPDBCode ( ) ) ; } ( alignedStructGap ( ) ) seq alignedSeq getSequence ( ) ; aligned getSequence ( ) ; Group g atomPosition ( struct ) ; assert ( seqIndex seqIndex ca ) ; ca seqIndex g getResidueNumber ( ) ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
@ ( } ) public static IMeta mergeMeta ( IMetaData <, > metaData1, IMetaData <, > metaData2 ) { Map < > map ( ( Map < > ) metaData ) ; Set < Entry < Object set map ( ) ; Map < > map ( ( Map < > ) metaData ) ; Set < Entry <, Object set map ( ) ; Map < > rep < > ( ) ; ( Object set ) key getKey ( ) ; ( map ( key ) ) value map ( key ) ; value map ( key ) ; ( value Double ) ( Double valueOf ( value ( ) ) ( ) Double valueOf ( value ( ) ) ( ) ) rep put ( key, value ) ; } } ( value Integer ) ( Integer valueOf ( value ( ) ) intValue ( ) Integer valueOf ( value ( ) ) intValue ( ) ) rep put ( key, value ) ; } } ( value Long ) ( Long valueOf ( value ( ) ) longValue ( ) Long valueOf ( value ( ) ) longValue ( ) ) rep put ( key, value ) ; } } ( value Boolean ) ( Boolean valueOf ( value ( ) ) Boolean valueOf ( value ( ) ) ) rep put ( key, value ) ; } } } } set removeAll ( rep ( ) ) ; set addAll ( rep ( ) ) ; set addAll ( set ) ; return metaData1 ; }<CODESPLIT>Merges the two Meta objects
public List T subList ( arg0 int arg ) { (Results ( argResultsAvailable ( moveResults ( ) ; } unmodifiableList ( allResults subList ( arg arg ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private Message prepare ( String channel, Message message, Recipient [ ] recipients ) { messageMetadata (wfpubnode nodeId ) ; messageMetadata (wfpubchannel channel ) ; messageMetadata (wfpubevent randomUUID ( ) ( ) ) ; messageMetadata (wfpub System ( ) ) ; messageMetadata (wfpub recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private < T GraphRequest < T graph ( String object JavaType type Param... params ) { checkForBatchExecution ( ) ; Graph T Graph T ( object mapper TMappingChain ( ) ) ; this graphRequests ( ) ; req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void writeLength ( long length ) { ( 25 ) buf position = ( byte ) ; } ( ) buf position = ( byte ) ; buf position = ( byte ) ; buf position ( byte ) ( 8 ) ; } ( 1616 ) buf position = ( byte ) ; buf position = ( byte ) ; buf position ( byte ) ( 8 ) ; buf position ( byte ) ( 16 ) ; } buf position = ( byte )xfe ; buf position = ( byte ) ; buf position ( byte ) ( 8 ) ; buf position ( byte ) ( 16 ) ; buf position ( byte ) ( 24 ) ; buf position ( byte ) ( 32 ) ; buf position = ( byte ) ( 40 ) ; buf position = ( byte ) ( ) ; buf position = ( byte ) ( ) ; } }<CODESPLIT>Write length .
public static TSource TResult List TResult map ( Collection TSource items Mapper TSource TResult mapper ) { ( ( items ArrayList < > ( ) ; } T ( items ( ) ) ; ( TSource item items T mappedItem mapper map ( item ) ; ( mappedItem ) ; } ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serializeReal ( Number real ContentHandler handler ) SAXException serialize (real ( real ( ) handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public JMenuBar setupStandardMenu ( ActionListener targetAction boolean bAddHelpMenu ) { Application application BaseApplet getSharedInstance ( ) getApplication ( ) ; ResourceBundleResources application getResourceBundle ( ) ; application getResources ( ) ; setupActions ( targetAction ) ; JMenuBar menuBar = new JMenuBar ( ) { private static final long =L ; Dimension getMaximumSize ( ) { Dimension ( super getMaximumSize ( ) width, super getPreferredSize ( ) height ) ; } } ; menuBar ( ) ; JMenu menu ;chItem 20 ; menuMenu ( menuBar ThMenu FILE ) ;MenuItem ( menu ThMenu PRItemShortcut ) ; menuSeparator ( ) ; add ( menu,MenuON,chItem ) ; add ( menu,MenuOUT,chItem ) ;MenuItem ( menu ThMenu CHANGEPASSWORDItemShortcut ) ; menuSeparator ( ) ;MenuItem ( menu ThMenu CLOSEItemShortcut ) ;chItem 20 ; menuMenu ( menuBar ThMenu EDIT ) ;MenuItem ( menu ThMenu CItemShortcut ) ; thisMenuItem ( menu ThMenu COPYItemShortcut ) ; thisMenuItem ( menu ThMenu PASTEItemShortcut ) ; menuSeparator ( ) ; thisMenuItem ( menu ThMenu PREItemShortcut ) ; (Resources ) applicationResourceBundle (Resources ) ; (AddHelpMenu ) menuHelpMenu ( menuBar ) ; menuBar ; }<CODESPLIT>Setup the standard menu items .
public static String getPreferredAttributeNameForLaneCount ( ) { Preferences prefs PreferencesPackage ( RoadNetwork ) ; ( prefs (LANECOUNTATTRNAME DEFAULTATTRLANECOUNT ) ; } DEFAULTATTRLANECOUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd get ( nitroservice service nsrollbackcmd_args args ) throws Exception { nsrollbackcmd nsrollbackcmd ( ) ; ( ) ;args ( nitrowithoutquotes ( args ) ) ; nsrollbackcmd ( nsrollbackcmd )resources ( service ) ; ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int translateElementNo ( int i ) { (List ) return i ; } ; PatternRule = ( PatternRule ) this rule ; ( ; ; ) rule getElementNo ( ) ( ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String [ ] getProxyHostsWhiteList ( ) { (proxyHostsWhiteListproxyHostsWhiteList ( ) ) String ; hosts _proxyHostsWhite ( ) ; hosts ( )proxyHostsWhiteList ( hosts ) ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean addMetatypeAd ( MetatypeAd metatypeAd ) { ( metatypeAd ) this metatypeAd LinkedList MetatypeAd ( ) ; ( Metatype ad metatype ( ad getID ( ( metatype getID ( return ; this metatype ( metatype ; return ;<CODESPLIT>Adds a metatype AD .
public long skip ( long n ) throws IOException { (InputStream available ( ) ) return mInputStream skip ( n ) ; } mInputStream close ( ) ; ; mObject mClient getObject ( mBucketName mKey m ) ; (Object getData ( ) ) ; } ServiceException ) new ( ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean isSuperCall ( JCTree tree ) { Name called ( tree ) ; ( ) table ; name names _super ; } ; } }<CODESPLIT>Is this a call to super?
public static String getShortRequestDump ( String fromMethod, boolean includeHeaders, HttpServletRequest request ) { dump ( ) ; dump (Timestamp : ) ( ISO getTimestamp ( ) ) ( ) ; dump (fromMethod : ) ( fromMethod ) ( ) ; dump (Method : ) ( request getMethod ( ) ) ( '\ ) ; dump (Scheme : ) ( request getScheme ( ) ) ( '\ ) ; dump (URI : ) ( request getRequestURI ( ) ) ( '\ ) ; dump (QueryString : ) ( request getQueryString ( ) ) ( '\ ) ; dump (AuthType : ) ( request getAuthType ( ) ) ( '\ ) ; dump (RemoteAddr : ) ( request getRemoteAddr ( ) ) ( '\ ) ; dump (Scheme : ) ( request getScheme ( ) ) ( '\ ) ; dump (ContentType : ) ( request getContentType ( ) ) ( '\ ) ; dump (ContentLength ) ( request getContentLength ( ) ) ( '\ ) ; ( includeHeaders ) dump (Headers : ) ; < String > headers request getHeaderNames ( ) ; ( ( ) ) header headers ( ) ; dump (t ) ( header ) ( ) ( request getHeader ( header ) ) ( '\ ) ; } } return ( dump. toString ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validateNotEmpty ( String stringToCheck boolean trim String argumentName ) throws NullArgumentException { validate (Check argumentName ) ; ( stringToCheck ( ( stringToCheck ( ( new Null ( argumentName + IS ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static JPanel createPanelWithVerticalLayout ( ) {panel ( ;panel ( Box (panel Box YAXIS ; _panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected shouldAnalyze ( ) analyzerAnalyzer FileType fileType ( FileType analyzer ; fileTypeAnalyzer accept ( dependency getActualFile ( ) ) ; } ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void registerServiceClass ( Class serviceClass ) registeredServiceClasses ( service ( service ; Settings ServicesAvailable ( service ( ) ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public String getSectionText ( String pageTitle int sectionNumber ) throws Exception { getPage ( pageTitlervsection section ; ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] x, int [ ] y ) { ( x ) ( String format (Arrays different x x ) ) ; return 1 - Math cor ( x, y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static TileGrid getTileGridFromWGS84 ( Point point zoom ) { projection getPro ( Projection EGGE ) ; getTileGrid ( point zoom projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public List VectorLayer getVectorLayers ( ) { VectorLayer VectorLayer ( ) ; ( Layer layer layers ( layer VectorLayer ( ( VectorLayer ) layer ) ; } } list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void calcRmsd ( Point3d [ x Point3d [ ] y ) { ( centered )Product ( ) ; } xrefPoint clonePoint ( ) ;transPoint centroid ( xref ) ; ( centroid + x ) ;trans negate ( ) ; Calc translate ( Vector (trans ) xref ) ;refPoint clonePoint ( ) ;transPoint centroid (ref ) ; ( centroid + y ) ;trans negate ( ) ; Calc translate ( Vector (trans )ref ) ;Product (ref xref ) ; } calcR (sum ) ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void setSectionHeading ( Title v ) { ( Section featOkTst ( ( Section ) jcasType ) casFeatsectionHeading ) jcasType jcas throwFeatMissing (sectionHeadingdejulielabtypesSection ) ; jcasType llcas ll ( addr ( ( Section ) jcasType ) casFeatCodesectionHeading jcasType llcas llFSRef ( ) ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( InputStream is ) throws IOException SAXException ParserConfigurationException { S S ( version ) ; Operation operation ; operation parser parse ( ) ; } Sx ) ( getOperation ( ) getOperation ( ) ( ) ) ( fully parse XML into request returning ErrorResponse + ( ) + parsed + getOperation ( ) ) ; return ErrorResponse ( e getOperation ( ) getType ( ), e getErrorCode ( ) getIntValue ( ), e ( ) ) ; } new SAXException ( ( ), ) ; } } ( ( operation Request ) ) new S ( SOPERATION,A session process requests ) ; } Request = ( Request ) operation ; ( getAccount ( ) ) new S ( S MISSINGELEMENT,A request include account credentials ) ; } ( processor authenticate ( getAccount ( ) ) ) new S ( S AUTH,Authentication ) ; } ( operation SubmitRequest ) return processor submit ( req getAccount ( ), ( SubmitRequest ) operation ) ; } ( operation DeliverRequest ) return processor deliver ( req getAccount ( ), ( DeliverRequest ) operation ) ; } ( operation DeliveryReportRequest ) return processor deliveryReport ( req getAccount ( ), ( DeliveryReportRequest ) operation ) ; } new S ( S UNSOPERATION, operation request type ) ; } } Sx ) ( ( ) ) ; return ErrorResponse ( operation getType ( ), e getErrorCode ( ) getIntValue ( ), e ( ) ) ; } ) ( uncaught throwable processing request generating ErrorResponse, ) ; return ErrorResponse ( operation getType ( ), SmpErrorCode GENERIC getIntValue ( ),Generic error processing request ) ; } }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submitPayload ( String url, HttpRequestUtil. ConnectionSettings connectionSettings, String jsonPayloadObject, String pushApplicationId, String masterSecret, MessageResponseCallback callback, List < String > redirectUrls ) { ( redirectUrls ( url ) ) new PushSender ( site contains infinite redirect loop Duplicate url + url ) ; } redirectUrls ( url ) ; } HttpURLConnection http ; credentials pushApplication + + masterSecret ; encoded Base encode ( credentials ( ) ) ; http ( HttpURLConnection ) HttpRequest post ( url encoded jsonPayloadObject UTF proxy customTrustStore connectionSettings ) ; httpCode ( ) ; ( Level INFO, String (HTTP Response code from UnPush Server, ) ) ; (Redirect ( ) ) redirectURL http getHeaderField (Location ) ; ( Level INFO, String (Perform redirect, redirectURL ) ) ; submitPayload ( redirectURL pushConfiguration getConnectionSettings ( ) jsonPayloadObject pushApplicationId masterSecret callback redirectUrls ) ; } ( ) ( Level, Un Push Server status code + ) ; new PushSender ( ) ; } ( callback ) callback onComplete ( ) ; } } } ) ; } ) ( Level INFO, send push delivery request, ) ; new PushSender ( ( ), ) ; } ( http ) http disconnect ( ) ; } } }<CODESPLIT>The actual method that does the real send and connection handling
public String [ ] getChildNames ( ) { ( children children ( ) ) return EMPTYNAMES ; arr children ( ) ; ( ; < arr ; ) arr ] = ( ( RamResourceCore ) children ( ) ) getName ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object getIndex ( Object array int index ) throws UtilTargetError { Interpreter (Index array index index ) ; ( array List ) ( ( List ) array ) ( index ) ; val Array ( array ) ; return Primitive wrap ( val, Types arrayElementType ( array getClass ( ) ) ) ; } ) array ( ( ) array ) ( ) : Array ( array ) ; newTarget (Index + index + outofbounds + len, ) ; } }<CODESPLIT>Get object from array or list at index .
public static base_ add ( nitro_service client, aaakcdaccount resource ) throws Exception { aaakcdaccount addresource aaakcdaccount ( ) ; = ; keytab = keytab ; realm = realm ; addresource delegateduser = delegateduser ; addresource = ; addresource user = user ; addresource = ; return addresource add_resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void lockExclusive ( ) { ( TraceComponent ( ) tc ( ) ) SibTr ( this tclockExclusive this ) ; interrupted ; ( tryLockExclusive ( ) ) ( TraceComponent ( ) tc ( ) ) SibTr ( this tcWaiting exclusive lock ) ; wait ( 1000 ) ; } ( ) interrupted ; } } (LockCount ) ( TraceComponent ( ) tc ( ) ) SibTr ( this tcWaiting lock count to reach +Lock ) ; wait ( 1000 ) ; } ( ) interrupted ; } } ( interrupted ) Thread currentThread ( ) interrupt ( ) ; } ( TraceComponent ( ) tc ( ) ) SibTr ( this tclockExclusive ) ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public setCPOptionValue ( com. liferay. commerce. product. service. CPOptionValue cpOptionValue ; }<CODESPLIT>Sets the cp option value local service .
public inferModulePathFromType ( TypeDeclaration typeDeclaration pkg ( ; pkg? + pkg getQualifiedName ( ) replace ( '.' ) : ; }<CODESPLIT>Infers the Struts module path from the given controller class .
final int getLeapMonth ( int cycle, int yearOfCycle ) { leapMonths thisLeapMonths ( ) ; elapsedYears ( cycle ) 60 + yearCycle ; index 2 ( ( elapsedYears leapMonths ) 3 ) ; lm ; ( ( index leapMonths ) ) test leapMonths index ; ( test elapsed ) ( ( ( elapsedYears ) 3 ) ) ; } ( test elapsed ) ; } lm = leap index + ; ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet getSnippet ( Integer snippetId boolean downloadContent ) throws GitLabApiException { ( snippet ) new (snippetId ) ; } (snippets snippet ) ; Snippet snippet readEntity ( Snippet ) ; ( downloadContent ) snippet setContent (ippetContent ( snippet ( ) ) ) ; } snippet ; }<CODESPLIT>Get a specific Snippet .
public final int get ( int codePoint ) { value ; ix ; ( codePoint >= ) ( codePointxd ( codePointxdbff codePointx ) ) = index UTESHIFT ; ix = ( ix UTRIEINDEXSHIFT ) + ( codePoint & UTRIEDATA ) ; value = data ; return value ; } ( codePoint ) = index UTELSCPINDEXOFFSET + ( (xd800 ) UTESHIFT ) ; ix = ( ix UTRIEINDEXSHIFT ) + ( codePoint & UTRIEDATA ) ; value = data ; return value ; } ( codePoint highStart ) ix = ( UTRIEINDEXOFFSET UTRIEOMITBMPINDEXLENGTH ) + ( codePoint UTRIESHIFT ) ; = index ; ( codePoint UTE ) & UTEMASK ; = index ; ix = ( ix UTRIEINDEXSHIFT ) + ( codePoint & UTRIEDATA ) ; value = data ; return value ; } if ( codePointx10 ) value = data highValueIndex ; return value ; } } return errorValue ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public Object getMBeanAttributeObject ( name attrName JM MBeanServer serverBeanServer ( ; ObjectName ObjectName ( ; server getAttribute ( obj attrName ) ; }<CODESPLIT>Get MBean attribute object
public void setSelectedIndex ( selectedIndex ) { ( items ( selectedIndex selectedIndex ( argument ComboBoxsetSelectedIndex + ) ; }Selection ; selectedIndex selectedIndex ; ( selectedIndex updateText ( ) ; } update ( items ( ) ( ) ) ; } runOnGUIThreadIfExistsOtherwiseRunDirect ( Runnable ( ) { void run ( ) { ( Listener listeners listenerSelectionChanged ( selectedIndexSelection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Stats getPhotoStats ( photoId Date date Flickr getStats ( METHODGETPHOTOSTATSphotoid photoId date ) ;<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public ServiceCall < DocumentStatus > getDocumentStatus ( GetDocumentStatusOptions getDocumentStatusOptions ) { notNull ( getDocumentStatusgetDocumentStatus cannot be ) ;environmentscollectionsdocuments } ; pathParameters getDocumentStatusOptions environmentId ( ) getDocumentStatusOptions collectionId ( ) getDocumentStatusOptions documentId ( ) } ; RequestBuilder RequestBuilder ( RequestBuilderUrl (Point ( ) pathParameters ) ) ; query (version versionDate ) ; Map < > sdkHeaders getSHeaders (discoveryvgetDocumentStatus ) ; ( ( ) ) header ( header getKey ( ) header ( ) ) ; } header (Acceptapplicationjson ) ; return createServiceCall ( builder. build ( ), ResponseConverterUtils. getObject ( DocumentStatus. class ) ) ; }<CODESPLIT>Get document details .
public Pager Issue getClosesIssues ( Object projectIdOrPath Integer mergeRequestIid items ) GitLabApiException Pager Issue > ( this Issue itemsPerPageprojects getProjectIdOrPath ( projectIdOrPath )mergerequests mergeRequestIidclosesissues ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class <? > clazz, String msg, Exception... e ) { ( DEBUG ) exception ; ( ) ( ) ; ( ) ; e ( ) ; flush ( ) ; exceptionStrexception + sw ( ) ; } System println ( + sSdf format ( Date ( ) ) + + + "[" + clazz getSimpleName ( ) + + msg + + exception ) ; } }<CODESPLIT>To output the error log message to the error out
public static HtmlTree TH ( HtmlStyle styleClass String scope Content body ) { HtmlTree html HtmlTree ( HtmlTag TH ( ; ( style htmltree ( style ;tree ( Html SCOPECheck ( scope ) ) ; htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtainDividerMargin ( int themeResourceId ) { Typed typedArray ( ) getTheme ( ) obtainStyAttributes ( theme attr materialDialogDividerMargin } ) ;Divider ( typedArray ( ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void setDefaultButton ( SBaseButton button ) { getScreenView ( ( button button getScreenView ( ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { ( k ( root ( ; RedBlackTreeNode Key Value select ( root k ) ; x getKey ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( RequestHandler request ) { ( ) ( ) ;SessionRequests ( ) ; } ( ) ( ) ; } }<CODESPLIT>Adds a request handler to this queue .
public T T withPrintWriter ( OutputStream stream ClosureParams ( value SimpleType. classjavaPrintWriter" Closure T closure )Writer (PrintWriter ( ) closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void addRegexRoute ( urlPattern Class Actor actorClass ) RouteAlreadyMapped { addRoute ( Route ( actor ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void sendQueuedEvents ( KeenProject project, KeenCallback callback ) { ( isActive ) handleLibraryInactive ( callback ) ; return ; } ( project defaultProject ) handleFailure ( ( project specified no project ) ) ; return ; } (NetworkConnected ( ) ) KenLogging ( sending events no network connection +Events retried time `sendQueuedEvents called ) ; handleFailure ( callback Exception (Network connected ) ) ; return ; } KProjectProject ( project?Project : project ) ; projectIdProject getProjectId ( ) ; > > eventHandles eventStoreHandles ( projectId ) ; > > > events buildEvent ( projectId eventHandles ) ; publishAll (Project events ) ; ( ) handleAddEventsResponse ( eventHandles ) ; } ) KenLogging ( handling batch publish + ( ) ) ; } } handleSuccess ( callback ) ; } ) handleFailure ( callback ) ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public getMaxQueuedConnections ( (? : ( ( ( getQueue ( ArrayBlockingQueue? ( ( ArrayBlockingQueue ( ) getQueue ( ) ) ( ) ( ( ArrayBlockingQueue ) ( ) getQueue ( ) )Capacity ( ) : ) ;<CODESPLIT>this should only be used as an estimate
final public AuxiliaryTree TreeRoot ( boolean requiresFoot ) throws ParseException { SimpleNode jj SimpleNode ( JJTTRE ) ; jj ; jjtree openNodeScope ( jj ) ; Tree ; TreeNode ( ) ; jjtree closeNodeScope ( jj ) ; = ; ( ) ATree ( requiresFoot ) ; } } ) ( jj ) jjtree clearNodeScope ( jj ) ; = ; } jjtree popNode ( ) ; } ( jj RuntimeException ) ( ) ( RuntimeException ) jj ; } } ( jj ParseException ) ( ) ( ParseException ) jj ; } } ( ) ( Error ) jj ; } } ( jj ) jjtree closeNodeScope ( jj ) ; } } new (Missing return statement function" ) ; }<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
INodeDirectory addToParent ( byte [ ] src, INodeDirectory parentINode, INode newNode, boolean propagateModTime, int childIndex ) { INodeDirectory newParent ; ( ) ; newParent rootDir addToParent ( src newNode parentINode propagateMod childIndex ) ; cacheName ( newNode ) ; } ) return ; } ( newParent ) ; ( newNode isDirectory ( ) ) INode ( INode ) newNode ; BlockInfo blocksBlocks ( ) ; ( ; blocks ; )FBlock ( ( ) blocksINodeLoading ( blocksF ) ) ; } } } write ( ) ; } return newParent ; }<CODESPLIT>Add node to parent node when loading the image .
public void setModel ( final MindMap model final boolean notifyModelChangeListeners ) { ( ) ; ( elementUnderEdit ) Utils. safeSwingBlockingCall ( new Runnable ( ) { void run ( ) {Edit ( ) ; } } ) ; } selectedPaths ( ) ; ( Topic this selectedTopics selectedPaths ( getPosition ( ) ) ; } this selectedTopics clear ( ) ; MindModel model ; this model assertNotNull (Model model ) ; ( PanelPlugin MMapPluginRegistry ( find ( PanelPlugin onPanelModelChange ( thisModel this model ) ; } doLayout ( ) ; re ( ) ; selection ; (Path selectedPaths Topic topic model find ( ) ; ( topic ) selection ; } ( Mind isHidden ( topic ) ) this selectedTopics ( topic ) ; } } ( selectionChanged ) fireNotificationSelectionChanged ( ) ; } repaint ( ) ; } this ( ) ; ( notifyModelChangeListeners ) fireNotificationindMapChanged ( ) ; } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public OperationFuture LoadBalancer delete ( LoadBalancer loadBalancer ) LoadBalancer loadBalancer ( loadBalancer ; loadBalancer delete ( loadBalancerMetadata ( loadBalancerMetadata ( ; OperationFuture > ( loadBalancer NoWaitingJobFuture ( ) ) ; }<CODESPLIT>Delete load balancer
public GetSnapshotResponse getSnapshot ( GetSnapshotRequest request ) { ( request ) ; check ( requestnapshot ( ) snapshot no ) ; InternalRequest internalRequest this ( request Http GET SNAPSHOT requestnapshot ( ) ) ; return invokeHttpClient ( internalRequest, GetSnapshotResponse ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
@ ( "checkstyle:emptyblock" ) void excludeLoggers ( ) { BugsnagAppender addExcludedLoggerPattern (orgapachecatalcoreContainerBase + "\\Tomcat ) ; BugsnagAppender addExcludedLoggerPattern (orgeclipsejettyserverHttpChannel ) ; BugsnagAppender addExcludedLoggerPattern (iounderrequest ) ; } ( NoClassDef ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R1 relationships ) { ( base ) throw new AssertionError ( "" ) ; } ( ; < base ; ) ( base ) ; } IConceptSet = data = SparseConceptHashSet ( ) ; set addAll ( base i ) ; ( relationships data ) set removeAll ( relationships data i ) ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static < E > E getEndpoint ( Class < E > type, String name, Reflections reflections ) { E ; Class E foundClasses reflection getSubTypes ( type ) ; Set < Class <? E > > endpointClasses < > ( ) ; ( Class E clazzClasses ) ( isAbstract ( clazz ( ) ) ) endpointClasses add ( clazz ) ; } } Iterator < Class < E iterator endpointClasses iterator ( ) ; ( ( ) ) Class <? E > ( ) ; (IgnoreCase ( getName ( )comgithubdavidcarbonrestolroutes ) ) iterator remove ( ) ; } } ( endpointClasses ( ) ) ( endpointClasses ( ) ) (Warning found multiple candidates endpoint endpointClasses ) ; } endpointClasses iterator ( ) ( ) ( ) ; } ( ) ( cannot instantiate endpoint name endpointClasses iterator ( ) ( ) ) ; e ( ) ; } } return ; }<CODESPLIT>Locates a single endpoint class .
public final void writtenStartedFlush ( AOStream stream, Item startedFlushItem ) { if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr entry ( tc,writtenStartedFlush ) ; key = SIMPUtils getRemoteGetKey ( stream getRemoteMEUuid ( ), stream getGatheringTargetDestUuid ( ) ) ; StreamInfo sinfo = streamTable ( key ) ; if ( ( sinfo ) sinfo streamId ( stream streamId ) ) { synchronized ( s ) { sinfo item = ( AOStartedFlushItem ) startedFlushItem ; } } { e = ( (, ObjectAnycastOutputHandler,58" }, null ) ) ; ( e,comsibprocessorimplAnycastOutputHandlerwrittenStartedFlush,8654, this ) ; SibTr exception ( tc, e ) ; SibTr error ( tc,, ObjectAnycastOutputHandler"," } ) ; if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr ( tc,writtenStartedFlush, e ) ; throw e ; } if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr ( tc,writtenStartedFlush ) ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static List < Report getDetailSubreports ( ReportLayout reportLayout ) { Report subreports Report ( ) ; Band band reportLayout getDetailBand ( ) ; ( rows band getRow ( ) ; rows ; ) BandElement list band getRow ( ) ; ( list ( ) ; ; ) BandElement ( ) ; ( ReportBandElement ) subreports ( ( ( ReportBandElement ) ) getReport ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public ApiAppList getApiApps ( HelloSign ApiAppList ( ( auth ) ( BASEURI + APIAPPURI )Json ( ) ) ;<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detachAgent ( Object pVm ) { (Vm ) Class clazzVm getClass ( ) ; method clazz getMethod (detach ) ; ( ) ; method invoke (Vm ) ; } } ) new Processing ( " detach",, options ) ; } ) new Processing ( " detach",, options ) ; } ) new Processing ( " detach",, options ) ; } }<CODESPLIT>Detach from the virtual machine
public ObjectGraph excludeClasses ( Class <... classes ) { ( classes ( ) new (Null class allowed ) ; } excludedClasses ( ) ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void setSampling ( double min double max int total ) { this sample min ; this sample ; thisSamples = ; scoresSamples ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void calcProductAtVar ( int v, VarTensor prod, int excl1, int excl2 ) { ( ; bgT ( ) ; ) ( excl excl ) } VarTensorMsg = msgs bg opposingT ( ) ; elemMultiply (Msg ) ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected ItemState findLastItemState ( QPath itemPath ) { ( itemAddStates ( ) ; ; ) ItemStatestate itemAddStates ( ) ; ( getData ( ) getQ ( ) ( item ) ) ; } return ; }<CODESPLIT>Find last ItemState .
public void addDispatcher ( String dispatcherId AbsActorDispatcher dispatcher ) { dispatch ( dispatch ( dispatcher ; } dispatch ( dispatcher dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
private void sgdTrain ( ClassificationDataSet D, MatrixOfVecs W, Vec b, int sign_mul, boolean parallel ) { IntList order IntList ( D size ( ) ) ; List addRange ( order D size ( ) ) ; lambdaadj lambda ( D size ( ) epochs ) ; owned K ; assignedpositiveinstances ; assignments D size ( ) ; Arrays fill ( assignments, ) ; Vec dots DenseVector ( W rows ( ) ) ; t ; ( epoch ; epoch < epochs ; epoch ) shuffle ( order ) ; ( order ) t ; eta = ( lambdaadj t ) ; Vec x = D getDataPoint ( i ) getNumericalValues ( ) ; y ( D getDataPointCategory ( ) 2 ) sign ; b copyTo ( dots ) ; W multiply ( x,, dots ) ; ( yi ) ( k ; k < K ; k ) if ( ( k ) ) W getRowView ( k ) mutableSubtract ( eta, x ) ; b increment ( k, eta ) ; } } kmax ; ( k ; k < ( ) ; k ) if ( ( k ) ( kmax ) ) kmax k ; if ( ( kmax ) < ) z ASSIGN ( dots kmax owned assignments assignedpositiveinstances ) ; W getRowView ( z ) mutableAdd ( eta, x ) ; b increment ( z, eta ) ; ( assignments ) assignedinstances ; owned assignments ; z ; assignments = z ; } } W mutableMultiply ( t ) ; b mutableMultiply ( t ) ; } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype get ( nitroservice service ) Exception appfwfield appfwfield ( ; appfwfieldtype ( appfwfieldtype )resources ( service ) ; ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public Future Channel create ( Promise Channel channelReadyPromise ) { delay ( ) ; channelReadyPromise. addListener ( new GenericFutureListener Future Channel ( ) { void operationComplete ( Future Channel future ) { ( ) : ( ( delayCONNECT )CONNECT ) ; ApChannelDelay compareAndSet ( delayDelay ) ; } } ) ; this. bootstrapTemplate. config ( ). group ( ). schedule ( new Runnable ( ) { void run ( ) { Bootstrap bootstrap ApnsChannel bootstrapTemplate clone ( ) channel ( AugmentReflectChannel ( ClientChannelChannel ( ApnsChannel bootstrapTemplate ( ) group ( ) ) CHANNELPROSEATTRIBUTE channelReady ) ) ; Channel connect bootstrap connect ( ) ; connectFuture. addListener ( new GenericFutureListener ChannelFuture ( ) { void operationComplete ( ChannelFuture future ) { ( (Failure ( channel ( ; } } } ) ; connectFuture. channel ( ). closeFuture ( ). addListener ( new GenericFutureListener ChannelFuture ( ) { void operationComplete ( ChannelFuture future ) { channelReady tryFailure ( (Channel closed HTTP pre completed ) ) ; } } ) ; } } ) ; channelReadyPromise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List < String > loadOptions ( String optionFileName ) { > args > ( ) ; File optionFile File ( optionFileName ) ; stringWriter ( ) ; InputStream inputStream ( optionFile ) ; copy ( inputStream stringWriter ) ; } ( ) ( reading options file + ( ) ) ; System ( ) ; } ( ) ( reading options file + ( ) ) ; System ( ) ; } string stringWriter ( ) ; stringTokenizer ( string ) ; ( string ( ) ) args add ( stringTokenizer ( ) ) ; } return args ; }<CODESPLIT>Load options from a file
public void runJob ( ) { thisJob this jobQueue take ( ) ; Execution context Execution ( ) ; thisManager initialize ( context ) ; } Execution ) new ( initialize Job + this currentJob + execution context", ) ; } thisJob run ( ) ; } ) } this execution remove ( ) ; } }<CODESPLIT>Execute one job .
public Response bind ( name Object model ) ( ( model ) ; this ; }<CODESPLIT>Binds an object to the response .
public byte [ ] getByteArray ( Integer offset ) { ; ( offset ) mmap ( ) ; } ( ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ ] getMetaMethods ( ) { MetaClass metaClass Invok getMetaClass ( objectUnderInspection ) ; metaMethods meta getMetaMethods ( ) ; metaMethods ( ) ; ; ( Iterator metaMethods ( ) ; ( ) ; ) Meta metaMethod ( MetaMethod ) ( ) ; methodInfo ( metaMethod ) ; } return ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ ] parse ( String pollers ) { periods pollers split ( ) ; result periods ; errors ; Logger = LoggerFactory getLogger ( Pollers class ) ; ( ; < periods ; ) period periods ; result i = Long parseLong ( period ) ; ( result ) error (Invalid polling interval must positive, period ) ; errors ; } } ( NumberFormatException ) { error ( "Cannot parse as a long, period, e getMessage ( ) ) ; errors ; } } ( errors periods ) ( "Using a default configuration for poller intervals, join ( DEFAULTPERIODS ) ) ; return DEFAULT_PERIODS ; } return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void setFooter ( String key, String value ) { Objects ( value ) ; ;Footer ; ( _footerKeys ( ) ; ; )Key _footerKeys ( ) ; (Key ( key ) ) (Footer )footerKeys remove ( ) ;footerValues remove ( ) ; }Footer ; _footerValues ( value ) ; } } } (Footer ) _footerKeys ( key ) ; _footerValues ( value ) ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void addAttribute ( String name, final String value ) { (elemContextstartTag ) patched patch ( ) ; localName getLocalName ( patched ) ; uri getNamespaceURI ( patched ) ; addAttributeAlways ( uri localName patchedCDATA value ) ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public MimeMessage createMimeMessage ( Session session ) throws MessagingException { ( ( htmlPart ( textPart new (Missing email content ) ; } MimeMessage MimeMessage ( session ) ; ( subject ) ; ( Internet ( ) ) ; (MultiPart ( ) ) ;Recipients ( TO Internet ( recipients ) ) ; msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static ForwardCurveInterpolation createForwardCurveFromMonteCarloLiborModel ( String name, LIBORModelMonteCarloSimulationModel model, double startTime ) throws Calcul { timeIndex model getTime ( ) ; RandomVariable > libors > ( ) ;LibIndex modelLibPeriodDisc ( ) getTimeIndexNearestGreater ( ) ;Lib modelLibretization ( ) getTime (LibIndex ) ; (LibTime startTime ) libAtIndex ( modelLIB ( startTime startTimeLib ) ) ; } timesLib? ( modelLibors ( )LibIndex ) : ( modelLibors ( )LibIndex + ) ; times = ; indexOffsetLib? : ; ( firstLib ; modelLib ( ) ; ) libAtIndex ( modelLIB ( timeIndex ) ) ;LibIndex + index modelLibretization ( ) getTime ( ) startTime ; } RandomVariable libors liborsIndex ( RandomVariable liborsIndex ( ) ) ; return ForwardCurveInterpolation. createForwardCurveFromForwards ( name, times, lib, model. getLiborPeriodDiscization ( ). getTimeStep ( firstLiborIndex ) ) ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public ServiceCall < Void > deleteWord ( DeleteWordOptions deleteWordOptions ) { notNull ( deleteWorddeleteWord cannot be ) ;customizationswords } ; pathParameters deleteWordOptions customizationId ( ) deleteWordOptions word ( ) } ; RequestBuilder RequestBuilder delete ( RequestBuilder constructHttpUrl (Point ( ) pathParameters ) ) ; Map < > sdk getSHeaders (texttopeechvdeleteWord ) ; ( ( ) ) header ( header getKey ( ) header ( ) ) ; } return createServiceCall ( builder. build ( ), ResponseConverterUtils. getV ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean tryMove ( float x, float y ) { playerX + x ; player + ; ( blocked ( new new ) ) ( blocked ( new player ) ) ( blocked ( playerX new ) ) return ; } player ; return ; } } playerX ; return true ; } } playerX ; player ; return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { messages clear ( ) ; dataLogger prepareRead ( ) ; dataLogger recover ( ) ; } new Delegated ( ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clearSources ( ) {Audio ( GRAudioSource sourceSources source ( ) ; }AudioSources clear ( ) ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
 (" ) public static < V NumberVector NumberVector. Factory < V guessFactory ( SimpleTypeInformation < V > in ) { NumberVector Factory V ; ( VectorInformation ) factory ( NumberVector Factory V ) ( ( VectorInformation V ) ) getFactory ( ) ; } ( factory ) Field fClass ( ) getField (FACTORY ) ; ( NumberVector Factory V ) f ( ) ; } ) LoggingUtil (Cannot determine type +Class ( ) ) ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { ( rootDir ( ) ) rootDir mkdirs ( ) ; ( rootSave ( ) ) rootSave mkdirs ( ) ; ( paths ) paths = newHashMap ( ) ; ( labelRootDirs ) labelRootDirs = ( ) ; ( ; numLabels ; ) paths put ( > ( ) ) ; labelRootDirs ( ( rootDir valueOf ( ) ) ) ; } ( ( DataSet dataSetIterator ( ) ; ( miniBatchSize ) miniBatchSize = numExamples ( ) ; ( ; numExamples ( ) ; ) DataSet currExample ( ) ; ( labelRootDirs ( currExample outcome ( ) ) ( ) ) labelRootDirs ( currExample outcome ( ) ) mkdirs ( ) ; File example File ( labelRootDirs ( currExample outcome ( ) ) valueOf ( paths ( currExample outcome ( ) ) ( ) ) ) ; currExample save ( example ) ; paths ( currExample outcome ( ) ) ( example ) ; } } numsSaved ; ( ( DataSet > miniBatch > ( ) ; ( miniBatch ( miniBatchSize ( ( ; numLabels ; ) ( paths ( ) paths ( ) ( ) ) DataSet DataSet ( ) ; load ( paths ( ) remove ( ) ) ; miniBatch add ( d ) ; } paths remove ( ) ; } } ( rootSave ( ) ) rootSave mkdirs ( ) ; ( miniBatch ( ) ) DataSet merge DataSet merge ( miniBatch ) ; ( dataNormalization ) dataNormalization transform ( merge ) ; merge save ( File ( rootSaveDir format (datasetbin numsSaved ) ) ) ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static isunixtimeleap ( double unixTime ) { gps unix ; gpsaps ( gps ) ;leap ( gpsTime ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void setSunXMLHeaders ( Marshaller aMarshaller sXMLHeaders ) { SXMLHEADERS ;Property (MarshallerPropertyNameXML ) ; }<CODESPLIT>Set the Sun specific XML header string .
private void sendKeepAliveBridgeMessage ( int appId String bridgeId String token final CallStatsHttp2Client httpClient ) { apiTS ( ) ; BridgeKeepAliveMessage message BridgeKeepAliveMessage ( bridge apiTS ) ; requestMessage ( message ) ; httpClient. sendBridgeAlive ( keepAliveEventUrl token, requestMessageString, new CallStatsHttp2ResponseListener ( ) { void onResponse ( Response response ) { code ( ) ; Bridge keepAlive ; body ( ) string ( ) ; keepAlive fromJson ( BridgeKeepAlive ) ; } ) ( ) ; new ( ) ; } Json ) (Json Syntax + ( ), ) ; ( ) ; new ( ) ; } httpClientDis ( ) ; ( CallStats RESPONSESTATUSSUCCESS ) keepAliveStatusListener onSuccess ( ) ; } ( CallStats INVALIDAUTHENTICTOKEN ) stopKeepAliveSender ( ) ; keepAliveStatusListener onKeepAlive ( CallStatsErrors AUTH keepAlive ( ) ) ; } httpClientDis ( ) ; } } void onFailure ( Exception e ) { (Response + ( ) ) ; httpClientDis ( ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public StreamingOutput getResource ( String resourceName long nodeId Map < QueryParameter String queryParams ) throws JaxRxException { StreamingOutput sOutput = new StreamingOutput ( ) { void write ( OutputStream output ) throws IOException JaxRxException { revision queryParams ( QueryParameter REVISION ) ; wrap queryParams ( QueryParameter WR ) ;NodeId queryParams ( QueryParameter OUTPUT ) ; wrap ( wrap ) : wrap ( Y ) ; node (NodeId ) :NodeId ( Y ) ; rev revision : ( revision ) ; serialize ( resourceName nodeId rev node wrap ) ; } } ; sOutput ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static ManagedEntity [ ] createManagedEntities ( ServerConnection sc, ManagedObjectReference [ ] mors ) { (ors ) return new ManagedEntity ] ; } ManagedEntity mes ManagedEntity ; ( ; m ; ) mes createExactManagedEntity ( sc m ) ; } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static Function String String createStringTemplateSource ( I_CmsFormatterBean formatter Supplier CmsXmlContent contentSupplier ) { key -> ; ( formatter formatter getAttributes ( ) ( key ) ; } ( CmsXmlContent content contentSupplier ( ) ; ( content content getHandler ( ) getParameter ( key ) ; } } ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static ByteBuffer createReadWriteMessage ( final byte opCode final int logicalBlockAddress final short transferLength ) { allocate (CDB ) ; put ( opCode ) ; cdb position (BLOCK ) ; ( logicalBlock ) ; position ( TRANSFER ) ; put ( transfer ) ; rewind ( ) ; cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( ByteBuffer [ dsts int offset int length ) throws IOException {App ( ) ; ( ; } ByteBuffers move ( appRead dst offset ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void setInt ( MemorySegment [ segments int offset int value ) { (Segment ( segments offset 4 segments ( ) ; } setIntMultiSegments ( segments offset ) ; } }<CODESPLIT>set int from segments .
public Optional User getOptionalUser ( username ( Optional ( getUser ( username ) ) ) ; } GitLabApiException ( GitLabApiOptional (ae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void registerRateLimiterComponent ( ) { componentPropName GatewayConfigProperties COMPONENTPREFIX + IRateLimiterComponent getSimpleName ( ) ;Property ( componentPropName, ESRateLimiterComponent getName ( ) ) ;Property ( componentPropName +clienttype,jest ) ;Property ( component +protocol "${apanesprotocol ) ;Property ( component +host "${apaneshost ) ;Property ( component + "${apanes ) ;Property ( component +username "${apanesusername ) ;Property ( component +password "${apanespassword ) ; }<CODESPLIT>The rate limiter component .
public Point3d getCoordinatesFromGridPoint ( int gridPoint ) { dimCounter ; Point3 point Point3 ( ) ; ( z ; z < grid ; z ) ( ; < grid ; ) ( ; < grid ; ) ( dimCounter gridPoint ) point x = minx + latticeConstant x ; point y = min + latticeConstant y ; point z = min + latticeConstant z ; return point ; } dimCounter ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void setColor ( Color COLOR ) { ( color COLOR ; } color ( COLOR ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void releaseEvent ( EventId eventId ) Exception Lock VWrapper shared getEvent ( eventId ) ;Wrapper (Wrapper release ( shared removeEvent ( eventId ) ; } shared upsertEvent ( eventIdWrapper ) ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String toSql ( boolean showParameters ) { sql ; (Paginator ) sql getDect ( ) formSelect ( fullQuery orderBy limit offset ) ; } sql fullQuery? fullQuery : metaModel getDial ( ) formSelect ( metaModel getTableName ( ) subQuery orderBy limit offset ) ; } ( showParameters ) ( sql ) ( parameters ) ; join ( params ) ; sql ( ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source getSourceFromUriResolver ( StylesheetHandler handler ) TransformerException { Source ; TransformerImpl processor handlerStylesheetProcessor ( ) ;Resolver processorResolver ( ) ; ( href getHref ( ; base getBaseIdentifier ( ; resolve ( href base ) ; } s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public String getTitle ( ) { ( Journal featOkTst ( ( Journal ) jcasType ) casFeattitle ) jcasType jcas throwFeatMissing (titledeelabtypesJournal ) ; return jcasType llcas ll ( addr, ( ( JournalType ) jcasType ) casFeatCodetitle ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static Val of ( Object o ) { ( Val Cast as ( ) ; } Val ( ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void addContextTerms ( SparseDoubleVector meaning Queue < String words int distance ) { ( term words ( term ( Iterator EMPTYTOKEN dimension basis ( term ) ; ( dimension ; meaning ( dimension weight weight ( distance windowSize ) ) ; distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public ArrayList < View getViews ( ) { ( commandLogging ) ( config commandLoggingTagViews ) ; } return viewFetcher getViews (, ) ; } ) ( ) ; return ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private E WeightedEdge SparseDoubleVector getVertexWeightVector ( WeightedGraph E g vertex ) { ( keepWeightVectors Sparse weight vertexWeight ( vertex ) ; ( weightVec weight vertexWeightVector ( vertex ) ; ( weightVec weightVec computeWeight ( vertex ) ; vertexWeight ( vertex weightVec ) ; } } } weightVec ; } computeWeightVector ( vertex ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static int fillRows ( Row [ ] rows, TypeDescription schema, VectorizedRowBatch batch, int [ ] selectedFields ) { rows ( ( ) batch count ( ) rows ) ; TypeDescription field schema getChildren ( ) ; ( ; selectedFields ; )c selectedFields field ; readField ( rows field fieldTypes (c ) batch colsc rows ) ; } return rowsToRead ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public ICalProperty getProperties ( component IProperty > ( component getProperties ( ) values ( ) ) ;<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double computeTauAndDivide ( final int j final int numRows final double [ ] u final double max ) { tau = ; ( ; numRows ; ) = u ; tau ; } tau ( tau ) ; ( u ) tau tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic getEpic ( String epicKey Map < String Epic epicMap ) { url featureSettings getJBaseUrl ( ) ( featureSettings getJBaseUrl ( ) ( ) : ) format ( EPICREST ep ) ; ResponseEntityEntity makeRestCall ( url ) ;Entity getBody ( ) ; JSONObject issue ( JSONObject ) parser parse ( responseBody ) ; ( issue ) ; } saveEpic ( issue, epicMap, ) ; } ) (Parser parsing teams pe ) ; } Hygia ) ( calling JIRA API ) ; } ; }<CODESPLIT>Get Epic using Jira API
public Serializable getLayoutConstraints ( WComponent child ) PanelModel model getComponentModel ( ; layoutConstraints model layoutConstraints ( child ) ; } ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map < String, Set < String > > getReverseMap ( ) { Map entries map ( ) ; Map < Set < > > rMap < Set < > > ( entries ( ) ) ; ( Map Set me entries ) k me ( ) ; < transList me ( ) ; ( trans transList ) Set entry rMap ( trans ) ; ( ) Set < > LinkedHashSet < > ( 6 ) ; toAdd add ( k ) ; rMap put ( trans toAdd ) ; } add ( k ) ; } } } return rMap ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential setRefreshToken ( String refreshToken ) { lock lock ( ) ; ( refreshToken ) checkArgument ( json transport clientAuthentication tokenServerEncodedUrlPlease and callJsonTransport setClientAuthentication + andServerUrlsetTokenServerEncodedUrl ) ; } this refreshToken = refreshToken ; } lock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void makeCurrent ( EGLSurface eglSurface ) { (EGLDisplay EGL14 EGLDISPLAY ) ( makeCurrent w display ) ; } ( EGL14Make (EGLDisplaySurfaceSurfaceEGLContext ) ) new (eglMake" ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public T T navigateSafe ( T defaultValue Object source Object paths navigateOrDefault ( defaultValue source paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clearCache ( CommerceWarehouseItem commerceWarehouseItem ) { entityCache remove ( CommerceWarehouseItemModelImpl ENTITY CommerceWarehouseItem commerceWarehouseItem ( ) ) ; finderCache clearCache ( FINDERIN ) ; finderCache clearCache ( FINDERIN ) ; clearUniqueFindCache ( ( CommerceWarehouseItemModelImpl ) commerceWarehouseItem ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String input String output ) throws MPXJException IOException { MPP MPP ( ) ;project reader read ( input ) ;Data ; project ; mpFileType Number (project getProjectProperties ( )FileType ( ) ) ; ( mp project = ;Data =FixDeFix ; } project = ;Data =VarData ; } project = ;Data =VarData ; } project = ;Data =VarData ; } : new ( file type + mp ) ; } } ( input ) ; POFSFileSystem POFSFileSystem ( ) ; close ( ) ; DirectoryEntry root fs getRoot ( ) ;projectDir ( DirectoryEntry ) root getEntry ( project ) ; replacements ( ) ; ( Task task mprojectTasks ( mapText ( task ( ) ) ; } processReplacements ( ( ( DirectoryEntry )projectDir getEntry (TBkTask ) )Data ) ; clear ( ) ; ( Resource resource mproject getResources ( mapText ( resource ( ) ) ; mapText ( resource getInitial ( ) ) ; } processReplacements ( ( DirectoryEntry )projectDir getEntry (TBkR )Data replacements ) ; replacements clear ( ) ; ProjectProperties propertiesproject getProjectProperties ( ) ; mapText ( properties getProjectTitle ( ) replacements ) ; processReplacements (projectDirProps replacements ) ; replacements clear ( ) ; mapText ( properties getProjectTitle ( ) replacements ) ; mapText ( properties getSubject ( ) replacements ) ; map ( propertiesAuthor ( ) ) ; mapText ( propertieswords ( ) replacements ) ; map ( propertiesComments ( ) ) ; processReplacements ( rootSummaryInformation replacements ) ; replacements clear ( ) ; mapText ( properties getManager ( ) replacements ) ; map ( properties ( ) ) ; mapText ( properties getCategory ( ) replacements ) ; processReplacements ( rootDocumentSummaryInformation replacements ) ; os ( output ) ; fs writeFilesystem ( os ) ; os flush ( ) ; os close ( ) ; fs close ( ) ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void setRollbackOnly ( ) { ( ) ; ( tc ( ) ) Tr ( tcsetRollback this ) ; } LocalTransactionCoordinator lCoord getLocalCoord ( ) ; ( lCoord ) lCoordRollbackOnly ( ) ; }ServiceRollbackOnly ( ) ; } ( ) (, CLASS +setRollbackOnly,, this ) ; new IllegalStateException ( " active transaction" ) ; } } ( tc ( ) ) Tr ( tcsetRollbackOnly ) ; } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse404Response ( final String content ) { ( content (reason\":missing ) ) ; } (Design document content ) ; return ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private ListenableFuture < writeBlocksToTargets ( Collection < DBBPool. BBContainer outputBuffers, int [ ] serialized ) { (tableTasks ( ) serialized ) ; ( outputBuffers ( ) serialized ) ;Future? writeFuturesenableFuture? ( outputBuffers ( ) ) ; Iterator DBBPool BBContainer container outputBuffers ( ) ; serialized ; ( SnapshotTableTask task mtableTasks ) DBPool BBContainer container container ( ) ; ByteBuffer container ( ) ; limit ( serialized serializedIndex + tasktarget getHeader ( ) ) ; position ( ) ; Callable DBBPool BBContainer valueTarget Callables ( container ) ; ( taskfilters ) ( SnapshotDataFilter filter task mfilters ) valueTarget filter filter ( valueTarget ) ; } }enableFuture? writeFuture tasktarget write (Targettable ) ; ( writeFuture ) writeFutures ( writeFuture ) ; } } return F allAsList ( writeFutures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private isTerminal ( IAtom atom Map IAtom Integer atomToIndex ) { graph atom ( atom ) length ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler < AsyncResult < createUndeployHandler ( final Message < JsonObject message ) { return Handler < AsyncResult < Void > > ( ) void handle ( AsyncResult < result ) { ( ( ) ) reply ( ( ) (status ) ( ( ) ( ) ) ) ; } message reply ( ( ) (status ) ) ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public PhotoAllContext getAllContexts ( String photoId ) throws FlickrException { PhotoSetList PhotoSet >List PhotoSetList < PhotoSet > ( ) ; PoolList < Pool > poolList PoolList < Pool > ( ) ; PhotoAllContextContext PhotoAllContext ( ) ; Map < > parameters < > ( ) ; parameters put (method METHODGETALLCONTEXT ) ; parameters put (photoid photoId ) ; ( getPath ( ) parameters shared ) ; ( ( ) ) new Flickr ( response ( ), response ( ) ) ; } Collection < Element > photosElement getPayloadCollection ( ) ; ( Element photosElement ) (TagName ( ) (set ) ) PhotoSetset PhotoSet ( ) ;set setTitle ( setElement (title ) ) ;set ( setElement ( ) ) ;set setId ( setElement ( ) ) ;set setF ( setElement ( ) ) ;setPrimary ( setElement ( ) ) ;setServer ( setElement ( ) ) ;set setViewCount ( ( setElement (viewcount ) ) ) ;setCommentCount ( ( setElement (commentcount ) ) ) ;set setCount ( ( setElement (countphoto ) ) ) ;set setCountVideo ( ( setElement (countvideo ) ) ) ; setList add (set ) ;ContextSetList (List ) ; } (TagName ( ) (pool ) ) Pool pool Pool ( ) ; pool setTitle ( setElement (title ) ) ; pool setId ( setElement ( ) ) ; pool setUrl ( setElement ( ) ) ; pool setIconServer ( setElement ( ) ) ; pool setIconF ( setElement ( ) ) ; poolMemberCount ( ( setElement ( ) ) ) ; poolPoolCount ( ( setElement (count ) ) ) ; poolList add ( pool ) ;ContextPoolList ( poolList ) ; } } return allContext ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map < String, Object > getFieldData ( Map < String, Object > properties ) { prop ; ( properties ) prop ( ) ; ( ; ; ) strFieldNumber DBParams FIELD + ( ) ; strFieldName ( ) properties ( strFieldNumber ) ; (FieldName ) ; Record record this ( ) ; (FieldName ( '.' ) ) record this getRecord ( strFieldName ( strFieldName ( '.' ) ) ) ; strFieldName strFieldName ( strFieldName ( '.' ) + ) ; } BaseField field ; ( record ) field record getField (FieldName ) ; ( field )Return put (FieldNumber field getData ( ) ) ; } } return propReturn ; }<CODESPLIT>GetFieldData Method .
protected void connect ( InetAddress address port ) Socket BlockGuard getThreadPolicy ( )Network ( ) ; connect ( ) ; connected ; connected ; connected ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char getEscaped ( ) { pos ; ( pos ) new IllegalStateException ( " end of DN " + dn ) ; } ( chars pos ) '"' '\\' ',' '<' '>' '#' : : '*' : case '%' : case '_' : chars pos ; default : return getUTF ( ) ; } }<CODESPLIT>returns escaped char
private static String cutOffValidationMatchersPrefix ( String expression ) { ( expression ( Citrus VALIDMATCH expression ( Citrus VALIDMATCH expression substring ( Citrus VALIDATIONMATCHERPREFIX ( ), expression ( ) Citrus VALIDATIONMATCHERSUFFIX ( ) ) ; } expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public SortedSet < TypeElement > implementingClasses ( TypeElement typeElement ) { SortedSet TypeElement get ( implementingClasses typeElement ) ; SortedSet TypeElement intf allSubClasses ( typeElement ) ; Iterator TypeElement subInterfaces intf iterator ( ) ; ( sub ( Iterator TypeElement implementingClasses implementingClasses ( subInterfaces ( ) ) iterator ( ) ; ( implementingClasses ( TypeElement implementingClasses ( ) ; ( ( ) ) add ( ) ; } } } return ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ( ValidationResult validation ) { validation ; ( validate ; ( validation ) ; warnings ( validation warnings ) ; }<CODESPLIT>Adds a validation result to this .
public static String toMetaFieldInfoString ( Object obj ) { buf ( 100 ) ; MetaFieldInfo fieldsMetaFieldInfoArray ( obj ) ; ( ; fields ; ) MetaFieldInfo field = fields ; ( field name ) ; ( "=" ) ; ( field actualValue field actualValue getClass ( ) ( String ) ) ( '"' ) ; ( field value ) ; ( '"' ) ; } ( field value ) ; } ( + fields ) buf ( "," ) ; } return buf. toString ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public getArrayClassName ( Class clazz ) clazz isArray getArrayClassName ( clazz getComponentType ( ) ) + ; } clazz getName ( ) ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void addBlock ( Block block ( isInitialized ( ) ) ; } BlockScan block ( block ) ; ( ) (Adding existing block + block ) ; delBlock ( ) ; } BlockScanInfo ( block ) ;ScanBlockScan ( ) ;Block ( ) ; adjustThrott ( ) ; }<CODESPLIT>Adds block to list of blocks
public String getTile ( int x int y ) { ( ( getArray ( ) ) ( getArray ( ) ) ( ) ( ) ) new ( ) ; } image x y ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBPDslBuilder BitArray ( String name String bitLenExpression String sizeExpression ) { Item item Item ( Bin BIT ) ; bitExpression assertExpression ( bitExpression ) ;Expression assertExpression (Expression ) ; addItem ( ) ; this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object indexOf ( String strPattern, String strInput, int offset, boolean caseSensitive, boolean matchAll ) throws MalformedPatternException { PatternMatcherInput input PatternMatcherInput (Input ) ; PerMatcher PerMatcher ( ) ; compile caseSensitive? : PerCompiler CASE ;Options SINGLE ; ( offset ) offset ; pattern getPattern (Pattern compile ) ; ( offsetInput ( ) ) input setCurrent ( offset ) ; ( offsetInput ( ) ) Array matches ArrayImpl ( ) ; ( ( pattern matchMatch ( ) ( ) + ; ( matchAll ) return Double ( match ) ; } matchesEL ( match ) ; } ( matches ( ) ) return matches ; } } return ; }<CODESPLIT>return index of the first occurence of the pattern in input text
private Object checkRegisteredServicesByLdapFilter ( String filter ) throws Invalid { ServiceReference references getBundle ( ) getServiceReferences ( ( ) filter ) ; ( ( references ) ; } ( references ) getBundleContext ( ) getService ( references ) ; } new ( services registered filter + filter ) ; }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void postEvent ( DEvent event ) { ( )te postEvent ( event ) ; } (om )om postEvent ( event ) ; } (Drop event non longer managed object,oid, getO ( ),, getClass ( ) getName ( ),event, event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public Identity createOverlayManagerGroup ( name ) ExtendedIdentifiers createExtendedIdentifier ( IfStrings IMETADATANSURI IfStrings IMETADATAPREFIXoverlaymanagergroup name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static DoubleMatrix cholesky ( DoubleMatrix A ) { DoubleMatrix A dup ( ) ; NativeBlaspotr (U A rows data A rows ) ; ( ) new LapArgumentException (DP", info ) ; } ( ) new LapPos (DP",Minor " + info + " negative Matrix positive definite ) ; } clearLower ( ) ; return ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean isCaller ( final String className final String methodName ) { throwable ( ) ; StackTraceElement stackElements throwable getStackTrace ( ) ; ( stackElements ) ( Level WARNEmpty call stack ) ; return ; } match "*" ( ) ; ( ; stackElements ; ( stackElements getClassName ( ) ( className ) ) return matchAllMethod? : stackElements i ] getMethodName ( ) equals ( methodName ) ; } } return ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public InputStream setFlag ( name value executeCommand (setflag name value ) ; }<CODESPLIT>set JVM command line flag
public Q addFlag ( Position position String prefix Expression expr ) { Expression flag Expressions template ( ( ) ) ; queryMixin addFlag ( QueryFlag ( position flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ConnectionInfoConnectionInfo ( Channel c ) { Socket channel ( Socket ) ; host channel local ( ) ; remoteAddress getRemote ( channel ) ; scheme channel pipeline ( ) ( Ssl )httpshttp ; ConnectionInfo ( hostAddress remoteAddress scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDPDomain getPDPDomain ( String pdpDomainName ) throws IOException { SortedSet domainRanges ; ( serializedCache ) ( serializedCache ( pdDomainName ) ) domainCache ( pd ) ; } }DomainRanges checkDomainRanges ( domainRanges ) ; (RequestDomainRanges ) u ( server +getDPDomain +DomainName ) ; (Fetching ) ; URLConnectionTools getInputStream ( u ) ; xml JFCatClient convertStream ( ) ; domainRanges XML getDomainRangesXML ( ) ; ( domainRanges ) cache ( pdDomainName domainRanges ) ; } } ) ( generating PDP request URL +DomainName, ) ; new ( PDP name + pdDomainName, ) ; } pdb ; ResidueRange ranges ResidueRange ( ) ; ( domainRange domainRanges ) SubstructureIdentifier SubstructureIdentifier ( domainRange ) ; ( pdbId ) pdbuc getPdb ( ) ; } ( pdbId (Id getPId ( ) ) ) new ( take union of domains from multiple PDB IDs ) ; } ranges (uc getResidueRanges ( ) ) ; } return PDPDomain ( pdpDomainName, ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public Context getContext ( ) { ( searchView searchView getContext ( ) ; } ( supportView supportView getContext ( ) ; } (SEARCHVIEW ) ; }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean isMacroCycle ( IRing ring IRingSet rs ) { ( ring getAtomCount ( ) 8 ) ; ( IBond bond ring bonds ( ; ( IAtomContainer other rs atomContainers ( ( ring other ) ; ( other ( bond ) ) ; } } ( ) ; } return ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T T datastoreToJava ( Entity entity ) { ( entity ) ; } T ( T ) persistentClass ( ) ; populate ( entity ) ; return ; } ) new ( ) ; } ) new ( ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void updateCacheState ( Map Object props ) getAuthentication ( ) ; ( cacheCacheService activate ( ) ; }CacheService deactivate ( ) ; } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static QuerySnapshot withChanges ( Query query Timestamp readTime DocumentSet documentSet List DocumentChange documentChanges ) { QuerySnapshot ( query readTime ) QueryDocumentSnapshot documents ; List QueryDocumentSnapshot getDocuments ( ) { ( documents ( documents documents document ( ) ; } } } unmodifiableList ( documents ) ; } List DocumentChange getDocumentChanges ( ) { unmodifiableList ( documentChanges ) ; } int size ( ) { documentSet ( ) ; } equals ( Object o ) { ( ; } ( getClass ( getClass ( ; } QuerySnapshot ( QuerySnapshot ) ; ( query that query ) ( this ( ) that ( ) ) Objects ( this getDocumentChanges ( ) that getDocumentChanges ( ) ) Objects ( this getDocument ( ) that getDocument ( ) ) ; } int hashCode ( ) { Objects hash ( query this getDocumentChanges ( ) this getDocument ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean readSend ( InH3 hIn, OutboxAmp outbox, HeadersAmp headers ) throws IOException { MethodRefHamp methodHamp ; methodH readMethod ( h ) ; } ) ( Level FINER, ( ), ) ; skipArgs ( h ) ; return ; }RefAmp method methodH getMethod ( ) ; ClassLoader loader methodH getClassLoader ( ) ; Thread thread Thread currentThread ( ) ; thread setContextClassLoader ( ) ; read ( methodHamp h ) ; ( (logLevel ) ) (logLevel, this + send + method getName ( ) + ( ) + headers ) ; } SendMessageN sendMessage SendMessageN (box headers method serviceRef ( ) method method ( ) ) ; timeout 1000 ; sendMessage offer ( timeout ) ; } ) ( ( ) ) ; ( ( ) ) ( Level, ( ), ) ; } } return ; }<CODESPLIT>The send message is a on - way call to a service .
private String getRemoteFileName ( UploadFile file ) { ( ( PARAMREMOTEPATH ) ( ) ) return file getName ( service ) ; } ( ( PARAMREMOTEPATH ) ( ) ) file ( PARAMREMOTE ) ( ) ; return tmp tmp length ] ; } return file getProperty ( PARAMREMOTEPATH ) ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initializeBufferMetrics ( Task task ) { MetricGroup buffers addGroup ( ; buffers gauge (inputQueue InputBuffers ( task ) ; buffers gauge (Queue OutputBuffers ( task ) ) ; buffers gauge (Pool InputPool ( task ) ) ; buffers gauge (Pool OutputPool ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void doubleClick ( String fileName ) throws QTaste { Region ( )Click ( fileName ) ; } QTaste ( ( ), ) ; } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void setDestinationSSECustomerKey ( SSECustomerKey sseKey ) { ( sseAwsManagement new ( SSECustomerKey SSEAwsKeyParams set time ) ; } this destinationSSECustomerKey sseKey ; }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void ( Throwable t ) { ToastText ( ( ) ) show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paintDropLines ( SeaGlassContext context, Graphics g ) { JTable DropLocation loc table getDropLocation ( ) ; ( loc ) return ; } Color color ( Color ) style ( contextTabledropLineColor ) ; ColorColor ( Color ) style ( contextTabledropLineShortColor ) ; ( color shortColor ) return ; } Rectangle rect ; getHDropLineRect ( loc ) ; ( ) rect ; w rect width ; ( color ) extendRect ( ) ; ( color ) ; g fillRect ( x width rect ) ; } ( locInsertColumn ( ) shortColor ) ( shortColor ) ; g fillRect ( x rect w rect ) ; } } rect getVDropLineRect ( loc ) ; ( ) rect ; h rect ; ( color ) extendRect ( rect ) ; ( color ) ; g fillRect ( rect x rect rect width rect ) ; } ( locInsertRow ( ) shortColor ) ( shortColor ) ; g fillRect ( rect x rect width h ) ; } } }<CODESPLIT>Paint the drop lines if any .
public DatalogProgram createDatalog ( SWRLRule rule ) accept ( ) ; ( ( Supported Translation + errors ; ( ) ; } DatalogProgram datalogatalogProgram ( ) ; ( facts ) ; dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflateAuthnRequest ( byte decodedBytes ) { val infl inflate ( ) ; ( ( infl infl ; } Compression decodeByteArrayToString ( decodedBytes ) ; }<CODESPLIT>Inflate authn request string .
public static FrameworkProjectConfig create ( String name File propertyFile Properties properties IFilesystemFramework filesystemFramework ) { ( ( generateProjectProperties ( property properties ) ; } create ( name propertyFile filesystemFramework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clearLogContext ( ) { Log embeddedLog HolderCONTEXT ; Configurator embeddedLog ( ) detach ( Configurator ATT ) ; ( configurator PropertyConfigurator ) LogConfigurationConfiguration ( ( Property ) ) getLogConfiguration ( ) ; clearLogContext (ContextConfiguration ) ; } ( configurator LogContextConfiguration ) clearLogContext ( ( LogContextConfiguration ) ) ; } list ( embeddedLog ( ) ) ; ( logger ) Logger embeddedLogIfExists ( name ) ; ( ) Handler handlers clearHandlers ( ) ; ( handlers ) ( Handler handler handlers ) handler close ( ) ; } } setFilter ( null ) ; setUseParentFilters ( ) ; setUseParentHandlers ( ) ; setLevel ( Level INFO ) ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public RestApiResponse execute ( long timeout Blocking blockSingle ( delegate execute ( ) timeout ) ;<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public InputStream getInputStream ( HttpServletRequest request, MutableObject < byte [ ] sourceMapResult ) throws IOException { bytes = this bytes ; sourceMap = this sourceMap ; filename this filename ; ; ( bytes ) ( bytes ) ; ( sourceMap sourceMap ) sourceMap ( sourceMap ) ; } } ( filename ) ICacheManager cm ( ( IAggregator ) request getAttribute ( IAggregator AREQATTRNAME ) ) getCacheManager ( ) ; file ( cm getCacheDir ( ) filename ) ; ( sourceMap ) ( file ) ; } CacheData data ; ObjectInputStream ObjectInputStream ( ( file ) ) ; data ( CacheData ) readObject ( ) ; } ClassNotFoundException ) new ( ( ), ) ; } ( ) ; } bytes = data bytes ; sourceMap = data sourceMap ; ( sourceMap ) sourceMapResult ( sourceMap ) ; } ( bytes ) ; } } new ( ) ; } return ; }<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void cacheIncludeAndIgnore ( WebElement table ) { (Ignore ( ) )Matches ( WebElement ( ) ) ; (IgnoreRowsMatching (IgnoreMatches ( ) ( table findElements ( ) ) ; } } ( getInclude ( ) )IncludeMatches ( WebElement ( ) ) ; ( getIncludeRowsMatching ( getIncludeMatches ( ) ( table findElements ( ) ) ; } } }<CODESPLIT>Does the table comparison
public E List InlineDiffChunk E inline ( List E previous List E next ) { ( ) ; this inlineDiffDisplayer display ( this diffManager diff ( previous next ) ) ; } Diff setError ( ) ; ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static CompletableFuture < MessageSet getMessagesAroundUntil ( TextChannel channel Predicate < Message condition long around ) { CompletableFuture Message CompletableFuture ( ) ; channel getApi ( ) ( )ExecutorService ( ) submit ( ( ) Message messages ( ) ; Message untilMessage getMessagesAroundAsStream ( channel around ) peek ( messages ) filter ( condition ) ( ) ; ( MessageImpl ( untilMessage map ( messages ) ( ( ) ) ) ) ; } ) future complete ( ) ; } } ) ; future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean findSipApplicationAnnotation ( InputStream stream ) { rawClass ; rawClass byte stream available ( ) ; stream read ( rawClass ) ; contains ( rawClass SIPAPPLICATION ) ; two contains ( rawClass ANNOT ) ; ( one two ) ; } ) } return ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map < String, Object > buildJobDataMap ( final JmxCommand jmxCommand, final Object [ ] params ) throws MBeanException { job ( ) ; ind ; ( JmxOption option JmxOptions getOptions ( ) ) option process ( jobDataMap ( ind ) ) ; } ( Argument this remoteProgram getArguments ( ) )Using ( ( ind ) ) ; } } ) new MBean ( ) ; } return jobDataMap ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void V ( StringBuilder buf ) { Token getNextToken ( ) ; ( TokenType VALUE ) new IllegalStateException ( " token " + t ) ; } ( ( ) ) ; getNextToken ( ) ; ( TokenType EOL ) return ; } ( TokenType TRABACKSLASH ) Vopt ( ) ; } }<CODESPLIT>Vopt = EOL V
public void addHeader ( String sName String sValue ) { (add ( sName sValue ; }<CODESPLIT>Add the passed header as is .
public N Number Number max ( List N numberList ( numberListStream max ) ; }<CODESPLIT>Max number .
public int getChaincodeActionResponseStatus ( ) throws InvalidArgumentException { (Return )ReturnCode ; } ProposalResponsePayloadDeserializer proposalResponsePayloadDeserializer getProposalResponsePayloadDeserializer ( ) ;ReturnCode proposalPayloadDeserializer getExtension ( ) ( ) ;ReturnCode ; } ; } new ( ) ; } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Queue Pair Env AttrContext JCClassDecl queue generate ( queue ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static EnhancedMimeType create ( String primary String sub Charset encoding String version Map String String parameters ) { EnhancedMimeType ( primary sub encoding version, parameters ) ; } MimeType new ( create versioned mime type + primary + + sub, ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static long toLongWithDefault ( Object value long defaultValue )Nullable ( ;? ( ) : defaultValue ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void setIsolation ( String iso ) throws JspTagException { ( TRANSACTIONREADCOMMIT ( iso ) ) isolation = Connection TRANSACTIONREAD ; } ( TRANSACTIONREADUNCOMMIT ( iso ) ) isolation = Connection TRANSACTIONREADUN ; } ( TRANSACTIONPEATREAD ( iso ) ) isolation = Connection TRANSACTIONREAD ; } ( TRANSACTIONSERIALIZ ( iso ) ) isolation = Connection TRANSACTIONSER ; } new JspTag ( Resources ( "TRANSACTIONINVALIDOL" ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node root ) { initTraversal ( ) ; ; pushScope ( ) ; traverseBranch ( root ) ; popScope ( ) ; } ( ) ; } }<CODESPLIT>Traverses a parse tree recursively .
public CollectionRequest Tag findByWorkspace ( String workspace ) { (workspaces/%tags workspace ) ; CollectionRequest < Tag > ( this Tag pathGET ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule CriteriaFindQuery ( Sequence ( peek (CliQuery ( Json ( JsonObject ( peek (Operation ( FIND ) peek ( )Criteria ( match ( ) ) ) ;<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlinkLast ( Node < E > l ) { E element l item ; Node < E > l ; l item ; l ; = ; ( ) = ; = ; size ; modCount ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void setupSimpleSecurityProperties ( Hashtable < String Object env String userDn char [ ) { ( Context SECURITYAUTHENTICsimple ) ; ( Context SECURITYPRIP userDn ) ; ( Context SECURITYCREDENTIALS ( ) ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team createTeam ( name tag sendRpcWait ( SERVICEcreateTeam name tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void checkFilePattern ( String s ) throws ProblemException { Pattern ; ( File separator '\\' ) Pattern compile (+" ) ; } ( File separator '/' ) Pattern compile (+" ) ; } new Problem ( "This platform uses unsupported " + File separatorChar + " as file separator character add support!" ) ; } m ( s ) ; ( m matches ( ) ) new Problem ( " string + s + proper file name ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ( ) throws Exception { ( Transaction ShardTransactionManager transactionManagerMap ( ( ) close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String getBar ( long percentage ) { = ( ) ; ( percentage ) ; ( [" ) ; ( = ; < 100 ; ) if ( percentage 100 i percentage ) { ( "=" ) ; } if ( i percentage ) { ( ">" ) ; } { ( ) ; } } ( ) ; return. toString ( ) ; }<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T element List T result ) { dependencies blocked ( element ) ; ( dependencies ( T dependencies resolve ( dependency ) ; } blocked remove ( element ) ; ( element ) ; } }<CODESPLIT>Resolves an element .
public B camundaOut ( String source String target ) { Camund model ( Camund ) ;und ( source ) ;und ( ) ; addExtension ( ) ; myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
Node createArgumentsReference ( ) { Node IR (arguments ) ; (Adding ( )JS ( argumentsSupplier ( ) ) ; } ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date toDate ( String dateString ) { Date date ; DateFormat (yyyy ) ; date df parse ( dateString ) ; } ( ParseException ) ( fillIn ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public cusolverRSetNumericProperties ( cusolverRHandle handle zero boost ( cusolverRNumericPropertiesNative ( boost ) ) ;<CODESPLIT>CUSOLVERRF set and get numeric properties
public quoteIfString ( obj? quote ( ( ) obj ) : obj ;<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred < Object > deleteUidAsync ( final String type, final String name ) { Unique uidtype UniqueUniqueId ( type ) ; ( uidtype MET metrics deleteAsync ( ) ; TAG tag deleteAsync ( ) ; TAG tagvalues deleteAsync ( ) ; : ( UID type + uidtype ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public scrollDownList ( int index ) { (Logging ( commandLoggingTagscrollDown + index + ) ; } sc scrollList ( waiter waitForAndGetView ( index ListView ) Sc DOWN, ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void makeAnnotationTypeElementDoc ( MethodSymbol meth TreePath treePath ) { AnnotationElementDocImpl ( AnnotationElementDocImpl ) ( meth ) ; ( ) ( tree )Tree ( tree ) ; } AnnotationElementDocImpl ( tree ) ;Map ( meth ) ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object call ( method Object... arguments ) throws Pickle Pyro { internalcall ( method arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String formatAsPercentage ( int value int total ) { average : ; PERCENTFORMAT format ( average ) ; }<CODESPLIT>Returns value converted to percentage format .
public T Geometry JTSGeometryExpression T translate ( Expression T expr del deltay geometryOperation ( expr getType ( ) SpatialOps TRAN expr ConstantImpl ( deltax ) ConstantImpl ( delay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static byte [ ] requestWebContent ( String url ) throws TVRageException { HttpGet httpGet HttpGet ( url ) ; httpGet (acceptxml ) ; DigestedResponse DigestedResponse requestContent ( httpGet CHARSET ) ; ( ( ) 500 ) new T ( ApiExceptionType HTTP3, url ) ; } ( ( ) ) new T ( ApiExceptionType HTTP, url ) ; } return getContent ( ) getBytes ( DEFAULT_CHARSET ) ; } ) new T ( ApiExceptionType MAPPING,PARSE, url, ) ; } }<CODESPLIT>Get content from URL in byte array
private static boolean isNumeric ( String value ) { ( value ( ( isDigit ( ) ) return ; } } return ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
 RequestMapping ( method = GET, value = "/foo" ) Map < String, String getFoo ( ) { ( ) ; put (foobar ) ; return fooObj ; }<CODESPLIT>Controller to just support pinging .
protected static void fireArrayStartEvent ( JsonConfig jsonConfig ) { ( isEventTrigger ( ) ) ( Iterator listenersConfig getJsonEventListeners ( ( ; listeners ( ; JsonEventListener listener ( JsonEventListener ) listeners ( ) ; listener on ( ) ; } ( ) ; } } } }<CODESPLIT>Fires a start of array event .
public static E Exception sneaked ( SneakyRunnable E runnable ) ( ) ( )neakyRunnable RuntimeExceptionRunnable (neakyRunnable RuntimeException ) ; castedRunnable run ( ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( BandwidthClient client String id Map < String Object params ) throws AppPlatformException ParseException IOException Exception { ( client id ) ; domains client getUserResourceInstance ( Band DOMAINSURI id ) ; Rest client post ( domainsUri ) ; JSONObject toJSON ( client ( domainsUri ) ) ; Domain ( client, jsonObject ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream < String getResourceTypes ( final Event event ) { (ape jcr api observation Event )eshape jcr api observation Event modeEvent (eshape jcr api observation Event ) event ; Stream NodeType types Stream ( ) ; ( NodeType type modeEvent getMixinNodeTypes ( types ( ) ; } types ( modeEvent getPrimaryNodeType ( ) ) ; types ( ) map ( NodeType :: getName ) ; } RepositoryException ) new RepositoryRuntimeException ( ) ; } } empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void processDefaultHeader ( ParserContext context ) { ( context getFileLines ( ( hasHeaderSeparator ( } process ( getDocumentModel ( ) ) ; } }<CODESPLIT>Process the header of the file .
public Connection getConnection ( url username password ) throws SQLException { aliveConnection ( ; ( alive createConnection ( username password ) ; } connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static final StringBuilder renderPad ( final StringBuilder builder final int pad final boolean newLine ) { render ( ) ; ( ; pad ; ( ) ; } return ; }<CODESPLIT>Render some leading spaces onto a line of html .
public OvhAsyncTaskArray < OvhLine eligibility_lines_active_POST ( OvhCity city, String contactName, OvhStreet street, String streetNumber ) throws IOException { qPath "/xdslelibilitylinesactive ; StringBuilder path ( qPath ) ; ( ) ; (city city ) ; (contact contact ) ; (street street ) ; (streetNumber streetNumber ) ; exec ( qPathPOST ( ) ) ; return convertTo (, t5 ) ; }<CODESPLIT>Get the active lines at given address
private static evaluateExpressionStack ( Deque operators Deque values ) operators values push ( ( operators pop ( values pop ( ) values pop ( ) ) ) ; } replaceIntegerStringByBooleanRepresentation ( values pop ( ) ) ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public int write ( byte [ ] buffer, int offset, int length, boolean isEnd ) throws IOException { ; request _request ; ( requestExpireTime requestExpireTime CurrentTime ( ) ) close ( ) ; new ClientDisconnect ( L l ( request write exp addressRemote ( ) CurrentTime currentTime ( ) requestExpireTime ) ) ; } ( _write Current getCurrentActual ( ) ; expires _socket + ; writeNative ( _socketFd buffer offset ) ; } ( JStreamN getCurrent ( expires ; } ( ) closeWrite ( ) ; } return ; }<CODESPLIT>Writes to the socket .
public void setAmbientLight ( float r, float g, float b ) { ambient g 255 } ; normalize ( ambient ) ; gl glEnable (LIGHT ) ; gl glEnable (LIGHT ) ; gl glLightfv (LIGHT GL GLAMENT ambient ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
BigInteger setMultiChoiceCount ( ) { ( fields ) ( int = ; fields ; ) multiChoice = multiChoice multiply ( fieldsMultiChoice ( ) ) ; multiChoice ;<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete ( forceDelete ) API { delete ( getUrl ( ) +force + forceDelete ) ; ( ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void addNameToApplicationMap ( String name ) { appName getApplication ( ) ; ( appName ) ; ConcurrentLinkedQueue application ( appName ) ; ( list ) ConcurrentLinkedQueue ConcurrentLinkedQueue ( ) ; list applicationMap putIfAbsent ( appName ) ; ( list ) list ; } list ( ) ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static Envelope getTableEnvelope ( Connection connection TableLocation location String geometryField ) throws SQLException { ( geometryField geometryField ( ) ) geometryFields getGeometryFields ( connection location ) ; ( geometryFields ( ) ) new SQLException ( table + location + contain Geometry field extent + computed ) ; } geometry geometryFields ( ) ; } ResultSet connection ( ) (SELECT STExtent + TableLocation quoteIdentifier ( geometryField ) + + location ) ; ( ( ) ) ( ( Geometry ) getObject ( ) ) getEnvelopeInternal ( ) ; } new SQLException ( table extent ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void doListGet ( final Message < JsonObject > message ) { name message body ( ) ( ) ; ( ) message reply ( ( ) (status ) ( name specified ) ) ; return ; } index message body ( ) (index ) ; ( index ) message reply ( ( ) (status ) ( index specified ) ) ; return ; } context. execute ( new Action < Object > ( ) { public Object perform ( ) { return data getList ( formatKey ( name ) ) get ( index ) ; } }, new Handler < AsyncResult < Object > > ( ) { public void handle ( AsyncResult < Object > result ) { ( ( ) ) message reply ( ( ) (status ) ( ( ) ( ) ) ) ; } message reply ( ( ) (status ) put (result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static PlotCanvas plot ( String id, double [ ] data ) { Histogram histogram Histogram ( data ) ; histogramID ( id ) ; lowerBound = min ( data ), } ; upperBound = max ( data ), } ; freq histogram getHist ( ) ; ( ; < freq ; ) ( freq upperBound ) upperBound = freq ; } } PlotCanvas canvas PlotCanvas ( lowerBound upperBound ) ; canvas getAxis ( )GridVisible ( ) ; canvas add ( histogram ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static Pair < List < Tuple >, List < Tuple > > splitData ( final List < Tuple > trainingData, double proportion ) { ( proportion proportion ) new RuntimeException ( "Pro between 1" ) ; } ( proportion ) proportion = proportion ; } Tuple > > ( ) ; Tuple > large > ( ) ; small ( ) floor ( proportion trainingData ( ) ) ; ct ; > indices > ( ) ; ( ct small trainingData ( indices ( index ( ) ( random ( ) ( trainingData ( ) ) ) ; ( indices ( index index ( ) ( random ( ) ( trainingData size ( ) ) ) ; } indices ( index ) ; ; } smallList ( indices stream ( ) map ( trainingData ) collect ( ( ) ) ) ; IntStream range ( trainingData ( ) ) filter ( indices ( ) ) ( largeList ( trainingData ( ) ) ) ; return new ImmutablePair < > ( smallList, largeList ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void getScreenShotABGR ( ByteBuffer bgraBuf, BufferedImage out ) { WritableRaster out getRaster ( ) ; DataBufferByte db ( DataBufferByte ) getDataBuffer ( ) ; byte cpuArray db getData ( ) ; bgraBuf clear ( ) ; bBuf ( cpuArray ) ; bgraBuf clear ( ) ; width ( ) ; ( ) ; ( ; height / 2 ; ) ( ; width ; ) inPtr ( width + x ) 4 ;Ptr ( ( ) width + x ) 4 ; byte = cpuArray in + ; byte g = cpuArray in + ; byte = cpuArray in + ; byte a = cpuArray in + ; byte = cpuArray out + ; byte g = cpuArray out + ; byte = cpuArray out + ; byte a = cpuArray out + ; cpuArray out + = a ; cpuArray out + = ; cpuArray out + = g ; cpuArray out + = ; cpuArray in + = a ; cpuArray in + = ; cpuArray in + = g ; cpuArray in + = ; } } }<CODESPLIT>Good format for java swing .
public Pair < int [ ] [ ] [ ], int [ ] > documentToDataAndLabels ( List < IN > document ) { doc document ( ) ; data doc windowSize ; labels doc ; ( flags useReverse ) reverse ( document ) ; } ( ; < doc ; ) CRFDatum < List < String >, CRFLabel > d makeDatum ( document, j, featureFactory ) ; < < > > features d asFeatures ( ) ; ( k f features ( ) ; k < f ; k ) Collection < > cliqueFeatures features ( k ) ; data j k cliqueFeatures ( ) ; m ; ( feature cliqueFeatures ) index featureIndex ( feature ) ; ( index ) data k m = index ; m ; } } } ( m data j k ) f m ; System ( data j k,, f,, m ) ; data k = f ; } } IN document ( ) ; labels ]Index ( ( AnswerAnnotation ) ) ; } ( flags useReverse ) reverse ( document ) ; } return new Pair < int [ ] [ ] [ ], int [ ] > ( data, labels ) ; }<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List < Class < > > locateAll ( final String serviceName ) { ( serviceName ) new IllegalArgumentException ( "serviceName cannot" ) ; }? > > classes? > > ( ) ; ( factories ) Callable Class? > > > l factories ( serviceName ) ; ( ) ( Callable Class ) classes add ( call ( ) ) ; } ) } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decodeCString ( ByteBuf buffer ) throws IOException { buffer bytes ( Bson STRINGTERMINATION ) ; ( ) new IOException (string termination ) ; buffer ( buffer readerIndex ( ) UTF ) ; buffer skipBytes ( + ) ; return ; }<CODESPLIT>default visibility for unit test
public void addCase ( JMFType theCase ) { (Case ) new NullPointerException (Variant case cannot ) ; JSTypeCase ( JSType )Case ; ( cases ) cases = new JSType ; JSType oldCases = cases ; cases JSTypeCases + ; System ( oldCases,,,, oldCases ) ; }Case parent this ;Case siblingPosition cases ; casesCase siblingPositionCase ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarizeState ( ) { buf ( ) ; (clipVol ) ( _clipVol ) ; ( disabled ) ; ; ( SoundType soundType _disabledTypes ) ( ) ( ) ; } ( sound ) ; } return buf. append ( ). toString ( ) ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map < String, String > getCustomMap ( Pattern keyPattern ) { map > ( ) ; ( Iterator props ( ) ( ) ; ( ) ; ) key ( ) ( ) ; keyPattern ( key ) ; ( matches ( ) ) id group ( ) ; propertyValue props ( key ) ; map put ( id propertyValue ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public rawUncompress ( inputAddr long inputSize long destAddr implUncompress ( inputAddr input destAddr ) ;<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( byte [ ] b, int off, int len ) { this checkArray ( ) ; ( off this buffer this ) ; ; }<CODESPLIT>Writes a byte array content into the stream
public Operation patchHealthCheck ( ProjectGlobalHealthCheckName healthCheck HealthCheck healthCheckResource List String fieldMask ) { PatchHealthCheckHttpRequest PatchHealthCheckHttpRequest (HealthCheck ( health health ( ) )HealthCheck ( health ) ( ) ( ) ; patchHealthCheck ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initializeNoxItemMargin ( TypedArray attributes ) { noItemDefaultValue ( ) ( R dimenitemmargin ) ; noItem attributes ( R styleable noitemmargin noItemDefaultValue ) ; noNoItemMargin ( noItemMargin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public OperationResult failed ( long index long eventIndex Throwable error Operation ( index event error ) ;<CODESPLIT>Returns a failed operation result .
public static InList ifIntegersEqual ( InList lhs InList rhs InList action ) { Validate ( lhs ) ; Validate ( rhs ) ; Validate ( action ) ; In In ( ) ; LabelLabel Label ( ) ; ( lhs ) ; ( rhs ) ; ( JInsn ( IFMPNELabelNode ) ) ; ( action ) ; (EqualLabelNode ) ; ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static FormatOptions of ( int flags, int width, int precision ) { ( checkConsistency ( flags width UN ) ) new IllegalArgumentException ( flags + Integer ( flags ) ) ; } ( ( width width ) width UN ) new IllegalArgumentException ( width + width ) ; } ( ( precision precision ) precision UN ) new IllegalArgumentException ( precision + precision ) ; } return FormatOptions ( flags, width, precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void tripleClick ( Coordinates where ) { Point ( whereiple click ) ; exec mouseAction ( OperaMouseKeys LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initializeNoxItemPlaceholder ( TypedArray attributes ) { Drawable placeholder attributes getDraw (itemplaceholder ) ; ( placeholder placeholder ( ) getResources ( ) getDraw ( drawable ic ) ; } noPlaceholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void pruneInvalidOptional ( DependencyExplorerOutput outputKeys invalidKeys ) { DependencyGraph Graph prunedGraph DependencyGraph Graph ( getGraph ( ; ( KeyInvalidOptionalKeys ( prunedGraph remove ( key ) ; removeBinding ( key ) ; }Graph ( prunedGraph ( ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private PersistentResourceXMLDescription getSimpleMapperParser ( ) { ( version ( Version ) ) return simpleMapperParser ; } ( version ( Version ) ) return simpleMapperParser_ ; } return simpleMapperParser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String getAbsoluteTemplateURI ( String templateName, boolean includeExtension ) { FastStringWriter buf FastStringWriter ( ) ; templateName ( templateName ( ) ) ; ( ( SLASH ) ) ( SLASH ) ; ( SLASH ) ; ( ( ) ) ; ( SLASHUNDR ) ; ( ( + ( ) ) ) ; } buf ( SLASHUNDR ) ; buf ( templateName ( templateName ( ) ) ) ; } ( includeExtension ) buf ( EXTENSION ) ; } uri buf ( ) ; buf close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scanResourcePaths ( String startPath ) throws IOException, SAXException { dirList context getResourcePaths ( startPath ) ; (List ) ( path dirList ) ( path (WEBclasses ) ) } ( path (WEBlib ) ) } ( path ( ) ) scanResourcePaths ( path ) ; } ( path (WEBtags ) ) ( path (implicitld ) ) parseT ( path ) ; } } ( path ( T ) ) parseT ( path ) ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected duringDrag ( SVGPoint startPoint SVGPoint dragPoint Event evt inside listener duringDrag ( startPoint dragPoint evt inside ) ; } ; }<CODESPLIT>Method called during drags .
private PGPKeyRingGenerator createKeyRingGenerator ( String userId, String password, int keySize ) { trace (createKeyRingGenerator ) ; trace (User ID Password Key Size userId password? :******** key ) ; PGPKeyRingGenerator generator ; (Creating RSA key generator ) ; RSAGenerator generator RSAGenerator ( ) ; generator init ( RSAKeyGenerationParameters ( BigInteger ( ) getSecureRandom ( ) key 12 ) ) ; (Generating Signing Key ) ; Bc signing Bc ( PGPPublicKey RSASIGN generator generate ( ) Date ( ) ) ; (Generating Encyption Key ) ; Bc encryption BcP ( PGPPublicKey RSA generator generate ( ) Date ( ) ) ; (Generating Signature Key Properties ) ; PGPSignatureSubGenerator signatureSubGenerator PGPSignatureSubGenerator ( ) ; signatureGenerator setKeyFlags ( KeyFlags KeyFlags ) ; signatureGenerator setPreferred ( getPreferredEncryption ( ) ) ; signatureGenerator setPreferredHash ( getPreferredHash ( ) ) ; signatureGenerator setPreferredCompression ( getPreferredCompression ( ) ) ; (Generating Encyption Key Properties ) ; PGPSignatureSubGenerator encryptionSubGenerator PGPSignatureSubGenerator ( ) ; encryptionGenerator setKeyFlags ( KeyFlags ENCRYPTCOMMS KeyFlags ENCRYPTSTORAGE ) ; (Creating PGP Key Ring Generator ) ; generator PGPKeyRingGenerator ( PGPPublicKey RSASIGN signing userId BcPDigestCalculatorProvider ( ) ( HashAlgorithmTags SHA ) signatureSubGenerator generate ( ) BcPContentSigner ( PGPPublicKey RSASIGN HashAlgorithmTags SHA ) BcPSecretKeyEncrypt (EncryptionAlgorithm ( ) ) build ( password ( ) ) ) ; generator addSubKey ( encryptionKeyPair encryptionSubpacketGenerator generate ( ) ) ; } PGP ) ( "{}" ( ) ) ; generator ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date getDateFromString ( String dateString String pattern ) { SimpleDateFormat build ( pattern ) ; df parse ( dateString ) ; } new Date ( String format ( parse pattern, dateString, pattern ), ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public Object remove ( Object key ) { ( _cacheL2 (cache ( key ) _cache ( key ) ) return null ; } ; Map ; ( _cacheL merge ( _cacheL _cacheL ) ; remove ( key ) ; }cache = ; _cacheL clear ( ) ; = ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private String getItemType ( Cmdb cmdb ) { itemType ; subType cmdb getConfigurationItem ( ) ; type cmdb getConfigurationItemType ( ) ; hpsmSettings hpsmSettings getApp ( ) ; hpsmSettingsType hpsmSettings getAppType ( ) ; typeCheck ; subTypeCheck ; ( ( hpsSettings ) ) typeCheck ; } ( ( hpsSettings ) ) subTypeCheck ; } ( typeCheck subTypeCheck ) ( subType subType ( hpsSettings getApp ( ) ) ) itemType = APPTYPE ; } ( subType subType ( hpsSettingsComp ( ) ) ) itemType = COMPTYPE ; } ( subType subType ( hpsSettings ( ) ) ) itemType = ENVIRONMENTTYPE ; } } ( typeCheck subTypeCheck ) ( type type ( hpsSettings getApp ( ) ) ) itemType = APPTYPE ; } ( type type ( hpsmSettingsComp ( ) ) ) itemType = COMPTYPE ; } ( type type ( hpsmSettings ( ) ) ) itemType = ENVIRONMENTTYPE ; } } ( subType subType ( hpsmSettings getApp ( ) ) type type ( hpsmSettings getApp ( ) ) ) itemType = APPTYPE ; } ( subType subType ( hpsmSettingsComp ( ) ) type type ( hpsmSettingsComp ( ) ) ) itemType = COMPTYPE ; } ( subType subType ( hpsmSettings ( ) ) type type ( hpsmSettings ( ) ) ) itemType = ENVIRONMENTTYPE ; } } return itemType ; }<CODESPLIT>Returns the type of the configuration item .
public void readXML ( final List < String > _tags, final Map < String, String > _attributes, final String _text ) throws SAXException, EFapsException { (tags ( ) )tags ( ) ; (uuid ( value ) ) this uuid =text ; } (fileapplication ( value ) ) this fileApplication =text ; } (definition ( value ) ) this definitions (Definition ( ) ) ; } } (definition (tags ( ) ) ) AbstractDefinitionDef this definitions ( this definitions ( ) ) ;Def readXML (tags subList (tags ( ) )attributestext ) ; } new SAXException (Unknown XML Tag + + + this installFile ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public String getSQLUpdate ( boolean bUseCurrentValues ) { strRecordset this getBaseRecord ( ) makeTable ( ) ; KeyArea keyArea this getBaseRecord ( ) getKeyArea ( ) ;KeyValuesValues? : keyArea ( DBConstants TEMP ) ;QueryRecord this getBaseRecord ( )QueryRecord ( ) ; sFilter keyArea addSelectParams ( "=" DBConstants TEMPQueryRecordKeyValues ) ; ( sFilter ( ) ) sFilter = WHERE + sFilter ; strSetValues this getBaseRecord ( ) getSQLFields ( DBConstants SQLUPDATEValues ) ; ( strSetValues ( ) ) ;Record =UPDATE + strRecord + SET + strSetValues +Filter ; return strRecordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object... objects ) { ( mock objects ( mock Class verify ( ( ) mock ) ; } EasyMockInvocationControl invocationControl ( EasyMockInvocationControl ) MockRepositoryInvocationControl ( mock ) ; ( invocationControl invocationControl verify ( ) ; } ( isNReplayVerify ( )EasyMock ( mock ) ) } easymock EasyMock verify ( mock ) ; } new ( mock + mock object, ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void mapTileRequestFailed ( MapTileRequestState pState ) { (TileImageTileCache (State getMapTile ( )TileNotFoundImage ExBitmapDrawable ) ; ( Handler handlerTileRequestCompleteHandlers ( handler handler sendEmptyMessage ( MAPTILESUCCESS ) ; } } } ( Handler handlerTileRequestCompleteHandlers ( handler handler sendEmptyMessage ( MAPTILE ) ; } } } ( Configuration (TileProviders ( Log d ( IMapViewMapTileProviderBasemapTileRequest + MapTileIndex ( pState getMapTile ( ) ) ) ; } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validateFactoryAndClass ( FieldDefinition fd int factoryId int classId String fullPath ) { ( factory fd getFactory ( ) ) new ( factoryId + getFactoryId ( ) + + factoryId + path + fullPath ) ; } ( classId fd getClass ( ) ) new ( classId + getClassId ( ) + + classId + path + fullPath ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static String getLabelFor ( InputComponent < input boolean addColon ) { label input getLabel ( ) ; ( label label input ( ) ; } ( label ( COLON ) label ; } label ; }<CODESPLIT>Returns the label for this component
protected View inflatePlaceholderView ( View convertView int ) { View view ; ( ( view PlaceholderView view PlaceView ( ( ; } view setMinimum ( ) ; view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stopService ( ) throws Exception { (stopServiceStopping LdapServer ) ; this server stop ( ) ; ( cstopServiceStopping DirectoryService ) ; service shutdown ( ) ; ( cstopServiceLdap stopped ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void setCacheMinutes ( int iMinutes ) { ( DEFAULTCA ; cacheMinutesMinutes ; ( ( timerCache timerCache cancel ( ) ; timerCache ; stopCache ( ) ; } } ( timerCache ) timerCache cancel ( ) ; } startCache ( ) ; timerTask DBTimerTask ( ) ; timerCache java util Timer ( ) ; timerCache schedule ( timerTask cacheMinutes ) ; } }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagateOnEnter ( GVRPickedObject hit ) { GVRSceneObject hitObject hit getHObject ( ) ; GVREventManager eventManager getGVRContext ( ) getEventManager ( ) ; ( mEvent ( Event SENDUCHEVENTS ) ) ( mEvent ( Event SEND ) ) eventManager sendEvent ( this ITouchEventsonEnter hitObject hit ) ; } ( mEvent ( Event SENDHITOBJECT ) ) eventManager sendEvent ( hitObject ITouchEventsonEnter hitObject hit ) ; } ( mEvent ( Event SENDSCE ) ( mScene ) ) eventManager sendEvent ( mScene ITouchEventsonEnter hitObject hit ) ; } } ( mEvent ( Event SENDPIEVENTS ) ) ( mEvent ( Event SEND ) ) eventManager sendEvent ( this IPickEventsonEnter hitObject hit ) ; } ( mEvent ( Event SENDHITOBJECT ) ) eventManager sendEvent ( hitObject IPickEventsonEnter hitObject hit ) ; } ( mEvent ( Event SENDTOSCE ) ( mScene ) ) eventManager sendEvent ( mScene IPickEventsonEnter hitObject hit ) ; } } }<CODESPLIT>Propagate onEnter events to listeners
public java Future GetSendQuotaResult getSendQuotaAsync ( com AsyncHandler GetSendQuotaRequest GetSendQuotaResult asyncHandlerendQuotaAsync (SendQuota ( )Handler ) ;<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short shortValue ( ) throws OtpErlangRangeException { ( ) ; ( ) ; ( ) new OtprlangRange (Value large short + val ) ; } i ; }<CODESPLIT>Get this number as a short .
private MjdbcSQLException translateSQLStatePrefix ( String reason, String SQLState, int vendorCode, SQLException cause ) { MjdbcSQLException ; sqlState getSqlState ( ) ; sqlStatePrefix ; ( sqlState sqlState ( ) 2 ) sqlStatePrefix sqlState ( ) ; ( SpringExceptionHandler SQLSTATEPREFIXBADSQLGRAMMAR ( sqlStatePrefix ) ) BadSqlGrammar ( reason SQLState vendorCode ) ; } ( SpringExceptionHandler SQLSTATEPREFIXDATAINGR ( sqlStatePrefix ) ) DataIntegrity ( reason SQLState vendorCode ) ; } ( SpringExceptionHandler SQLSTATEPREFIXDATARESOURCE ( sqlStatePrefix ) ) DataAccessResourceFailureException ( reason SQLState vendorCode ) ; } ( SpringExceptionHandler SQLSTATEPREFIXTRANSIENTDATARESOURCEEXCEPTION ( sqlStatePrefix ) ) TransientDataAccess ( reason SQLState vendorCode ) ; } ( SpringExceptionHandler SQLSTATEPREFIXCONCUR ( sqlStatePrefix ) ) ConcurrencyFailureException ( reason SQLState vendorCode ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean matches ( String name ) { ( ) pattern equals ( "" ) ; } ( ) all equals ( name ) ; } ( ) return name contains ( middle ) ; } ( ( ) ) return ; } return end name endsWith ( end ) ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get ( nitroservice service selectorname ) Exception {slimitselectorslimitselector ( ; ( selector ;slimitselector (slimitselector )resource ( service ) ; ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int solveQuad ( double [ ] eqn, double [ ] res ) { a = eq 2 ; = eq ; c = eq ; rc ; ( a ) ( b ) return - 1 ; } rc = c ; } = 4 a c ; ( d ) return 0 ; } d = sqrt ( d ) ; res rc = ( b + d ) ( a 2 ) ; ( df ) res rc = ( b d ) ( a 2 ) ; } } return fixRoots ( res, rc ) ; }<CODESPLIT>Solves quadratic equation
public Set < Term > getAllTerms ( ) { Term Term ( ) ; ( StatementGroup statementGroups ) ( Statement getAllStatements ( ) ) ( getAllTerms ( ) ) ; } } return ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void cancelCopy ( CopyOperationImpl op ) throws SQLException { (Lock ( op ) ) new PSQLException ( GT ( "Tried cancel an inactive copy operation" ), PSQL OBJECTSTATE ) ; } SQLException ; errors ; ( op Copy ) ( log ( Level FINESTFE => CopyFail ) ; byte Utils encodeUTF (Copy cancel requested ) ; pgStream send ( ) ; pgStream sendInteger ( + msg ) ; pgStream send ( msg ) ; pgStream send ( ) ; pgStream flush ( ) ; processCopyResults ( op ) ; } SQLException ) errors ; ( error ) SQLException = ; SQLException ; ( ( getNextException ( = ; } setNext ( error ) ; } error = ; } } (Lock ( op ; } } ( op CopyOut ) sendQueryCancel ( ) ; } } ) new PSQLException ( GT ( "Database connection cancel copy operation" ), PSQL CONNECTION, ) ; } ( (Lock ( op ) ) ( op ) ; } } } ( op Copy ) ( errors ) new PSQLException ( GT ( "Missing expected response copy cancel request" ), PSQL COMMIC ) ; } ( errors ) new PSQLException ( GT ( " responses single copy cancel request ( errors ) ) PSQLState COMMUN ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public com google ads adwords axis v201809 o. AttributeType getRequestedAttributeTypes ( requestedAttributeTypes ;<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void setRange ( Annotation v ) { ( OntRelationMention featOkTst ( ( OntRelationMention ) jcasType ) casFeatrange ) jcasType jcas throwFeatMissing (rangedeelabtypesOntRelationMention ) ; jcasType ll ll ( addr ( ( OntRelationMention ) jcasType ) casFeatCoderange jcasType llcas llFS ( ) ) ; }<CODESPLIT>setter for range - sets
public List com. ibm. wss. security. wim. model. RolePlayer getRelatedRolePlayer ( ) relatedRole relatedRolePlayer ibmsspi model RolePlayer ( ; } this relatedRolePlayer ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JCExpression getUnderlyingBinding ( Un un ( un? : un getBinding ( UIdent Key ( identifier ( ) ;<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clearCache ( ) { entityCache clearCache ( CommercePriceEntryImpl ) ; finderCache clearCache ( FINDERCLASSNAMEENTITY ) ; finderCache clearCache ( FINDERCLASSNAMEIN ) ; finderCache clearCache ( FINDERCLASSNAMEIN ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int computeCapacity ( int initial ) { ( initial MINIMUM MINIMUMCAPACITY ; } ( initialIMUM ) MAXIMUMCAPACITY ; } capacity ; ( capacity initial capacity ; } capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public V get ( K k long timeout unit ) await ( timeout ) ; cache ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void setupClasspath ( final Path distributedClassPath final Path intermediateClassPath final Job job ) throws IOException { classpathProperty (uidhadoopinternalclasspath ) ; ( classpathProperty ) classpathProperty (javaclasspath ) ; } jarFiles classpathProperty ( path ) ; Configuration conf job getConfiguration ( ) ; FileSystem distributedClassPath getFileSystem ( conf ) ; ( fs LocalFileSystem ) return ; } ( jarFilePath jarFiles jarFile ( jar ) ; ( jarFile ( ) (jar ) ) Retry retry ( ( ) (Snapshot ( jarFile ) )SnapshotJarClassPath ( jarFile intermediateClassPath fs job ) ; }JarClassPath ( jarFile distributedClassPath intermediateClassPath fs job ) ; } return ; }RetryPredicate ( ) NUMRE ) ; } ) new ( ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void eval ( String javascript ) throws WidgetException { WebElement element findElement ( ) ; WebDriver wd getGUID ( )WrappedDriver ( ) ; ( ( JavascriptExecutor ) wd ) executeScript ( javascript element ) ; } ) time System ( ) + 2000 ; ; ( ( time ( ( JavascriptExecutor ) wd ) executeScript ( javascript element ) ; ; } ) Thread sleep ( 500 ) ; } ) } = ; } } ( ) new RuntimeException ( ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public long addWrapField ( long instant amount ) ( instant FieldWrapped ( ( instant ) amountDivisor ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected synchronized SendRequest makeUnsignedChannelContract ( Coin valueToMe ) { Transaction Transaction ( wallet getParams ( ; ( getTotal ( ( valueToMe ( Coin ( ( ) ( valueToMe ) Legacy ( wallet getParams ( ) getClient ( ) ) ) ; }Input ( contract getOutput ( ) ) ; SendRequestTx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static getUserNameFromToken ( String authToken ) { ( authToken ; } authToken split ( TOKEN ) ; }<CODESPLIT>Extracts the user name from token .
protected Class < > resolveProxyClass ( String [ ] interfaceNames ) throws ClassNotFoundException { ClassLoader proxyClassLoader = classLoader ;? interfaces interface ;? nonPublicInterface ; ( ; interface ; )? intf loadClass ( interface ) ; ( isPublic ( intf ( ) ) ) ClassLoader classLoader getClassLoader ( intf ) ; ( nonPublicInterface ) ( classLoader proxyClassLoader ) new IllegalAccess ( nonPublicInterface + + intf + declared nonpublic class loaders" ) ; } } nonInterface = ; proxyClassLoader = classLoader ; } } interfaces = ; } return Proxy getProxyClass ( proxyClassLoader, interfaces ) ; } ) new ClassNotFoundException (, ) ; } }<CODESPLIT>Delegates class loading to the specified class loader .
public static double [ ] rowSums ( double [ ] [ ] data ) { x data ; ( ; < ; ) x i = sum ( data i ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int newCapacity ) { oldCapacity table ; oldTable table ; oldValues values ; byte = state ;Table newCapacity ; newValues newCapacity ; byte newState byte newCapacity ; this lowWaterMark chooseLowWaterMark ( newCapacity, this minLoadFactor ) ; this highWaterMark chooseHighWaterMark ( newCapacity, this maxLoadFactor ) ; this tableTable ; this values = newValues ; this state = newState ; this freeEntries = newCapacity this distinct ; ( oldCapacity ; ; ) ( FULL ) element oldTable ; indexInsertion ( element ) ;Table index element ; newValues index = oldValues ; newState index = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( HpackHeaderField header ) { headerSize ( ) ; ( headerSize capacity clear ( ) ; ; } ( capacity headerSize remove ( ) ; }packHeader head header ; size size ( ) ; ( headpackHeaderFields head ; } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction initial ) { ( LaunchListener listener listenersLauncher listener notifyF ( ) ; } ( LaunchableConfig launchableConfig launchables Media media Med ( launch getMedia ( ) ) ; Feurable featurable ( media ) ; Launch launch featurable getFeature ( Launch ) ; ( launchable getDel ( ) ) delayed ( DelayLaunch ( launch initial featurable launch ) ) ; } launch ( launchConfig initial featurable launch ) ; } } LionEngine ) featurable getFeature ( Identifiable ) destroy ( ) ; ; } } }<CODESPLIT>Called when fire is performed .
public static void init ( InvocationManager invmgr RootDObjectManager om ) {vmmgr ; ; inv ( TimeBase ( ) TimeBaseMarshaller GLOBALGROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static UfsJournalFile createLogFile ( URI location long start long end UJournal ( location ) ; }<CODESPLIT>Creates a journal log file .
protected Object writeReplace ( ) throws java.. ObjectStream { CertificateRep ( type getEncoded ( ) ) ; } CertificateException new javaSerializable (javasecuritycertCertificate + type + + ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extractThrowable ( Object arguments ) { arguments? : extractThrowable ( arguments arguments ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static List < Map < IBond IBond makeBondMapsOfAtomMaps ( IAtomContainer ac1 IAtomContainer ac2 List < Map < IAtom IAtom mappings ) { IBond IBond bondMaps IBond IBond ( ) ; ( IAtom IAtom mapping mappings bondMaps ( makeBondMapAtomMap ( mapping ) ) ; } bondMaps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public LongConstant addLong ( long value ) {ConstantByValue ( value ) ; ( ) ;Constant (entries ( ) ) ;Constant ( ) ;Constant ( ) ; entry ; }<CODESPLIT>Adds a long constant .
public GeoPackage getOrOpen ( name File file getOrOpen ( ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extractVersionFromSchemaName ( String clz_name ) { clz (V ) ; ( ) ; return Integer valueOf ( clz_name substring ( idx + ) ) ; } ) return ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void drawShape ( Canvas canvas Paint paint Path path ShapeAppearanceModel shapeAppearanceModel RectF bounds ) { ( shapeAppearanceRound ( corner shapepearanceModel getTop ( getCor ( ; canvas drawRound ( corner corner paint ) ; } canvas draw ( paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public AnalyzerJob getAnalyzerJob ( final String descriptorName, final String analyzerName, final String analyzerInputName ) { AnJob candidates (jobs ) ; =Candidates ( o actualDescriptor getDescriptor ( ) getDisplayName ( ) ; return descriptorName equals ( actualDescriptorName ) ; } ) ; ( analyzer ) =Candidates ( o actualAnalyzer ( ) ; return analyzerName equals ( actualAnalyzerName ) ; } ) ; } ( analyzerInput ) =Candidates ( o InputColumn? inputColumn getIdentInputColumn ( ) ; ( inputColumn ) return ; } return analyzerInputName equals ( inputColumn getName ( ) ) ; } ) ; } ( candidates ( ) ) ( AnalyzerJob candidates choose ) ; return ; } ( candidates ( ) ) (Multiple AnalyzerJob choose ) ; } return candidates iterator ( ) next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public removeExecutedTradeCallback ( BitExecutedTradeSymbol tradeSymbol BiConsumer BitExecutedTradeSymbol BitExecutedTrade Bit traCallbacks removeCallback ( tradeSymbol ) ;<CODESPLIT>Remove a executed trade callback
public HealthDto doPrimaryHealthCheck ( ) HealthDependency primaryHealthDependencies healthDependencies ( ( filter ( HealthDependencyPrimary ( ( ; checkHealth ( primaryHealthDependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitroservice service ) Exception appfwxmlpage appfwxmlpage ( ; appfwxmlerrorpage ( appfwxmlerrorpageresources ( service ) ; ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void setupClient ( AbstractHttpClient client ) {. client. addResponseInterceptor ( HttpResponseInterceptor ( ) { void process ( HttpResponse response HttpContext context ) throws HttpException IOException { (Location ) ; ( setAttribute ( ( ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quickSelect ( List < P > points, int splitAxis, int medianNum ) { numPoints points ( ) ; ( numPoints ) numPoints ; indexes numPoints ; } ( ; numPoints ; ) distance valueAt ( points ( ) splitAxis ) ; } QuickSelect selectIndex ( medianNum numPoints indexes ) ; }<CODESPLIT>Uses quick - select to find the median value
public void writeHtml ( JspWriter pOut, String pHtml ) throws IOException { (Html>& ) ; ( parser ( token ( ) ; ( token ( "<" ) ) p print ( "&lt ) ; } ( token ( ) ) p print ( "& ) ; } ( token ( "&" ) ) p print ( "& ) ; } p print ( token ) ; } } }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected getNodeName ( Node node ) { getLocalName ( ;? node getNodeName ( ) : ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void setExpiryDate ( IntRange ( from to ) int month IntRange ( from to 9999 ) int year ) {ExpiryEdit setText ( Date ( month year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected void writeApplyDdl ( DdlWrite write ) { scriptApply ( drop dependencies applyDropDependencies ( ) ( ) apply changes apply ( ) ( ) write applyForeignKeys ( ) ( ) write applyHistoryView ( ) ( ) write applyHistoryTrigger ( ) ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static boolean classEquals ( Class clz1 Class clz2 ) { ( clz clz new ( ) ; } clz clz clz getName ( ) ( clz getName ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void addSharedFunction ( ISource source ) { source ( ( source ( ; doAddShared ( source fileName ) ; }<CODESPLIT>Add shared function by ISource
public setCommercePriceListService ( com liferay commerce price list service. CommercePriceListService commercePriceListService commercePriceList commercePriceList ;<CODESPLIT>Sets the commerce price list remote service .
public HtmlTree MAIN ( ) HtmlTree html HtmlTree ( HtmlTag MAIN ; htmlRole ( Role MAIN ; html ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabelstats get ( nitroservice service labelname ) Exception { cachepolicylabel cachepolicylabel ( ;label ( label ; cachepolicylabelstats ( cachepolicylabelstats ) obj statresource ( service ) ; ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void saveBroker ( File mapfile HashMapIDBroker broker ) throws RuntimeException { ( broker isModified ( ) ; } ( ( ) ) ; broker writeTo ( ) ; close ( ) ; } new ( store component ID mapmapfile + mapfile +, ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( Collection T values Data jdbcTemplate. execute ( ConnectionCallback Object ( Object doInConnection ( Connection connection SQLException Data crud update ( values ; ; } } ; }<CODESPLIT>update the objects .
public MutableInt fromExternal ( IntSupplier s IntConsumer c MutableInt ( ) getAsInt (Int ( ) ; } Integer get (Int ( ) ; } MutableInt set ( value ) accept ( ; ; } } ; }<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) { (Reload configuration ) ;Write ( ) ; this config = config ; processAppPackages ( ) ; }Write ( ) ; } }<CODESPLIT>Replace the configuration of this instance directly .
protected void addPropertiesStart ( String type ) {Property ( Host ( ) Ip getHost ( ) ) ; putProperty ( ( ) ) ; putProperty ( ( ) Start ( ) ) ; }<CODESPLIT>Add properties to properties map on transaction start
public List SequenceListType. Sequence getSequence ( ) { ( sequence sequence Sequence Sequence ( ) ; } this sequence ; }<CODESPLIT>Gets the value of the sequence property .
public MapBuilder addNumber ( String fieldName include Supplier Number supplier ) { ( include supplier ( ) ; ( map ( getFieldName ( fieldName ) ) ; } } this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnectCardOneConsumer ( ) { ( TraceComponent ( ) tc ( ) ) SibTr ( tcdisconnectCardOneConsumer ) ; Object clonedConsumerPoints ; ( consumerPoints ) { clonedConsumerPoints consumerPoints ( ) ; } Simit Simit ( (CONSUMERCARDINLIMITREACHED Object getDest ( ), getLocalisationUuid ( ) ( ) }, ) ) ; ( e,comsibprocessorimplRemoteConsumerDispatcherdisconnectCardOneConsumer,21, this ) ; SibTr exception ( tc, e ) ; ( ; < clonedConsumerPoints ; ) DispatchableKey = ( DispatchableKey ) clonedConsumerPoints ; ck notifyConsumerPointAboutException ( e ) ; } ( TraceComponent ( ) tc ( ) ) SibTr ( tcdisconnectCardOneConsumer ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public isAdministrator ( AuthContext ctx ) getUsername ( ) getUsername ( ) ( admin ) ctx getPassword ( ) ctx getPassword ( ) ( adminPass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { ( settings aut (Runner ( ) ; config ( runner + runner getClass ( ) ( ) ) ; } ( OperaDefaults SERVER ) ; }ScopeServices ( ) ; ( runner runner startOper ( ) ; } services init ( ) ; debugger servicesDebugger ( ) ; debuggerDriver ( ) ; windowManager services getWindowManager ( ) ; exec servicesExec ( ) ; core services getCore ( ) ; cookieManager services getCookieManager ( ) ; mouse OperaMouse ( ) ; keyboard OperaKeyboard ( ) ; servicesConsoleLogger ( ) onConsoleMessage ( ConsoleMessageConverter ( logs ) ) ;Product ( ( ) getProduct ( ) ) ; ( ( getUserAgent ( (Min preferences OperaScopePreferences ( services getPre ( ) ) ; preferences ( ) ( P Un Pop ) ; ( ( ) getProduct ( ) ( M ) ) preferences ( ) ( P Aut Form Element ) ; } } proxy OperaProxy ( ) ; proxy parse ( settings getProxy ( ) ) ; }<CODESPLIT>Initialize required Scope services .
public static String calculateMD5 ( String string ) { hash ; hash (MD ) digest ( string (UTF ) ) ; } NoSuchAlgorithmException ) new RuntimeException ( "Huh MD5 should supported, e ) ; } UnsupportedEncodingException ) new RuntimeException ( "Huh UTF- should supported, e ) ; } hex ( hash 2 ) ; ( byte hash ) ( & ) ; (10 ) hex ( ) ; hex ( Integer toHexString ( ) ) ; } return hex. toString ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File findRawDir ( File dir ) { ( dir 20 ; rawDir findResRawDir ( dir ) ; ( raw ) rawDir ; } dir dir ( ) ; } ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public Object resolveVariable ( pName ) EL ELEL ( ) ; ctxELResolver ( ) getValue ( ctx pName ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected DependantValue createPrimaryKeyValue ( InFlightMetadataCollector mappings PersistentProperty property Collection collection Map < persistentClasses ) { KeyValue keyValue ; Depend key ; property collection getReferencePropertyName ( ) ; ( propertyRef keyValue collection getOwner ( ) getIdentifier ( ) ; } keyValue ( KeyValue ) collection getOwner ( ) ( property ) ( ) ; } ( ( (GraDomainBinder creating depend key table + keyValue getTable ( ( + ; key Dependant ( metadataBuilding collection getCollectionTable ( ) keyValue ) ; key ( ) ; key ( ) ; key ( ) ; key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected AVariableExp getVarExp ( ILexNameToken name PDefinition vardef PType type A getVarExp ( ; ( ; var ;<CODESPLIT>Generate Var Exp with everything!
public static boolean isNullOrWhiteSpace ( String arg ) { ( ( ) ( ) ( ) ) ; } ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public BlockInfo queryBlockByNumber ( blockNumber Proposal query ( getShuffPeers ( EnumSet ( PeerRole LEDQUERY ) ) block ) ;<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
 (" Getter getGetter ( Class type name )GettersMap ( type ) ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static String decodeLZToString ( byte data String dictionary ) { String ( decodeLZ ( data )UTF ) ; } ( ) ; } }<CODESPLIT>Decode lz to string string .
public AirlineUpdateTemplateBuilder addAirlineUpdateTemplate ( introMessage locale pnNumber UpdateType updateType AirlineUpdateTemplate ( introMessage locale pn ) ;<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void addModulesArgument ( final String argument, final List < String > arguments, final Module [ ] modules, final String aditionalpath, final String role ) throws MojoExecutionException { ( ) ; (path ) arguments ( argument ) ; ( aditionalpath ) ; } ( modules modules ) ( arguments ( argument ) ) arguments ( argument ) ; } ( ; modules ; ) Module module = modules ; Artifact artifact ; ( ) SetArtifacts projectArtifacts ( ) ; ( Artifact art allArtifacts ) ( art getGroupId ( ) ( module getGroupId ( ) ) art getArtifactId ( ) ( module getArtifactId ( ) ) default ( module getClassifier ( ) ) ( default ( art getClassifier ( ) ) ) default ( module ( )jar ) ( default ( art ( ) ) ) ) artifact = art ; } } ( artifact ) new MojoExecutionException ( artifact + module ( ) + referenced aspectj plugin + role + found project dependencies" ) ; } ( buf ( ) ) ( pathSeparator ) ; } ( artifact getFile ( ) getPath ( ) ) ; } } ( buf ( ) ) pathString ( ) ; arguments ( pathString ) ; ( ) (Adding + argument + + pathString ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static extractAeroGearSenderInformation ( HttpServletRequest request ) { getHeader (ogearsender ; ( hasValue ( client ; } request getHeader (useragent ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux ServiceMessage requestMany ( ServiceMessage request Class responseType Address address ) { Flux defer ( ( ) ( parameter required ) ; ( transporttransport required ) ; transport create ( address ) requestStream ( request ) map ( message ServiceMessageCodec decodeData ( message responseType ) ) map ( thisError ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incrementalRestore ( File incrementalBackupFile ) throws FileNotFoundException, IOException, ClassNotFoundException, RepositoryException { ObjectInputStream ; ObjectInputStream ( file ( incrementalBackup ) ) ; ( TransactionChangesLog changesLog readExternal ( ois ) ; changesLog setSystem ( JCRRESTWORKSPACEINITIALIZ ) ; ChangesLogIterator cli changesLog getLogIterator ( ) ; (Log ( ( cliLog ( ) getEvent ( ) ExtendedEvent LOCK ) cli removeLog ( ) ; } } saveChangesLog ( changesLog ) ; } } ) ( ( ) ) ( + ( ) ) ; } } }<CODESPLIT>Perform incremental restore operation .
public Key Integer start ( ) Key object Key ( ; consumers. put ( object Consumer Integer ( ) ; void consume ( ByteBuffer buffer ) remaining ( ; } Integer finish ( ) { count ; } } ) ; object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean isElementPresent ( String locator ) { ( locator ) ; ; flag HtmlElement locateElement ( locator ) ; } } ( flag ) ; flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String args [ ] ) throws Exception { buffer ( lazyox ) ; Thread t1 = new Thread ( ) { public void run ( ) { ( buffer buffer delete ( ) ; buffer ( middle ) ; (Middle ) ; Thread sleep ( ) ; } ) } buffer ( fall ) ; (Fall ) ; } } } ; Thread t2 = new Thread ( ) { public void run ( ) { Thread sleep ( 1000 ) ; } ) } buffer ( jump over fence ) ; (F ) ; } } ; start ( ) ; start ( ) ; join ( ) ; join ( ) ; ( buffer ) ; }<CODESPLIT>We have more input since wait started
protected double interpolate ( double boundA double boundB ) { alpha ; ( isNaN ( gp ) ) alphaNew SearchInterpol quadratic ( f g fp ) ; } alphaNew SearchInterpol cubic ( f g fp gp ) ; ( isNaN ( alphaNew ) ) alphaNew SearchInterpol quadratic (prev gprevprev fp st ) ; } u ; ( bound boundB ) = bound ; u = bound ; } = bound ; u = bound ; } ( alphaNew ) alphaNew ; ( alphaNew u ) alphaNew u ; return alphaNew ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List < SemanticError > check ( DataType dataType ) {er (Checking semantic constraints on datatype + dataType name ) ; Semantic > errors Semantic > ( ) ; > constructor > ( ) ; ( Constructor constructor dataType constructors ) (Checking semantic constraints on constructor + constructor name + datatype + dataType name ) ; ( dataType constructors ( ) dataType name ( constructor name ) ) (Constructor name data type + dataType name + ) ; errors (ConstructorDataTypeConflict ( dataType name ) ) ; } ( constructorNames ( constructor name ) ) (Two constructors name + constructor name + data type + dataType name + ) ; errors ( _DuplicateConstructor ( dataType name name ) ) ; }Names ( name ) ; } errors ( check ( dataType ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
 ( } ) protected void registerDependency ( List additionalList GrailsPlugin plugin ) { ( added ( plugin ( ) ) added ( plugin ( ) ) ; additional ( plugin ) ;PluginDependencies ( additional plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private JsonNode executeRequest ( HttpPost request ) throws IOException GroovesharkException { httpClient execute ( request ) ; (Logging )Request ( request, response ) ; }Payload CharStreams ( ( getEntity ( ) getContent ( ) Char ) ) ; jsonMapper readTree ( StringReader (Payload ) ) ; } Json new Gark Server ( parse received data valid JSON +Payload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map < String, T parseMap ( JsonParser jsonParser ) throws IOException { T map T ( ) ; ( (OBJECT key json getText ( ) ; jsonParser ( ) ; ( jsonParserToken ( ) VALUENULL ) map put ( key ) ; } map put ( key parse ( jsonParser ) ) ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public DateFuncSup subtract ( DateSeperator d ) date ( date ( ( ; ; }<CODESPLIT>subtract date on supported date
private double radicalInverse ( long i ) { digit = ( ) base ;ical = digit ; inverse = ; ( inverse ( ) ( base ) ; digitical ; base ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String getTempDir ( ) { ( FileUtil class ( TEMPDIR ) tmpDir System (javatmp ) ; ( StringUtil ( ) ) ( File (temp ) ( ) ) tmpDir =temp ; } tmpDir = ; } }DIR = tmpDir ; } } return TEMP_DIR ; }<CODESPLIT>Gets the default temp directory for the system .
public static Accumulator Value Accumulator reduce ( List Value list Accumulator init ReduceClosure Accumulator Value f ) Acc ; ( Value list accumulator eval ( accumulator ) ; } accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected ProcessOutput executeProcess ( FaxJob faxJob String command FaxActionType faxActionType ) { ( command )Unsupported ( ) ; }Command command ; (WindowsCommandPrefix ) buffer ( updatedCommand ( ) windowsCommand ( ) ) ; ( windowsCommandPrefix ) ; ( ) ; (Command ) ;Command ( ) ; } ProcessOutput processOutput ProcessExecutor executeProcess (Command ) ; validateProcessOutput ( processOutput fax ) ; updateFaxJob ( faxJob processOutput fax ) ; processOutput ; }<CODESPLIT>Executes the process and returns the output .
public ModelNode getConnector ( name ) throws Exception { Address Address ( ( SUBSYSTEM SUBSYSTEMWEB CONNECT ; readResource ( address ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( CharsetDetector det, int [ ] commonChars ) { ( ) int single = ;ByteChar ; commonChar ; badChar ; totalChar ; confidence ; iteratedChar iteratedChar ( ) ; detectBlock : ( reset ( ) ; nextChar ( det ) ; ) totalCount ; ( error ) badCount ; } cv charValue &L ; ( cv ) singleByteCount ; } doubleByteCount ; ( commonChars ) ( binarySearch ( commonChars ( int ) cv ) )Count ; } } } } ( badChar 2 badChar 5 doubleByteChar ) detectBlock ; } } ( doubleByteChar 10 badChar ) ( doubleByteChar totalChar 10 ) confidence = ; } confidence = 10 ; } detectBlock ; } ( doubleByteChar 20 badChar ) confidence = ; detectBlock ; } ( commonChars ) confidence = 30 + bad ; ( confidence 100 ) confidence = 100 ; } } maxVal log ( ( )ByteCharCount 4 ) ; scale = 90 maxVal ; confidence ( int ) ( log ( commonCharCount + ) scaleFactor + 10 ) ; confidence min ( confidence, 100 ) ; } } return confidence ; }<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( DMatrix src int srcY0 int srcY1 int srcX0 int srcX1 DMatrix dst ) { ( ( ReshapeMatrix ) ) ( src src src src ) ; extract ( src src src src src dst ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resizeEip ( ResizeEipRequest request ) { ( request getNewBandwidthps ( )Bandwidthps ) ; check ( request getEip ( )ip ) ; ( ( request getClientToken ( ) ) ) setClientToken ( generateClientToken ( ) ) ; }Request internalRequest ( request Http PUT request getEip ( ) ) ; internalRequest (resize ) ; internalRequest ( CLIENTTOKENIFY request getClientToken ( ) ) ; fillPayload ( internalRequest request ) ; invoke ( internalRequest AbstractB ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void useNextAddressAsNewContactSeedBroker ( ) { (ContactSeedBroker seedBrokerAddresses )ContactSeedBroker = ; }Contact Net getCorrect ( seedBrokerAddressesContactSeedBroker ) ; consumer SimpleConsumer (Contact getHost ( )Contact ( ) so bufferSize dummyClientId ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { ( ) ; ( ; value ( ) ; ) c value ( ) ; ( ESCAPEPREFIX ) code value ( + + 3 ) ; code Integer ( code 16 ) ; ( code reservedChars reservedChars code code ) ( reservedChars code ) ; ; } new ServiceLocation ( "Unknown escaped character " + ESCAPEPREFIX + codeString + " at position " + ( i + 1 ) + " of " + value, S PARSE ) ; } } ( c ) ; } } return. toString ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected HashMap readFile ( HashMap brMap ) throws IOException { ( ) ; > exp > ( ) ; files readObData (Map ) ;Data ; ; expData ; ( files ( ) ) obvData ( ) files (name ) ( obv ) ; ( obSub obData ) expData ( ) ; obv ( ) ; copyItem ( expData files (name )exname ) ; copyItem ( expData files (name )crid ) ; copyItem ( expData files (name )local_name ) ; expData put ( jsonKeyv ) ; obv put ( obvKey obvSub ( obv ) ) ; exp ( expData ) ; } } id ( ) ; idNames (no ) ; removeIndex ( exp idNames ) ; put (experiments exp ) ; return ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static FixedStringSearchInterpolator createInterpolator ( MojoParameters params String filter ) { delimiters extractDelimit ( filter ) ; ( delimitersStringSearchInterpolator create ( ) ; } DockerAssembly DockerAssembly ( ) ; AssemblyInterpolator fullInterpolator ( params getProject ( ) DefaultAssemblyReader createProjectInterpolator ( params getProject ( ) )ExpressionMarkers ( ) configSource )ExpressionMarkers ( delimiters ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean isPartitionCleanupInProgress ( ZooKeeper zk ) throws KeeperException { children zk getChildren ( VoltZK leadinit ) ; ZK ChildrenCallback childrenCallbacks ( ) ; ( child children ) ZK ChildrenCallback callback ZK ChildrenCallback ( ) ; zk getChildren ( ZK joinZKPath ( VoltZK leadinit child ) callback ) ; childrenCallbacks ( callback ) ; } ( ZKCallback callback childrenCallbacks ) ( callback ( ) ( ) ) return ; } } return ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private byte [ ] unifyLData ( final CEMI ldata, final boolean emptySrc, final List < Integer > types ) { data ; (data CEMDataEx ) CEMDataEx ( ( CEMDataEx )data ) ; AddInfo > additionalInfo additionalInfo ( ) ; ( additionalInfo ( Iterator AddInfo additionalInfo ( ) ; ( ) ; ) AddInfo ( ) ; ( types ( info ( ) ) ) (remove LData additional ) ; remove ( ) ; } } } } datadata ( ) ; data = ; data + data + = ; ( emptySrc ) data + data + = ; data + data + = ; } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static < T extends Number > int [ ] asArray ( final T... array ) { b array ; ( ; < b ; ) b i array i intValue ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void setActiveChunkHandle ( SegmentHandle handle ) ( handle handle ( )Active SegmentChunk handle cannot readonly ) ; SegmentChunkChunk ( ) ; checkState (Cannot an Active SegmentChunk handle are no SegmentChunks ) ; checkArgument ( handle handle getSegment ( ) ( getName ( ) )Active SegmentChunk handle SegmentChunk ) ; this activeChunkHandle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String getEmptyValue ( ) { ( TimexInterval featOkTst ( ( TimexInterval ) jcasType ) casFeatempty ) jcasType jcas throwFeatMissing (emptydeunutypeshetimeTimexInterval ) ; return jcasType llcas ll ( addr, ( ( Timex3IntervalType ) jcasType ) casFeatCode_emptyValue ) ; }<CODESPLIT>getter for emptyValue - gets
public static AccountInfo adaptAccountInfo ( BitstampBalance bitstampBalance, String userName ) { Balancealances ( ) ; ( knowchange bitstamp dto account BitstampBalance bitstampBalance getBalances ( ) ) BalancechangeBalance Balance ( Currency ( getCurrency ( ) ( ) ) getBalance ( ) getAvailable ( )Reserved ( ) getBalance ( ) ( getAvailable ( ) ) (Reserved ( ) ) ) ; (changeBalance ) ; } return AccountInfo ( userName, bitstampBalance getF ( ), Wallet ( b ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void afterConnectionClosed ( WebSocketSession session CloseStatus status ) (WebSocket closed Close session ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trimLastPathSection ( String path ) { sections path split ( ) ; newPath ( ) ; ( ; < sections ; ) newPath ( sections ) ( "/" ) ; } return newPath. toString ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ( ) Style style Style ( ; style color Palette ( Palette MATER ) ; style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public ManagedObjectContext createContext ( ) { Bean T bean ; EDescriptor T ejbDescriptor getEDescriptor ( ) ; ( ejbDescriptorMessageDr ( bean getBean ( ) ; } W bean getBean ( ) ; WCreational T creation beanManagerCreational ( bean ) ; ManagedObject managedObject CManaged ( ) ; managedObjectContext ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public void deleteOperation ( String name ) { ( ) ( ) ( ) ; deleteOperation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public isMember ( x ) { ( currentState BitsState UNKNOWN ) ; x x < ( bits word ) ( bits x word & ( ( x & word ) ) ) ; }<CODESPLIT>Is x an element of this set?
publicRegistration addSearchFinish ( SearchFinishEvent SearchFinishHandler handler addHandler ( SearchEvent ) ;<CODESPLIT>This handler will be triggered when search is finish
public void setForeignBusSendAllowed ( boolean sendAllowed ) { ( ( ) tc ( ) ) SibTr ( tcForeignBusSendAllowed ( sendAllowed ) ) ; }sendAllowedTargetForeignBus ( sendAllowed ) ; ( aliasesTargetThisDest ) ( aliasesDest Iterator aliasesTargetDest ( ) ; ( ( AbstractAliasDestinationHandler abstractAliasDestinationHandler ( AbstractAliasDestinationHandler ) ( ) ; abstractAliasDestinationHandlerForeignBus ( send ) ; } } } ( ( ) tc ( ) ) SibTr ( tcForeignBusSendAllowed ) ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processingInstruction ( target String data ) throws SAXException { ( document document processing ( ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer getFileSizeOnFTPServer ( String hostName, Integer port, String userName, String password, String filePath ) { Integer ; reply executeCommandFTPServer ( hostName port userName password filePath ) ; ( replyString replyString ( ) ) new RuntimeException ( String format ( " get size of file Got reply from FTP server, filePath, replyString ) ) ; } Integer valueOf ( replyString split ( ) ( ) ) ; } return ; }<CODESPLIT>Get size of the FTP file .
public static base_responses enable ( nitro_service client, String trapname [ ] ) throws Exception { baseresponses ; ( trapname trapname ) snmpalarm enableresources snmpalarm trapname ; ( ; trap ; ) enableresources snmpalarm ( ) ; enableresources trap = trap ; } performbulkrequest ( client, enableresources,enable ) ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void ordered ( Consumer T action ) TopSorter sorter TopSorter ( ; sorter ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static SeqServerGroup parse ( String asg ) { ( ) ; ( + ) ;N ( '-' ) ; (NSequence ( asgN ) ) dN asg ( ) ; } return new SeqServerGroup ( asg, d1, d2, dN ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int getMapCount ( int srcCount int numNodes ) {Maps ( ) ( src OP ) ;Maps min (MapsNodesMAPNODE ) ; return max ( numMaps, ) ; }<CODESPLIT>Calculate how many maps to run .
protected void channelRead0 ( ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg ) throws Exception { ( msg getStatus ( SUCCESS originalPromiseSuccess ( ) ; pipeline ( ) remove ( this ) ; ctx fireChannelActive ( ) ; ACCESS originalPromise ( (Authentication on Select Bucket ) ) ; originalPromise ( (Bucket on Select Bucket ) ) ; : originalPromiseFailure ( (Unhandled select bucket status + ( ) ) ) ; } }<CODESPLIT>Handles incoming Select bucket responses .
private DiceNotationExpression unwrap ( DiceNotationExpression expression ) DNotationExpression ; expression ExpressionWrapper ( ( ExpressionWrapper expressionWrappedExpression ( ; } expression ; } ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float [ ] checkArrayElementsInRange ( float [ ] value, float lower, float upper, String valueName ) { ( value value + ) ; ( ; value ; ) v value ; ( isNaN ( ) ) new IllegalArgumentException ( value + + i + NaN" ) ; } ( lower ) new IllegalArgumentException ( String format ( out of range offf ( low, value, i, lower, ) ) ; } ( upper ) new IllegalArgumentException ( String format ( out of range offf ( high, value, i, lower, ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public void copy ( InputStream inputStream OutputStream outputStream ) copy ( outputStream ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection < Tuple > getTuples ( List < VarDef > varDefs, int varStart, int varEnd, int tupleSize ) { Collection Tuple tuples Tuple ( ) ; ( ; ; ) VarDefVarDefs ( ) ; Iterator VarDef values getValidValues ( ) ; ( values ( ) ) new (Can complete tuples -- valid values defined var + nextVar ) ; } Collection Tuple subTuples tuple? : getTuples (Defs + + tuple ) ; ( subTuples ) ( values ( tuples ( Tuple ( VarBindingDef ( values ( ) ) ) ) ; } } ( subTuples ( ) ) ( values ( VarBindingDefBinding VarBindingDef ( values ( ) ) ; ( Tuple subTuple subTuples ) TupleTuple Tuple (Binding ) ( subTuple ) ; (TupleCompatible ( ) ) tuples (Tuple ) ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public V get ( K key ) { hash hash ( key ) ; slot ( hash ) ; ( < K V table slot ; null ; ) ( hashCode hash key ( key ) ) return entry. value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public validSecondFactor ( secret number ) ( secret Required ( ) ) ; ( number Required TOTP ( ) ) ; Totp verifiedTotp ( secret number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void updateOutgoingEdgesStateDL ( int currS, int currL, int prevS, int prevL, Emissions emission ) { updateOutgoingEdges (L States DLL States DL TransitionsDL em ) ; updateOutgoingEdges (L States DLL States S TransitionsDL em ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void setPrefix ( String key String prefix ) { fieldname ( key ) ; PdfObject ( fieldname ) ; ( ) ( before prefix ) ; PdfDictionary dict PdfDictionary ( COLLECTIONSUBITEM ) ; dict put ( D ) ; dict ( P Pdf ( prefix PdfObject TEXT ) ) ; put ( fieldname dict ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected AbstractExpression replaceExpressionsWithPve ( AbstractExpression expr ) { assert ( expr ) ; ( expr TupleExpression ) param ParameterInfoParam ( ) ; ParameterExpressionve ParameterExpression ( param expr ) ; mparameterTMap put ( param expr ) ; return pve ; } ( expr AggregateExpression ) param ParameterInfoParam ( ) ; ParameterExpressionve ParameterExpression ( param expr ) ; TupleExpression Expression getTupleExpressions ( expr ) ; assert (parentStmt ) ; ( TupleValueExpressionve ) origveStmt ( ) ; (Id origIdparentStmtId origId ) new Pl (Subqueries support aggregation of parent statement columns" ) ; } } mparameterTMap put ( param expr ) ; return pve ; } ( expr getLeft ( ) ) exprLeft ( replaceExpressionsP ( expr getLeft ( ) ) ) ; } ( expr ( ) ) expr ( replaceExpressionsP ( expr ( ) ) ) ; } ( expr getArgs ( ) ) AbstractExpression ( ) ; ( AbstractExpression argument expr getArgs ( ) ) ( replaceExpressionsve ( argument ) ) ; } expr ( ) ; } return expr ; }<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean addCallback ( String applicationId DelayedCallback callback ) { ; DelayCallback BACKLOG ( applicationId ) ; ( list ) DelayCallback ( ) ; BACK put ( applicationId, list ) ; ; } list ( callback ) ; isFirst ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static byte [ gunzipBytes ( byte [ compressedBytes ) throws IOException { ( ( ) ( compressed ) ) ; Infl dos Infl ( ) ; write ( compressed ) ; ( ) ; toByteArray ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public TupleValueExpression getOutputExpression ( index ) SchemaColumn schema getSchemaColumn ( ) ; TupleExpressionve TupleExpression ( getTableAlias ( getTableAlias ( schemaAlias ( schema getColumnAlias ( ;ve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
