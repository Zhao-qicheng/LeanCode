public final ExampleData getSelectedExampleData ( ) { Set < String > allSelectedItems = getSelectedRows ( ) ; if ( allSelectedItems allSelectedItems isEmpty ( ) ) { return null ; } ( selectedItem allSelectedItems ) List < Integer > rowIndex = TreeItemUtil rowIndexList ( selectedItem ) ; return getTreeModel ( ). getExampleData ( rowIndex ) ; } return null ; }<CODESPLIT>Get the example which is selected in the tree .
public void dimAt ( float alpha ) { if ( mDimEnabled ) { return ; } if ( mDimView ) { mDimView = makeDimView ( ) ; } if ( mDimViewShown ( ) ) { mDimView setVisibility ( VISIBLE ) ; mDimView setBackgroundColor ( mDimColor ) ; } mDimView setAlpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { if (Found ( ) ) throw new IllegalStateException (Extract can only be called once ) ; extractSW start ( ) ; SPTEntry currEdge = sptEntry ; setEndNode ( currEdge. adjNode ) ; nextEdgeValid = EdgeIterator Edge isValid ( currEdge edge ) ; nextEdge ; ( next ) nextEdgeValid = EdgeIterator. Edge. isValid ( currEdge. parent. edge ) ; nextEdge = nextEdgeValid? currEdge parent edge : EdgeIterator NOEDGE ; processEdge ( currEdge. edge, currEdge. adjNode, nextEdge ) ; currEdge = currEdge parent ; } setFromNode ( currEdge. adjNode ) ; reverseOrder ( ) ; extractSW. stop ( ) ; return setFound ( true ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static int writeInt ( byte [ ] target, int offset, int value ) { target offset = ( byte ) ( value 24 ) ; target offset + 1 ] = ( byte ) ( value 16 ) ; target offset + 2 ] = ( byte ) ( value 8 ) ; target offset + 3 = ( byte ) value ; return Integer. BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visitGetElem ( Node n ) { validator expectIndexMatch ( n getJSType ( n getFirstChild ( ) ) getJSType ( n getLastChild ( ) ) ) ; ensureTyped ( n ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class <? > getTypedClass ( java. lang. reflect. Type type ) { if ( type Class ) { return ( ( Class ) type ) ; } if ( type ParameterizedType ) { java lang. reflect. Type rawParamizedType = ( ( ParameterizedType ) type ). getRawType ( ) ; return getTypedClass ( rawParamterizedType ) ; } if ( type TypeVariable ) { java lang reflect Type upperBound = ( ( TypeVariable ) type ) getBounds ( ) ; return getTypedClass ( upperBound ) ; } throw new IllegalArgumentException ( "Error while finding generic class for :" + type ) ; }<CODESPLIT>Gets the typed class .
public URI toUri ( JimfsPath path ) { fileStore state ( ) checkOpen ( ) ; pathService toUri ( uri, path toAbsolutePath ( ) ) ; }<CODESPLIT>Gets the URI of the given path in this file system .
public ActivityInterface getActivityInterface ( ) { if ( activityInterface ) activityInterface = ActivityInterface ( apiKey, sharedSecret, transport ) ; } return activityInterface ; }<CODESPLIT>Get the ActivityInterface .
private void initBeforeList ( ) { final List < ProcessAdvice > beforeRequestProcessAdvices = new ArrayList < > ( ) ; final Method invokeHolder = getInvokeHolder ( ) ; final Class <? > processorClass = invokeHolder getDeclaringClass ( ) ; if ( processorClass && processorClass isAnnotationPresent ( Before ) ) { final Class <? extends ProcessAdvice > bcs = processorClass getAnnotation ( Before class ). value ( ) ; ( i = ; i < bcs. ; i ) final Class <? extends ProcessAdvice > bc = bcs i ; final ProcessAdvice beforeRequestProcessAdvice = BeanManager. getInstance ( ). getReference ( bc ) ; beforeRequestProcessAdvices. add ( beforeRequestProcessAdvice ) ; } } if ( invokeHolder isAnnotationPresent ( Before ) ) { final Class <? extends ProcessAdvice > bcs = invokeHolder. getAnnotation ( Before. class ). value ( ) ; ( i = ; i < bcs. ; i ) final Class <? extends ProcessAdvice > bc = bcs i ; final ProcessAdvice beforeRequestProcessAdvice = BeanManager. getInstance ( ). getReference ( bc ) ; beforeRequestProcessAdvices. add ( beforeRequestProcessAdvice ) ; } } this. beforeRequestProcessAdvices = beforeRequestProcessAdvices ; }<CODESPLIT>Initializes before process advices .
private void init ( ) { jsFactory = JsonFactory ( ) ; jsFactory configure ( JsonParser Feature ALLOW_COMMENTS, ) ; jsFactory. configure ( JsonParser. Feature. ALLOW_SINGLE_QUOTES, ) ; jsFactory. configure ( JsonParser. Feature. ALLOW_NON__NUMBERS, ) ; }<CODESPLIT>Creates the JsonFactory .
static void flushStackLocalLeaks ( Looper looper ) { Handler handler = new Handler ( looper ) { public void handleMessage ( Message msg ) { sendMessageDelayed ( obtainMessage ( ), THREADAKCLEANINGMS ) ; } } ; handler sendMessageDelayed ( handler obtainMessage ( ), THREADLEAKCLEANINGMS ) ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void addReset ( String label ) { if ( buttons ) buttonsAtBottom ( ) ; Element e = new Input ( Input. Reset,Reset, label ) ; if ( extendRow ) addField ( null, e ) ; buttons add ( e ) ; }<CODESPLIT>Add a reset button .
public static int getMaximumVolume ( Context context ) { return ( ( AudioManager ) context getSystemService ( Context AUDIOSERVICE ) ) getStreamMaxVolume ( AudioManager STREAM_MUSIC ) ; }<CODESPLIT>Returns maximum volume the media volume can have
@ SuppressWarnings ( "checkstyle:npathity" ) public void removeSREs ( ISREInstall... sres ) { final ISREInstall defaultSRE = getDefaultSRE ( ) ; final String defaultId = defaultSRE null? null : defaultSRE. getId ( ) ; defaultIndex = ; if ( defaultId null ) { ( i = ; defaultIndex == - && i < this. sreTable. getItemCount ( ) ; i ) if ( defaultId ( ( ( ISREInstall ) this sreTable getItem ( i ) getData ( ) ) getId ( ) ) ) { defaultIndex = ; } } } final String normedDefaultId = Strings. nullToEmpty ( defaultId ) ; defaultIsRemoved = ; ( final ISREInstall sre : sres ) if ( this sreArray remove ( sre ) && sre getId ( ) ( normedDefaultId ) ) { defaultIsRemoved = true ; } } refreshSREListUI ( ) ; if ( defaultIsRemoved ) { if ( this sreTable getItemCount ( ) ) { setSelection ( null ) ; } else { if ( defaultIndex < ) { defaultIndex = ; } else if ( defaultIndex >= this sreTable getItemCount ( ) ) { defaultIndex = this. sreTable. getItemCount ( ) ; } setSelection ( new StructuredSelection ( this. sreTable. getItem ( defaultIndex ). getData ( ) ) ) ; } } this. sresList. refresh ( true ) ; if ( defaultIsRemoved ) { fireDefaultSREChanged ( ) ; } updateUI ( ) ; }<CODESPLIT>Removes the given SREs from the table .
public static WikiUser getUser ( String wikiId, String siteurl ) { WikiUser result = ; { Properties props = getProperties ( wikiId ) ; result = WikiUser ( ) ; result. setUsername ( props. getProperty (user ) ) ; result. setEmail ( props. getProperty (email ) ) ; Crypt pcf = Crypt ( props getProperty (cypher ), props getProperty (salt ) ) ; result. setPassword ( pcf. decrypt ( props. getProperty (secret ) ) ) ; } ( FileNotFoundException e ) { msg = help ( wikiId, siteurl ) ; LOGGER. log ( Level. SEVERE, msg ) ; } ( IOException e ) { LOGGER. log ( Level. SEVERE, e. getMessage ( ) ) ; } ( GeneralSecurityException e ) { LOGGER. log ( Level. SEVERE, e. getMessage ( ) ) ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public T next ( ) { retryCount = ; T next = delegate. next ( ) ; if ( alreadyGenerated contains ( next ) ) { alreadyGenerated. add ( next ) ; return next ; } retryCount ; } ( retryCount numberOfRetries ) ; throw new IllegalStateException ( on ( " " ). join ( "Exha", numberOfRetries, "retries trying to generate unique value" ) ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private boolean isAllowedInsideList ( Node node ) { return ( node getNodeType ( )!= Node ELEMENT_NODE node getNodeName ( ) equalsIgnoreCase ( TAG_LI ) ) && ( node. getNodeType ( )!= Node. TEXT_NODE node. getNodeValue ( ). trim ( ). length ( ) == ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static ResidueNumber [ ] matchSequenceToStructure ( ProteinSequence seq, Structure struct ) { Map < Integer, Group > atomIndexPosition = HashMap < Integer, Group > ( ) ; ProteinSequence structSeq = getProteinSequenceForStructure ( struct, atomIndexPosition ) ; SubstitutionMatrix < AminoAcidCompound > matrix = SimpleSubstitutionMatrix < AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ), ( short ), ( short ) ) ; matrix = SimpleSubstitutionMatrix < AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ), new ( SimpleSubstitutionMatrix class getResourceAsStream ( "/matrices/blosum100txt ) ),blosum100 ) ; SequencePair < ProteinSequence, AminoAcidCompound > pair = Alignments getPairAlignment ( seq, structSeq, PairSequenceAlignerType GLOBAL, new SimpleGapPenalty ( ), matrix ) ; AlignedSequence < ProteinSequence, AminoAcidCompound > alignedSeq = pair. getQuery ( ) ; AlignedSequence < ProteinSequence, AminoAcidCompound > alignedStruct = pair. getTarget ( ) ; assert ( alignedSeq. getLength ( ) alignedStruct. getLength ( ) ) ; ResidueNumber ca = new ResidueNumber seq getLength ( ) ; ( pos = alignedSeq. getStart ( ). getPosition ( ) ; pos alignedSeq. ( ). getPosition ( ) ; pos ) if ( alignedSeqGap ( pos ) ) { structIndex = alignedStruct getSequenceIndexAt ( pos ) ; assert ( structIndex > ) ; Group g = atomIndexPosition. get ( structIndex ) ; logger. warn ( "Chain {} residue in the Structure has no corresponding amino acid in the sequence.", g. getChainId ( ), g. getResidueNumber ( ). toString ( ), g. getChain ( ). getStructure ( ). getPDBCode ( ) ) ; ; } if ( alignedStructGap ( pos ) ) { seqIndex = alignedSeq getSequenceIndexAt ( pos ) ; structIndex = alignedStruct getSequenceIndexAt ( pos ) ; Group g = atomIndexPosition. get ( structIndex ) ; assert ( <= seqIndex && seqIndex < ca. length ) ; ca seqIndex = g. getResidueNumber ( ) ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
@ SuppressWarnings (unchecked" } ) public static IMeta mergeMeta ( IMetaData <?,? > metaData1, IMetaData <?,? > metaData2 ) { Map < String, Object > map = ( ( Map < String, Object > ) metaData ) ; Set < Entry < String, Object > > set1 = map1. entrySet ( ) ; Map < String, Object > map = ( ( Map < String, Object > ) metaData ) ; Set < Entry < String, Object > > set2 = map2. entrySet ( ) ; Map < String, Object > rep = new HashMap < String, Object > ( ) ; ( Entry < String, Object > entry1 : set1 ) String key = entry. getKey ( ) ; if ( map2 containsKey ( key1 ) ) { Object value = map. get ( key ) ; Object value = map. get ( key ) ; if ( value1 Double ) { if ( Double valueOf ( value1 toString ( ) ) doubleValue ( ) < Double valueOf ( value2 toString ( ) ) doubleValue ( ) ) { rep. put ( key1, value2 ) ; } } if ( value1 Integer ) { if ( Integer valueOf ( value1 toString ( ) ) intValue ( ) < Integer valueOf ( value2 toString ( ) ) intValue ( ) ) { rep. put ( key1, value2 ) ; } } if ( value1 Long ) { if ( Long valueOf ( value1 toString ( ) ) longValue ( ) < Long valueOf ( value2 toString ( ) ) longValue ( ) ) { rep. put ( key1, value2 ) ; } } if ( value1 Boolean ) { if ( Boolean valueOf ( value1 toString ( ) ) && Boolean valueOf ( value2 toString ( ) ) ) { rep. put ( key1, value2 ) ; } } } } set1. removeAll ( rep. entrySet ( ) ) ; set1. addAll ( rep. entrySet ( ) ) ; set1. addAll ( set2 ) ; return metaData1 ; }<CODESPLIT>Merges the two Meta objects
public List < T > subList ( int arg0, int arg1 ) { ( allResults size ( ) argResultsAvailable ( ) ) moveNextResults ( ) ; } return Collections. unmodifiableList ( allResults. subList ( arg0, arg1 ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private Message prepare ( String channel, Message message, Recipient [ ] recipients ) { message. setMetadata (cwfpubnode", nodeId ) ; message. setMetadata (cwfpubchannel", channel ) ; message. setMetadata ( "cwfpubevent", UUID. randomUUID ( ). toString ( ) ) ; message. setMetadata ( "cwfpubwhen", System. currentTimeMillis ( ) ) ; message. setMetadata ( "cwfpubrecipients", recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private < T > GraphRequest < T > graph ( String object, JavaType type, Param... params ) { this checkForBatchExecution ( ) ; GraphRequest < T > req = GraphRequest < T > ( object params this mapper, this < T > createMappingChain ( type ) ) ; this graphRequests add ( req ) ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void writeLength ( long length ) { if ( length < 251 ) { buf position ++ ] = ( byte ) length ; } else if ( length < 65536 ) { buf position ++ ] = ( byte ) ; buf [ position ++ ] = ( byte ) length ; buf [ position ] = ( byte ) ( length 8 ) ; } else if ( length < 167716 ) { buf [ position ++ ] = ( byte )xfd ; buf [ position ++ ] = ( byte ) length ; buf [ position ] = ( byte ) ( length 8 ) ; buf [ position ] = ( byte ) ( length 16 ) ; } else { buf [ position ++ ] = ( byte )xfe ; buf [ position ++ ] = ( byte ) length ; buf [ position ] = ( byte ) ( length 8 ) ; buf [ position ] = ( byte ) ( length 16 ) ; buf [ position ] = ( byte ) ( length 24 ) ; buf [ position ] = ( byte ) ( length 32 ) ; buf [ position ] = ( byte ) ( length 40 ) ; buf [ position ] = ( byte ) ( length 48 ) ; buf [ position ] = ( byte ) ( length ) ; } }<CODESPLIT>Write length .
public static < TSource, TResult > List < TResult > map ( Collection < TSource > items, Mapper < TSource, TResult > mapper ) { ( ( items ) ) return new ArrayList < > ( ) ; } List < TResult > result = < > ( items size ( ) ) ; ( TSource item items ) TResult mappedItem = mapper map ( item ) ; result add ( mappedItem ) ; } return result ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serializeReal ( final Number real, final ContentHandler handler ) throws SAXException { serializeElement (real, String valueOf ( real doubleValue ( ) ), handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public JMenuBar setupStandardMenu ( ActionListener targetAction, boolean bAddHelpMenu ) { Application application = BaseApplet getSharedInstance ( ) getApplication ( ) ; ResourceBundle oldResources = application getResourceBundle ( ) ; application getResources ( null, ) ; this setupActions ( targetAction ) ; JMenuBar menuBar = new JMenuBar ( ) { private static final long serialVersionUID = 1L ; public Dimension getMaximumSize ( ) { return new Dimension ( super. getMaximumSize ( ). width, super. getPreferredSize ( ). height ) ; } } ; menuBarOpaque ( ) ; JMenu menu ; char rgchItemShortcuts = char 20 ; menu = this addMenu ( menuBar, ThinMenu FILE ) ; this addMenuItem ( menu, ThinMenu PRINT, rgchItemShortcuts ) ; menu. addSeparator ( ) ; this. add ( menu, ThinMenu.ON,chItem ) ; this. add ( menu, ThinMenu.OUT,chItem ) ; this. addMenuItem ( menu, ThinMenu. CHANGE_PASSWORD, rgchItemShortcuts ) ; menu. addSeparator ( ) ; this. addMenuItem ( menu, ThinMenu. CLOSE, rgchItemShortcuts ) ; rgchItemShortcuts = char 20 ; menu = this. addMenu ( menuBar, ThinMenu. EDIT ) ; this. addMenuItem ( menu, ThinMenu. CUT, rgchItemShortcuts ) ; this. addMenuItem ( menu, ThinMenu. COPY, rgchItemShortcuts ) ; this. addMenuItem ( menu, ThinMenu. PASTE, rgchItemShortcuts ) ; menu. addSeparator ( ) ; this. addMenuItem ( menu, ThinMenu. PREFERENCES, rgchItemShortcuts ) ; if ( oldResources ) application setResourceBundle ( oldResources ) ; if ( bAddHelpMenu ) menu = this addHelpMenu ( menuBar ) ; return menuBar ; }<CODESPLIT>Setup the standard menu items .
public static String getPreferredAttributeNameForLaneCount ( ) { Preferences prefs = Preferences userNodeForPackage ( RoadNetworkConstants ) ; ( prefs ) return prefs. get ( "LANE_COUNT_ATTR_NAME", DEFAULT_ATTR_LANE_COUNT ) ; } return DEFAULT_ATTR_LANE_COUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd [ ] get ( nitro_service service, nsrollbackcmd_args args ) throws Exception { nsrollbackcmd obj = nsrollbackcmd ( ) ; options option = options ( ) ;_args ( nitro_util object_to__withoutquotes ( args ) ) ; nsrollbackcmd [ ] response = ( nsrollbackcmd [ ] ) obj_resources ( service option ) ; return response ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int translateElementNo ( int i ) { if ( useList i < 0 ) { return i ; } j = ; PatternRule rule = ( PatternRule ) this. rule ; for ( k = ; k < i ; k ) { += rule. getElementNo ( ). get ( k ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String [ ] getProxyHostsWhiteList ( ) { if ( _proxyHostsWhiteList null _proxyHostsWhiteList. size ( ) 0 ) return new String [ 0 ] ; String hosts = new String _proxyHostsWhiteList. size ( ) ; hosts = ( String ) _proxyHostsWhiteList. toArray ( hosts ) ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean addMetatypeAd ( MetatypeAd metatypeAd ) { if ( this metatypeAds ) this metatypeAds = new LinkedList MetatypeAd ( ) ; ( MetatypeAd ad metatypeAds ) if ( ad getID ( ). equals ( metatypeAd. getID ( ) ) ) return false ; this. metatypeAds. add ( metatypeAd ) ; return true ;<CODESPLIT>Adds a metatype AD .
public long skip ( long n ) throws IOException { ( mInputStream available ( ) >= n ) return mInputStream. skip ( n ) ; } mInputStream close ( ) ; mPos n ; mObject = mClient getObject ( mBucketName, mKey, null, null, null, null, mPos, null ) ; mInputStream = BufferedInputStream ( mObject getDataInputStream ( ) ) ; } ( ServiceException e ) { throw new IOException ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean isSuperCall ( JCTree tree ) { Name name = calledMethodName ( tree ) ; if ( name ) Names names = name table names ; return name == names. _super ; } { return false ; } }<CODESPLIT>Is this a call to super?
public static String getShortRequestDump ( String fromMethod, boolean includeHeaders, HttpServletRequest request ) { dump = new ( ) ; dump. append (Timestamp : ). append ( ISO. getTimestamp ( ) ). append (" ) ; dump. append (fromMethod : " ). append ( fromMethod ). append (" ) ; dump. append ( "Method : " ). append ( request. getMethod ( ) ). append ( '\ ) ; dump. append ( "Scheme : " ). append ( request. getScheme ( ) ). append ( '\ ) ; dump. append ( "URI : " ). append ( request. getRequestURI ( ) ). append ( '\ ) ; dump. append ( "QueryString : " ). append ( request. getQueryString ( ) ). append ( '\ ) ; dump. append ( "AuthType : " ). append ( request. getAuthType ( ) ). append ( '\ ) ; dump. append ( "RemoteAddr : " ). append ( request. getRemoteAddr ( ) ). append ( '\ ) ; dump. append ( "Scheme : " ). append ( request. getScheme ( ) ). append ( '\ ) ; dump. append ( "ContentType : " ). append ( request. getContentType ( ) ). append ( '\ ) ; dump. append ( "ContentLength " ). append ( request. getContentLength ( ) ). append ( '\ ) ; if ( includeHeaders ) { dump. append ( "Headers :" ) ; Enumeration < String > headers = request. getHeaderNames ( ) ; ( headers. hasMoreElements ( ) ) String header = headers. ( ) ; dump. append (t" ). append ( header ). append ( " ). append ( request. getHeader ( header ) ). append ( '\ ) ; } } return ( dump. toString ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validateNotEmpty ( String stringToCheck, boolean trim, String argumentName ) throws NullArgumentException { validateNotNull ( stringToCheck, argumentName ) ; if ( stringToCheck length ( ) ( trim && stringToCheck trim ( ) length ( ) ) ) { throw new NullArgumentException ( argumentName + IS_EMPTY ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static JPanel createPanelWithVerticalLayout ( ) { JPanel _panel = JPanel ( ) ; _panel setLayout ( BoxLayout ( _panel, BoxLayout YAXIS ) ) ; return _panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected boolean shouldAnalyze ( ) { ( analyzer FileTypeAnalyzer ) FileTypeAnalyzer fileTypeAnalyzer ( FileTypeAnalyzer ) analyzer ; return fileTypeAnalyzer. accept ( dependency. getActualFile ( ) ) ; } return true ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void registerServiceClass ( Class serviceClass ) { registeredServiceClasses put ( serviceClass getSimpleName ( ), serviceClass ) ; Settings Services addAvailableOption ( serviceClass getSimpleName ( ) ) ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public String getSectionText ( String pageTitle, int sectionNumber ) throws Exception { result = this getPageContent ( pageTitle "&rvsection + sectionNumber, ) ; return result ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] x, int [ ] y ) { if ( x length y length ) throw new IllegalArgumentException ( String format ( "Arrays have different length x[%d], y[%d, x length, y length ) ) ; return 1 - Math. cor ( x, y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static TileGrid getTileGridFromWGS84 ( Point point, int zoom ) { Projection projection = ProjectionFactory getProjection ( Projection EPSGWORLDGEODETICSYSTEM ) ; return getTileGrid ( point, zoom, projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public List < VectorLayer > getVectorLayers ( ) { < VectorLayer > list = < VectorLayer > ( ) ; ( Layer < > layer : layers ) if ( layer VectorLayer ) { list. add ( ( VectorLayer ) layer ) ; } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void calcRmsd ( Point3d [ ] x, Point3d [ ] y ) { if ( centered ) { innerProduct ( y, x ) ; } { xref = CalcPoint clonePoint3dArray ( x ) ; xtrans = CalcPoint centroid ( xref ) ; logger ( "x centroid " + x ) ; xtrans negate ( ) ; CalcPoint translate ( Vector3d ( xtrans ), xref ) ; yref = CalcPoint clonePoint3dArray ( y ) ; ytrans = CalcPoint centroid ( yref ) ; logger ( "y centroid " + y ) ; ytrans negate ( ) ; CalcPoint translate ( Vector3d ( ytrans ), yref ) ; innerProduct ( yref, xref ) ; } calcRmsd ( wsum ) ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void setSectionHeading ( Title v ) { if ( SectionType featOkTst && ( ( SectionType ) jcasType ) casFeatsectionHeading ) jcasType jcas throwFeatMissing ( "sectionHeading, "de.julielab.jules.types.Section ) ; jcasType. ll_cas. ll_setRefValue ( addr, ( ( Section_Type ) jcasType ). casFeatCode_sectionHeading, jcasType. ll_cas. ll_getFSRef ( v ) ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( InputStream is ) throws IOException, SAXException, ParserConfigurationException { SxmpParser parser = SxmpParser ( version ) ; Operation operation = ; { operation = parser parse ( is ) ; } ( SxParsing e ) { if ( e getOperation ( ) e getOperation ( ) getType ( ) ) { logger. warn ( "Unable to fully parse XML into a request returning ErrorResponse; error + e getMessage ( ) + ", parsed + e getOperation ( ) ) ; return new ErrorResponse ( e. getOperation ( ). getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } { throw new SAXException ( e. getMessage ( ), e ) ; } } { if ( ( operation Request ) ) { throw new SxmpErrorException ( Sxmp. UNSUPPORTED_OPERATION, "A session can only process requests" ) ; } Request req = ( Request ) operation ; if ( req getAccount ( ) ) { throw new SxmpErrorException ( Sxmp. MISSING_REQUIRED_ELEMENT, "A request must include account credentials" ) ; } if ( processor authenticate ( req getAccount ( ) ) ) { throw new SxmpErrorException ( Sxmp. AUTH_, "Authentication failure" ) ; } if ( operation SubmitRequest ) { return processor. submit ( req. getAccount ( ), ( SubmitRequest ) operation ) ; } if ( operation DeliverRequest ) { return processor. deliver ( req. getAccount ( ), ( DeliverRequest ) operation ) ; } if ( operation DeliveryReportRequest ) { return processor. deliveryReport ( req. getAccount ( ), ( DeliveryReportRequest ) operation ) ; } { throw new SxmpErrorException ( Sxmp. UNSUPPORTED_OPERATION, "Unsupported operation request type" ) ; } } ( Sx e ) { logger. warn ( e. getMessage ( ) ) ; return new ErrorResponse ( operation. getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } ( t ) { logger. error ( "Major uncaught throwable while processing request generating an ErrorResponse", t ) ; return new ErrorResponse ( operation. getType ( ), SxmpErrorCode. GENERIC. getIntValue ( ), "Generic error while processing request" ) ; } }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submitPayload ( String url, HttpRequestUtil. ConnectionSettings connectionSettings, String jsonPayloadObject, String pushApplicationId, String masterSecret, MessageResponseCallback callback, List < String > redirectUrls ) { if ( redirectUrls contains ( url ) ) { throw new PushSenderException ( "The site contains an infinite redirect loop! Duplicate url " + url ) ; } { redirectUrls. add ( url ) ; } HttpURLConnection http = ; { final credentials = pushApplicationId + ':' + masterSecret ; final encoded = Base64 encodeBytes ( credentials getBytes ( UTF8 ) ) ; httpURLConnection = ( HttpURLConnection ) HttpRequestUtil. post ( url, encoded, jsonPayloadObject, UTF_8, proxy, customTrustStore, connectionSettings ) ; final statusCode = http getResponseCode ( ) ; logger. log ( Level. INFO, String. format ( "HTTP Response code from UnifiedPush Server", ) ) ; if (Redirect ( statusCode ) ) { String redirectURL = http getHeaderField (Location ) ; logger. log ( Level. INFO, String. format ( "Performing redirect to'", redirectURL ) ) ; submitPayload ( redirectURL, pushConfiguration. getConnectionSettings ( ), jsonPayloadObject, pushApplicationId, masterSecret, callback, redirectUrls ) ; } if ( statusCode >= 400 ) { logger. log ( Level. SEVERE, "The Unified Push Server returned status code " + ) ; throw new PushSenderHttpException ( statusCode ) ; } { if ( callback ) { callback. onComplete ( ) ; } } } ( Pushhe ) { throwhe ; } ( e ) { logger. log ( Level. INFO, "Erroring while trying to send the push delivery request", e ) ; throw new PushSenderException ( e. getMessage ( ), e ) ; } { if ( http ) { httpURLConnection. disconnect ( ) ; } } }<CODESPLIT>The actual method that does the real send and connection handling
public String [ ] getChildNames ( ) { if ( children == null children. size ( ) == 0 ) return EMPTY_NAMES ; String arr = new String children. size ( ) ; ( i = ; i < arr. length ; i ) { arr [ i ] = ( ( RamResourceCore ) children. get ( i ) ). getName ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object getIndex ( Object array, int index ) throws UtilTargetError { Interpreter. debug (getIndex, array, ", index, index ) ; { if ( array List ) return ( ( List <? > ) array ) ( index ) ; Object val = Array ( array, index ) ; return Primitive. wrap ( val, Types. arrayElementType ( array. getClass ( ) ) ) ; } ( IndexOutOfBoundsException e ) { len = array List? ( ( List <? > ) array ) size ( ) : Array getLength ( array ) ; throw new UtilTargetError ( "Index " + index + " out-of-bounds for length " + len, e1 ) ; } }<CODESPLIT>Get object from array or list at index .
public static base_response add ( nitro_service client, aaakcdaccount resource ) throws Exception { aaakcdaccount addresource = aaakcdaccount ( ) ; addresource kcdaccount = resource kcdaccount ; addresource keytab = resource keytab ; addresource realmstr = resource realmstr ; addresource. delegateduser = resource. delegateduser ; addresource. kpassword = resource. kpassword ; addresource. user = resource. user ; addresource. cert = resource. cert ; return addresource. add_resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void lockExclusive ( ) { if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr entry ( this, tc, "lockExclusive", this ) ; interrupted = ; ( tryLockExclusive ( ) ) try { if ( TraceComponent isAnyTracingEnabled ( ) && tc ( ) ) SibTr debug ( this, tc, "Waiting to get exclusive lock" ) ; wait ( 1000 ) ; } ( InterruptedException e ) { interrupted = true ; } } ( iLockCount > ) try { if ( TraceComponent isAnyTracingEnabled ( ) && tc ( ) ) SibTr debug ( this, tc, "Waiting for lock count to reach " + iLockCount ) ; wait ( 1000 ) ; } ( InterruptedException e ) { interrupted = true ; } } if ( interrupted ) { Thread. currentThread ( ). interrupt ( ) ; } if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( this, tc, "lockExclusive" ) ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public void setCPOptionValueLocalService ( com. liferay. commerce. product. service. CPOptionValueLocalService cpOptionValueLocalService ) { this cpLocalService cpLocalService ; }<CODESPLIT>Sets the cp option value local service .
public static String inferModulePathFromType ( TypeDeclaration type ) { PackageDeclaration pkg type getPackage ( ) ; return pkg!=? '/' + pkg getQualifiedName ( ) replace ( '.', '/' ) : "/" ; }<CODESPLIT>Infers the Struts module path from the given controller class .
final int getLeapMonth ( int cycle, int yearOfCycle ) { ] leapMonths = this. getLeapMonths ( ) ; elapsedYears = ( cycle - 1 ) 60 + yearOfCycle - 1 ; index = 2 ( ( elapsedYears - leapMonths ] ) / 3 ) ; lm = ; while ( ( index < leapMonths. length ) ) test = leapMonths [ index ] ; if ( test < elapsedYears ) { index += Math. max ( 2 * ( ( elapsedYears - test ) / 3 ), 2 ) ; } else if ( test > elapsedYears ) { ; } else { lm = leapMonths index + 1 ; ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet getSnippet ( Integer snippetId, boolean downloadContent ) throws GitLabApiException { if ( snippetId ) { throw new RuntimeException ( "snippetId can't be null" ) ; } Response response = get ( Response Status OK, null,snippets, snippetId ) ; Snippet snippet = response readEntity ( Snippet class ) ; if ( downloadContent ) { snippet setContent (nippetContent ( snippet getId ( ) ) ) ; } return snippet ; }<CODESPLIT>Get a specific Snippet .
public final int get ( int codePoint ) { int value ; int ix ; if ( codePoint >= 0 ) { if ( codePoint < 0x0d800 || ( codePoint > 0x0dbff && codePoint <= 0x0 ) ) { ix = index codePoint UTE_SHIFT_ ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 ix ] ; return value ; } if ( codePoint <= 0xffff ) { ix = index UTE_LSCP_INDEX__OFFSET + ( ( codePoint -xd800 ) UTE_SHIFT_ ) ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 ix ] ; return value ; } if ( codePoint < highStart ) { ix = ( UTRIE2_INDEX_1_OFFSET - UTRIE2_OMITTED_BMP_INDEX_1_LENGTH ) + ( codePoint UTRIE2_SHIFT_1 ) ; ix = index ix ] ; += ( codePoint UTE ) & UTEMASK ; ix = index ix ] ; ix = ( ix << UTRIE2_INDEX_SHIFT ) + ( codePoint & UTRIE2_DATA_MASK ) ; value = data32 [ ix ] ; return value ; } if ( codePoint <= 0x10 ) { value = data32 [ highValueIndex ] ; return value ; } } return errorValue ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object getMBeanAttributeObject ( String name, String attrName ) throws JMException { MBeanServer serverBeanServer ( ) ; ObjectName obj ObjectName ( name ) ; return server getAttribute ( objName, attrName ) ; }<CODESPLIT>Get MBean attribute object
public synchronized void setSelectedIndex ( final int selectedIndex ) { if ( items size ( ) <= selectedIndex selectedIndex < ) { throw new IndexOutOfBoundsException ( "Illegal argument to ComboBoxsetSelectedIndex " + selectedIndex ) ; } final oldSelection = this selectedIndex ; this selectedIndex = selectedIndex ; if ( selectedIndex 1 ) { updateText ( "" ) ; } { updateText ( items. get ( selectedIndex ). ( ) ) ; } runOnGUIThreadIfExistsOtherwiseRunDirect ( new Runnable ( ) { public void run ( ) { ( Listener listener : listeners ) listener. onSelectionChanged ( selectedIndex, oldSelection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Stats getPhotoStats ( String photoId Date date ) throws FlickrException { return getStats ( METHODGETPHOTO_STATS,photo_id, photoId, date ) ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public ServiceCall < DocumentStatus > getDocumentStatus ( GetDocumentStatusOptions getDocumentStatusOptions ) { Validator. notNull ( getDocumentStatusOptions, "getDocumentStatusOptions cannot be null" ) ; String = "venvironments", "collections", "documents" } ; String pathParameters = getDocumentStatusOptions. environmentId ( ), getDocumentStatusOptions. collectionId ( ), getDocumentStatusOptions. documentId ( ) } ; RequestBuilder = RequestBuilder. get ( RequestBuilder.Url ( getEndPoint ( ),, pathParameters ) ) ; builder. query ( "version", versionDate ) ; Map < String, String > sdkHeaders = SdkCommon. getSHeaders (discovery,v,getDocumentStatus ) ; ( Entry < String, String > header : sdkHeaders. ( ) ) { builder. header ( header. getKey ( ), header. getValue ( ) ) ; } builder. header ( "Accept", "applicationjson" ) ; return createServiceCall ( builder. build ( ), ResponseConverterUtils. getObject ( DocumentStatus. class ) ) ; }<CODESPLIT>Get document details .
public Pager < Issue > getClosesIssues ( Object projectIdOrPath, Integer mergeRequestIid, int itemsPerPage ) throws GitLabApiException { return Pager < Issue > ( this, Issue., itemsPerPage, null,projects, getProjectIdOrPath ( projectIdOrPath ),merge_requests, mergeRequestIid,closes_issues ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class <? > clazz, String msg, Exception... e ) { if ( DEBUG ) { String exceptionStr = ; if ( e && e length 1 ) { sw = new ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e. printStackTrace ( pw ) ; pw. flush ( ) ; exceptionStr =exception = " + sw. toString ( ) ; } System. err. println ( "[" + sSdf. format ( new Date ( ) ) + "]" + "-" + "[" + clazz. getSimpleName ( ) + "] + msg + + exceptionStr ) ; } }<CODESPLIT>To output the error log message to the error out
public static HtmlTree TH ( HtmlStyle styleClass, String scope, Content body ) { HtmlTree htmltree = HtmlTree ( HtmlTag TH,Check ( body ) ) ; if ( styleClass ) htmltree addStyle ( styleClass ) ; htmltree addAttr ( HtmlAttr SCOPE, nullCheck ( scope ) ) ; return htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtainDividerMargin ( final int themeResourceId ) { TypedArray typedArray = getContext ( ) getTheme ( ). obtainStyledAttributes ( themeResourceId, new R. attr. materialDialogDividerMargin } ) ; setDividerMargin ( typedArray. getDimensionPixelSize (, ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void setDefaultButton ( SBaseButton button ) { this getScreenFieldView ( ). setDefaultButton ( button? : button. getScreenFieldView ( ) ) ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { ( k k size ( root ) ) new IllegalArgumentException ( ) ; RedBlackTreeNode < Key, Value > x = select ( root, k ) ; return x. getKey ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( RequestHandler request ) { lock. ( ). lock ( ) ; { newSessionRequests add ( request ) ; } { lock. ( ). unlock ( ) ; } }<CODESPLIT>Adds a request handler to this queue .
public static < T T withPrintWriter ( OutputStream stream, ClosureParams ( value = SimpleType. class, options =javaioPrintWriter" ) Closure < T > closure ) throws IOException { return withWriter (PrintWriter ( stream ), closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void addRegexRoute ( String urlPattern, Class < extends Actor > actorClass ) throws RouteAlreadyMappedException { addRoute ( Route ( urlPattern ) actorClass ) ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void sendQueuedEvents ( KeenProject project, KeenCallback callback ) { if ( isActive ) { handleLibraryInactive ( callback ) ; return ; } if ( project && defaultProject ) { handleFailure (, new IllegalStateException (No project specified no default project found ) ) ; return ; } if (NetworkConnected ( ) ) { KeenLogging. log (Not sending events because there is no network connection +Events will be retried next time `sendQueuedEvents` is called." ) ; handleFailure ( callback, new Exception (Network not connected." ) ) ; return ; } KeenProject useProject = ( project? defaultProject : project ) ; { String projectId = useProject getProjectId ( ) ; Map < String, List < Object > > eventHandles = eventStore. getHandles ( projectId ) ; Map < String, List < Map < String, Object > > > events = buildEventMap ( projectId, eventHandles ) ; String response = publishAll ( useProject, events ) ; if ( response ) { { handleAddEventsResponse ( eventHandles, response ) ; } ( e ) { KeenLogging. log (Error handling response to batch publish + e. getMessage ( ) ) ; } } handleSuccess ( callback ) ; } ( e ) { handleFailure ( callback, e ) ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public int getMaxQueuedConnections ( ) { return getThreadPool ( ) ==? : ( ( getThreadPool ( ) getQueue ( ) instanceof ArrayBlockingQueue )? ( ( ArrayBlockingQueue ) getThreadPool ( ) getQueue ( ) ) size ( ) + ( ( ArrayBlockingQueue ) getThreadPool ( ) getQueue ( ) ) remainingCapacity ( ) : - ) ; }<CODESPLIT>this should only be used as an estimate
final public AuxiliaryTree TreeRoot ( boolean requiresFoot ) throws ParseException { SimpleNode jj = new SimpleNode ( JJTTREEROOT ) ; jjtc = true ; jjtree. openNodeScope ( jj000 ) ; Tree t ; try { t = TreeNode ( ) ; jjtree. closeNodeScope ( jj000, true ) ; jjtc = false ; if ( true ) return new AuxiliaryTree ( t, requiresFoot ) ; } } ( Throwable jj ) { if ( jjtc ) { jjtree. clearNodeScope ( jj000 ) ; jjtc = false ; } else { jjtree. popNode ( ) ; } if ( jjte RuntimeException ) { if ( true ) throw ( RuntimeException ) jjte ; } } if ( jjte instanceof ParseException ) { if ( true ) throw ( ParseException ) jjte ; } } if ( true ) throw ( Error ) jjte ; } } { if ( jjtc ) { jjtree. closeNodeScope ( jj000, true ) ; } } throw new Error ( "Missing return statement in function" ) ; }<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
INodeDirectory addToParent ( byte [ ] src, INodeDirectory parentINode, INode newNode, boolean propagateModTime, int childIndex ) { INodeDirectory newParent = ; ( ) ; { { newParent = rootDir. addToParent ( src, newNode, parentINode, false, propagateModTime, childIndex ) ; cacheName ( newNode ) ; } ( FileNotFoundException e ) { return null ; } if ( newParent ) return null ; if ( newNode isDirectory ( ) ) { INodeFile newF = ( INodeFile ) newNode ; BlockInfo blocks = newF. getBlocks ( ) ; ( i = ; i < blocks. ; i ) newF. setBlock ( i, getFSNamesystem ( ). blocksMap. addINodeForLoading ( blocks i, newF ) ) ; } } } { writeUnlock ( ) ; } return newParent ; }<CODESPLIT>Add node to parent node when loading the image .
public void setModel ( final MindMap model, final boolean notifyModelChangeListeners ) { this. lock ( ) ; { if ( this elementUnderEdit ) { Utils. safeSwingBlockingCall ( new Runnable ( ) { public void run ( ) { endEdit ( ) ; } } ) ; } final List < > selectedPaths = ArrayList < > ( ) ; ( final Topic t : this. selectedTopics ) selectedPaths. add ( t. getPositionPath ( ) ) ; } this. selectedTopics. clear ( ) ; final MindMap oldModel = this model ; this. model = assertNotNull (Model must not be null, model ) ; ( final PanelAwarePlugin p : MindMapPluginRegistry. getInstance ( ). findFor ( PanelAwarePlugin. class ) ) p. onPanelModelChange ( this, oldModel, this. model ) ; } doLayout ( ) ; revalidate ( ) ; selectionChanged = ; ( final [ posPath : selectedPaths ) final Topic topic = this model findForPositionPath ( posPath ) ; if ( topic ) { selectionChanged = ; } if ( MindMapUtils isHidden ( topic ) ) { this. selectedTopics. add ( topic ) ; } } if ( selectionChanged ) { fireNotificationSelectionChanged ( ) ; } repaint ( ) ; } { this. unlock ( ) ; if ( notifyModelChangeListeners ) { fireNotificationMindMapChanged ( true ) ; } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public OperationFuture < LoadBalancer > delete ( LoadBalancer loadBalancer ) { LoadBalancerMetadata loadBalancerMetadata findByRef ( loadBalancer ) ; loadBalancerClient delete ( loadBalancerMetadata getDataCenterId ( ) loadBalancerMetadata getId ( ) ) ; return OperationFuture < > ( loadBalancer, NoWaitingJobFuture ( ) ) ; }<CODESPLIT>Delete load balancer
public GetSnapshotResponse getSnapshot ( GetSnapshotRequest request ) { checkNotNull ( request,request should not be ) ; checkStringNotEmpty ( request getSnapshotId ( ),request snapshotId should no be empty ) ; InternalRequest internalRequest = this createRequest ( request, HttpMethodName GET, SNAPSHOTPREFIX, request getSnapshotId ( ) ) ; return invokeHttpClient ( internalRequest, GetSnapshotResponse. class ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
@ SuppressWarnings ( "checkstyle:emptyblock" ) void excludeLoggers ( ) { try { BugsnagAppender. addExcludedLoggerPattern ( "org.apache.catalina.core.ContainerBase." + "\\[Tomcat.*.[.*.[/.*.[.*]" ) ; BugsnagAppender. addExcludedLoggerPattern ( "org.eclipse.jetty.server.HttpChannel" ) ; BugsnagAppender. addExcludedLoggerPattern ( "io.undertow.request" ) ; } catch ( NoClassDefFoundError ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R1 relationships ) { if ( null == base ) { throw new AssertionError ( "" ) ; } for ( i = ; i < base. length ; i ) { if ( null == base [ i ] ) { ; } final IConceptSet set = data i = new SparseConceptHashSet ( ) ; set. addAll ( base i ) ; if ( null relationships. data [ i ] ) { set. removeAll ( relationships. data i ) ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static < E > E getEndpoint ( Class < E > type, String name, Reflections reflections ) { E result = ; Set < Class <? extends E > > foundClasses = reflections. getSubTypesOf ( type ) ; Set < Class <? extends E > > endpointClasses = HashSet < > ( ) ; ( Class < extends E > clazz : foundClasses ) if ( isAbstract ( clazz getModifiers ( ) ) ) { endpointClasses. add ( clazz ) ; } } Iterator < Class <? extends E > > iterator = endpointClasses. iterator ( ) ; ( iterator. ( ) ) Class <? extends E > next = iterator next ( ) ; if ( startsWithIgnoreCase ( next getName ( ), "com.github.davidcarboni.restolino.routes." ) ) { iterator. remove ( ) ; } } if ( endpointClasses size ( ) ) { if ( endpointClasses size ( ) > ) { log. info ( "Warning found multiple candidates for endpoint, name, endpointClasses ) ; } { result = endpointClasses. iterator ( ). next ( ). newInstance ( ) ; } ( e ) { log. info ( "Error cannot instantiate endpoint class, name, endpointClasses. iterator ( ). next ( ) ) ; e. printStackTrace ( ) ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public final void writtenStartedFlush ( AOStream stream, Item startedFlushItem ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, "writtenStartedFlush" ) ; String key = SIMPUtils. getRemoteGetKey ( stream. getRemoteMEUuid ( ), stream. getGatheringTargetDestUuid ( ) ) ; StreamInfo sinfo = streamTable. get ( key ) ; if ( ( sinfo!= null ) && sinfo. streamId. equals ( stream. streamId ) ) { synchronized ( sinfo ) { sinfo. item = ( AOStartedFlushItem ) startedFlushItem ; } } else { SIErrorException e = new SIErrorException (. ( "INTERNAL_MESSAGING_ERROR_", new Object [ ] { "comsibprocessorimplAnycastOutputHandler", "158141" }, null ) ) ; FFDCFilter. processException ( e, "com.ibm.ws.sib.processor.impl.AnycastOutputHandler.writtenStartedFlush", "1:2865:1..4.1", this ) ; SibTr. exception ( tc, e ) ; SibTr. error ( tc, "INTERNAL_MESSAGING_ERROR_", new Object [ ] { "comsibprocessorimplAnycastOutputHandler", "1141" } ) ; if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, "writtenStartedFlush", e ) ; throw e ; } if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, "writtenStartedFlush" ) ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static List < Report > getDetailSubreports ( ReportLayout reportLayout ) { List < Report > subreports = new ArrayList < Report > ( ) ; Band band = reportLayout. getDetailBand ( ) ; ( i =, rows = band. getRowCount ( ) ; i < rows ; i ) List < BandElement > list = band. getRow ( i ) ; ( =, size = list. size ( ) ; < size ; ) BandElement = list. get ( ) ; if ( be ReportBandElement ) { subreports. add ( ( ( ReportBandElement ) be ). getReport ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public ApiAppList getApiApps ( ) throws HelloSignException { return ApiAppList ( httpClientAuth ( auth ) get ( BASE_URI + API_APP_LIST_URI ) asJson ( ) ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detachAgent ( Object pVm ) { { if ( pVm ) { Class clazz = pVm getClass ( ) ; Method method = clazz getMethod (detach ) ; method setAccessible ( ) ; method invoke ( pVm ) ; } } ( e ) { throw new ProcessingException ( "Error while detaching", e, options ) ; } ( NoSuchMethodException e ) { throw new ProcessingException ( "Error while detaching", e, options ) ; } ( IllegalAccessException e ) { throw new ProcessingException ( "Error while detaching", e, options ) ; } }<CODESPLIT>Detach from the virtual machine
public ObjectGraph excludeClasses ( Class <? >... classes ) { ( Class < > c classes ) if ( c ) { throw new NullPointerException ( "Null class not allowed" ) ; } excludedClasses. add ( c ) ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void setSampling ( double min, double max, int total ) { this sampleMin = min ; this. sampleMax = max ; this. numSamples = total ; this scores = double numSamples ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void calcProductAtVar ( int v, VarTensor prod, int excl1, int excl2 ) { ( nb = ; nb < bg. numNbsT1 ( v ) ; nb ) { if ( nb excl1 nb == excl2 ) { ; } VarTensor nbMsg = msgs bg. opposingT ( v, nb ) ; prod. elemMultiply ( nbMsg ) ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected ItemState findLastItemState ( QPath itemPath ) { ( i = itemAddStates. size ( ) - ; i ; i -- ) { ItemState istate = itemAddStates. get ( i ) ; if ( istate getData ( ) getQPath ( ). ( itemPath ) ) return istate ; } return null ; }<CODESPLIT>Find last ItemState .
public void addDispatcher ( String dispatcherId, AbsActorDispatcher dispatcher ) { synchronized ( dispatchers ) { ( dispatchers ( dispatcherId ) ) return ; } dispatchers put ( dispatcherId, dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
private void sgdTrain ( ClassificationDataSet D, MatrixOfVecs W, Vec b, int sign_mul, boolean parallel ) { IntList order = new IntList ( D. size ( ) ) ; ListUtils. addRange ( order,, D. size ( ), 1 ) ; final double lambda_adj = lambda / ( D. size ( ) epochs ) ; owned = new K ; assigned_positive_instances = ; assignments = new D. size ( ) ; Arrays. fill ( assignments, - 1 ) ; Vec dots = new DenseVector ( W. rows ( ) ) ; long t = ; ( epoch = ; epoch < epochs ; epoch ) { Collections. shuffle ( order ) ; ( i : order ) { t ++ ; double eta = 1 / ( lambda_adj * t ) ; Vec x_i = D. getDataPoint ( i ). getNumericalValues ( ) ; y_i = ( D. getDataPointCategory ( i ) 2 1 ) sign_ ; b. copyTo ( dots ) ; W. multiply ( x_i, 10, dots ) ; if ( yi == - 1 ) { ( k = ; k < K ; k ) if ( dots. get ( k ) > - ) { W. getRowView ( k ). mutableSubtract ( eta, x_i ) ; b. increment ( k, - eta ) ; } } else { k__max = ; ( k = ; k < dots. length ( ) ; k ) if ( dots. get ( k ) > dots. get ( k__max ) ) k__max = k ; if ( dots. get ( k__max ) < ) { z = ASSIGN ( dots, i, k__max, owned, assignments, assigned_positive_instances ) ; W. getRowView ( z ). mutableAdd ( eta, x_i ) ; b. increment ( z, eta ) ; if ( assignments [ i ] < 0 ) assignedpositive_instances ++ ; else owned [ assignments [ i ] ] -- ; owned [ z ] ++ ; assignments i = z ; } } W. mutableMultiply ( 1 - 10 / t ) ; b. mutableMultiply ( 1 - 10 / t ) ; } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype [ ] get ( nitro_service service ) throws Exception { appfwfieldtype obj appfwfieldtype ( ) ; appfwfieldtype ] response = ( appfwfieldtype ] ) obj_resources ( service ) ; return response ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public Future < Channel > create ( final Promise < Channel > channelReadyPromise ) { final long delay = this currentDelaySeconds get ( ) ; channelReadyPromise. addListener ( new GenericFutureListener < Future < Channel > > ( ) { public void operationComplete ( final Future < Channel > future ) { final long updatedDelay = future isSuccess ( )? : max ( min ( delay 2, MAXCONNECTDELAYSECONDS ), MINCONNECTDELAYSECONDS ) ; ApnsChannelFactory. this. currentDelaySeconds. compareAndSet ( delay, updatedDelay ) ; } } ) ; this. bootstrapTemplate. config ( ). group ( ). schedule ( new Runnable ( ) { public void run ( ) { final Bootstrap bootstrap = ApnsChannelFactory this bootstrapTemplate clone ( ) channelFactory ( new AugmentingReflectiveChannelFactory < > ( ClientChannelClassUtil getSocketChannelClass ( ApnsChannelFactory this bootstrapTemplate config ( ) group ( ) ), CHANNELREADYPROMISEATTRIBUTEKEY, channelReadyPromise ) ) ; final ChannelFuture connectFuture = bootstrap connect ( ) ; connectFuture. addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { if ( future isSuccess ( ) ) {FailureLog ( channelReadyPromise,. ( ) ) ; } } } ) ; connectFuture. channel ( ). closeFuture ( ). addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { channelReadyPromise. tryFailure ( new IllegalStateException (Channel closed before HTTP/ preface completed." ) ) ; } } ) ; } }, delay, TimeUnit. SECONDS ) ; return channelReadyPromise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List < String > loadOptions ( String optionFileName ) { List < > args = ArrayList < > ( ) ; File optionFile = File ( optionFileName ) ; stringWriter = ( ) ; { InputStream inputStream = FileInputStream ( optionFile ) ; IOUtils. copy ( inputStream, stringWriter ) ; } ( FileNotFoundException e ) { System. err. println ( "Error reading options file " + e. getMessage ( ) ) ; System. exit ( 1 ) ; } ( IOException e ) { System. err. println ( "Error reading options file " + e. getMessage ( ) ) ; System. exit ( 1 ) ; } string = stringWriter toString ( ) ; StringTokenizer stringTokenizer = new StringTokenizer ( string ) ; ( string. ( ) ) args. add ( stringTokenizer. nextToken ( ) ) ; } return args ; }<CODESPLIT>Load options from a file
public void runJob ( ) { { this currentJob = this jobQueue take ( ) ; ExecutionContext context = ExecutionContext ( ) ; { this. executionContextManager. initialize ( context ) ; } ( Execution e ) { throw new RuntimeException ( "Failed to initialize Job " + this. currentJob + " execution context", e ) ; } this. currentJob. run ( ) ; } ( InterruptedException e ) { } { this. execution. removeContext ( ) ; } }<CODESPLIT>Execute one job .
public Response bind ( String name, Object model ) { getLoc ( ) put ( name model ) ; return this ; }<CODESPLIT>Binds an object to the response .
public byte [ ] getByteArray ( Integer offset ) { byte result = ; if ( offset ) { result = m_map. get ( offset ) ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ ] getMetaMethods ( ) { MetaClass metaClass = InvokerHelper. getMetaClass ( objectUnderInspection ) ; List metaMethods = metaClass. getMetaMethods ( ) ; Object result = new Object metaMethods. size ( ) ; i = ; for ( Iterator = metaMethods. iterator ( ) ;. ( ) ; i ) { MetaMethod metaMethod = ( MetaMethod ) iter. next ( ) ; result i = methodInfo ( metaMethod ) ; } return result ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ ] parse ( String pollers ) { String periods = pollers. split (s*" ) ; long result = new long periods. length ; errors = ; Logger logger = LoggerFactory. getLogger ( Pollers. class ) ; for ( i = ; i < periods. length ; i ) { String period = periods i ; try { result i = Long. parseLong ( period ) ; if ( result [ i ] <= 0 ) { logger. error ( "Invalid polling interval {} must be positive.", period ) ; errors = true ; } } ( NumberFormatException e ) { logger. error ( "Cannot parse '{}' as a long {}", period, e. getMessage ( ) ) ; errors = true ; } } if ( errors periods. length == 0 ) { logger. info ( "Using a default configuration for poller intervals {}", join ( DEFAULT_PERIODS ) ) ; return DEFAULT_PERIODS ; } else { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void setFooter ( String key, String value ) { Objects. requireNonNull ( value ) ; i = ; hasFooter = ; ( i = _footerKeys. size ( ) ; i ; i ) String oldKey = _footerKeys get ( i ) ; if ( oldKey equalsIgnoreCase ( key ) ) { if ( hasFooter ) { _footerKeys. remove ( i ) ; _footerValues. remove ( i ) ; } { hasFooter = true ; _footerValues. set ( i, value ) ; } } } if ( hasFooter ) { _footerKeys. add ( key ) ; _footerValues. add ( value ) ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void addAttribute ( String name, final String value ) { if ( melemContext mstartTagOpen ) { final patchedName = patchName ( name ) ; final localName = getLocalName ( patchedName ) ; final uri = getNamespaceURI ( patchedName, ) ; addAttributeAlways ( uri, localName, patchedName,CDATA", value, ) ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public MimeMessage createMimeMessage ( Session session ) throws MessagingException { if ( isEmpty ( htmlPart ) isEmpty ( textPart ) ) { throw new IllegalArgumentException ( "Missing email content" ) ; } final MimeMessage msg = MimeMessage ( session ) ; msg setSubject ( subject ) ; msg setFrom ( InternetAddress ( from ) ) ; msg setContent ( createMultiPart ( ) ) ; msg setRecipients ( Message RecipientType TO, InternetAddress parse ( recipients, ) ) ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static ForwardCurveInterpolation createForwardCurveFromMonteCarloLiborModel ( String name, LIBORModelMonteCarloSimulationModel model, double startTime ) throws CalculationException { timeIndex = model. getTimeIndex ( startTime ) ; ArrayList < RandomVariable > liborsAtTimeIndex = new ArrayList < > ( ) ; firstLiborIndex = model. getLiborPeriodDiscretization ( ). getTimeIndexNearestGreater ( startTime ) ; firstLibTime = model. getLibPeriodretization ( ). getTime ( firstLibIndex ) ; if ( firstLiborTime > startTime ) { liborsAtTimeIndex. add ( model. getLIBOR ( startTime, startTime, firstLibTime ) ) ; } double times = new double firstLiborTime startTime? ( model. getNumberOfLibors ( ) firstLiborIndex ) : ( model. getNumberOfLibors ( ) firstLiborIndex + ) ; times = ; indexOffset = firstLiborTime startTime? : ; ( i = firstLiborIndex ; i < model. getNumberOfLibors ( ) ; i ) { liborsAtTimeIndex. add ( model. getLIBOR ( timeIndex, i ) ) ; times [ i firstLibIndex + indexOffset ] = model. getLibPeriodretization ( ). getTime ( i ) startTime ; } RandomVariable libors = liborsAtTimeIndex. ( new RandomVariable liborsAtTimeIndex. size ( ) ) ; return ForwardCurveInterpolation. createForwardCurveFromForwards ( name, times, libors, model. getLiborPeriodDiscretization ( ). getTimeStep ( firstLiborIndex ) ) ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public ServiceCall < Void > deleteWord ( DeleteWordOptions deleteWordOptions ) { Validator. notNull ( deleteWordOptions, "deleteWordOptions cannot be null" ) ; String =vcustomizations", "words" } ; String pathParameters = deleteWordOptions. customizationId ( ), deleteWordOptions. word ( ) } ; RequestBuilder builder = RequestBuilder. delete ( RequestBuilder. constructHttpUrl ( getEndPoint ( ), pathSegments, pathParameters ) ) ; Map < String, String > sdkHeaders = SdkCommon. getSHeaders (text_to_speech,v,deleteWord ) ; ( Entry < String, String > header : sdkHeaders. ( ) ) { builder. header ( header. getKey ( ), header. getValue ( ) ) ; } return createServiceCall ( builder. build ( ), ResponseConverterUtils. getVoid ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean tryMove ( float x, float y ) {x = playerX + x ;y = playerY + y ; if ( blocked ( newx, newy ) ) if ( blocked ( newx, playerY ) ) { if ( blocked ( playerX, newy ) ) { return false ; } { playerY =y ; return true ; } } { playerX =x ; return true ; } } { playerX =x ; playerY =y ; return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { { this messages clear ( ) ; this dataLogger. prepareForRead ( ) ; this. dataLogger. recover ( this ) ; } ( e ) { throw new DelegatedRuntimeException ( e ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clearSources ( ) { synchronized ( mAudioSources ) { ( GVRAudioSource source mAudioSources ) sourceListener ( null ) ; } mAudioSources. clear ( ) ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
@ SuppressWarnings ( "unchecked" ) public static < V extends NumberVector > NumberVector. Factory < V > guessFactory ( SimpleTypeInformation < V > in ) { NumberVector Factory < V > factory = ; if ( in VectorTypeInformation ) { factory = ( NumberVector. Factory < V > ) ( ( VectorTypeInformation < V > ) in ). getFactory ( ) ; } if ( factory ) { { Field f = in getRestrictionClass ( ) getField (FACTORY ) ; factory = ( NumberVector Factory < V > ) f get ( ) ; } ( e ) { LoggingUtil. warning (Cannot determine factory for type + in. getRestrictionClass ( ), e ) ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { if ( rootDir exists ( ) ) rootDir mkdirs ( ) ; if ( rootSaveDir exists ( ) ) rootSaveDir mkdirs ( ) ; if ( paths null ) paths = Maps newHashMap ( ) ; if ( labelRootDirs null ) labelRootDirs = ( ) ; ( i = ; i < numLabels ; i ) { paths. put ( i, new ArrayList < File > ( ) ) ; labelRootDirs. add ( new File ( rootDir, String. valueOf ( i ) ) ) ; } ( dataSetIterator. ( ) ) DataSet next = dataSetIterator. next ( ) ; if ( miniBatchSize < ) miniBatchSize = next numExamples ( ) ; ( i = ; i < next. numExamples ( ) ; i ) { DataSet currExample = next. get ( i ) ; if ( labelRootDirs get ( currExample outcome ( ) ). exists ( ) ) labelRootDirs. get ( currExample. outcome ( ) ). mkdirs ( ) ; File example = new File ( labelRootDirs. get ( currExample. outcome ( ) ), String. valueOf ( paths. get ( currExample. outcome ( ) ). size ( ) ) ) ; currExample. save ( example ) ; paths. get ( currExample. outcome ( ) ). add ( example ) ; } } numsSaved = ; ( paths. ( ) ) List < DataSet > miniBatch = new ArrayList < > ( ) ; ( miniBatch. size ( ) miniBatchSize && paths. ( ) ) ( i = ; i < numLabels ; i ) { if ( paths. get ( i ) null && paths. get ( i ). isEmpty ( ) ) { DataSet d = new DataSet ( ) ; d. load ( paths. get ( i ). remove ( ) ) ; miniBatch. add ( d ) ; } else paths. remove ( i ) ; } } if ( rootSaveDir. exists ( ) ) rootSaveDir. mkdirs ( ) ; if ( miniBatch. isEmpty ( ) ) { DataSet merge = DataSet. merge ( miniBatch ) ; if ( dataNormalization null ) dataNormalization. transform ( merge ) ; merge. save ( new File ( rootSaveDir, String. format ( "datasetdbin, numsSaved ) ) ) ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap ( double unixTime ) { gpsTime = unixTime 364800 ; gpsTime += countleaps ( gpsTime true ) ; return isleap ( gpsTime ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void setSunXMLHeaders ( final Marshaller aMarshaller, final String sXMLHeaders ) { sPropertyName SUNXMLHEADERS ; _setProperty ( aMarshaller, sPropertyName, sXMLHeaders ) ; }<CODESPLIT>Set the Sun specific XML header string .
private void sendKeepAliveBridgeMessage ( int appId, String bridgeId, String token, final CallStatsHttp2Client httpClient ) { apiTS = System ( ) ; BridgeKeepAliveMessage message = BridgeKeepAliveMessage ( bridgeId, apiTS ) ; requestMessageString = gson toJson ( message ) ; httpClient. sendBridgeAlive ( keepAliveEventUrl, token, requestMessageString, new CallStatsHttp2ResponseListener ( ) { public void onResponse ( Response response ) { responseStatus = response code ( ) ; BridgeKeepAliveResponse keepAliveResponse ; { responseString = response body ( ) string ( ) ; keepAliveResponse = gson. fromJson ( responseString, BridgeKeepAliveResponse. class ) ; } ( IOException e ) { e. printStackTrace ( ) ; throw new RuntimeException ( e ) ; } ( JsonSyntaxException e ) { logger. error ( "Json Syntax Exception " + e. getMessage ( ), e ) ; e. printStackTrace ( ) ; throw new RuntimeException ( e ) ; } httpClientDised ( ) ; if ( responseStatus CallStatsResponseStatus RESPONSESTATUSSUCCESS ) { keepAliveStatusListener. onSuccess ( ) ; } if ( responseStatus CallStatsResponseStatus INVALIDAUTHENTICTOKEN ) { stopKeepAliveSender ( ) ; keepAliveStatusListener. onKeepAliveError ( CallStatsErrors. AUTH_ERROR, keepAliveResponse. getMsg ( ) ) ; } { httpClientDised ( true ) ; } } public void onFailure ( Exception e ) { logger. ( "Response exception " + e. toString ( ) ) ; httpClient setDised ( true ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public StreamingOutput getResource ( final String resourceName, final long nodeId, final Map < QueryParameter, String > queryParams ) throws JaxRxException { final StreamingOutput sOutput = new StreamingOutput ( ) { public void write ( final OutputStream output ) throws IOException, JaxRxException { final String revision = queryParams get ( QueryParameter REVISION ) ; final String wrap = queryParams get ( QueryParameter WRAP ) ; final String doNodeId = queryParams get ( QueryParameter OUTPUT ) ; final wrapResult = ( wrap )? : wrap equalsIgnoreCase ( YESSTRING ) ; final nodeid = ( doNodeId )? : doNodeId equalsIgnoreCase ( YESSTRING ) ; final Long rev = revision? : Long. valueOf ( revision ) ; serialize ( resourceName, nodeId, rev, nodeid, output, wrapResult ) ; } } ; return sOutput ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static ManagedEntity [ ] createManagedEntities ( ServerConnection sc, ManagedObjectReference [ ] mors ) { if ( mors == null ) { return new ManagedEntity [ 0 ] ; } ManagedEntity mes = new ManagedEntity mors. length ] ; for ( i = ; i < mors. length ; i ) { mes i = createExactManagedEntity ( sc, mors i ) ; } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static Function < String, String > createStringTemplateSource ( I_CmsFormatterBean formatter, Supplier < CmsXmlContent > contentSupplier ) { return key -> { result = ; if ( formatter ) { result = formatter getAttributes ( ) get ( key ) ; } if ( result ) { CmsXmlContent content = contentSupplier get ( ) ; if ( content ) { result = content. getHandler ( ). getParameter ( key ) ; } } return result ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static final ByteBuffer createReadWriteMessage ( final byte opCode, final int logicalBlockAddress, final short transferLength ) { ByteBuffer cdb = ByteBuffer allocate ( DEFAULT_CDB_LENGTH ) ; cdb put ( opCode ) ; cdb position (BLOCKADDRESSOFFSET ) ; cdb putInt ( logicalBlockAddress ) ; cdb position ( TRANSFER_LENGTH_OFFSET ) ; cdb putShort ( transferLength ) ; cdb rewind ( ) ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( ByteBuffer [ ] dsts, int offset, int length ) throws IOException { rc fillAppRead ( ) ; ( rc ) return rc ; } return ByteBuffers. move ( appRead, dsts, offset, length ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void setInt ( MemorySegment [ ] segments, int offset, int value ) { if ( inFirstSegment ( segments, offset, 4 ) ) segments putInt ( offset, value ) ; } { setIntMultiSegments ( segments, offset, value ) ; } }<CODESPLIT>set int from segments .
public Optional < User > getOptionalUser ( String username ) { return ( Optional ofNullable ( getUser ( username ) ) ) ; } GitLabApiException glae ) return ( GitLabApi. createOptionalFromException ( glae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void registerRateLimiterComponent ( ) { String componentPropName = GatewayConfigProperties. COMPONENT_PREFIX + IRateLimiterComponent. class. getSimpleName ( ) ; setConfigProperty ( componentPropName, ESRateLimiterComponent. class. getName ( ) ) ; setConfigProperty ( componentPropName + ".client.type", "jest" ) ; setConfigProperty ( component + ".clientprotocol", "${apimanesprotocol}" ) ; setConfigProperty ( component + ".clienthost", "${apimaneshost}" ) ; setConfigProperty ( component + ".clientport", "${apimanesport}" ) ; setConfigProperty ( component + ".clientusername", "${apimanesusername}" ) ; setConfigProperty ( component + ".clientpassword", "${apimanes.password}" ) ; }<CODESPLIT>The rate limiter component .
public Point3d getCoordinatesFromGridPoint ( int gridPoint ) { int dimCounter = ; Point3d point = new Point3d (,, ) ; for ( z = ; z < grid [ ] [ ]. length ; z ) { for ( y = ; y < grid [ ]. length ; y ) { for ( x = ; x < grid. length ; x ) { if ( dimCounter == gridPoint ) { point. x = minx + latticeConstant * x ; point. y = miny + latticeConstant * y ; point. z = minz + latticeConstant * z ; return point ; } dimCounter ++ ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void setColor ( final Color COLOR ) { if ( color ) { _color = COLOR ; } { color set ( COLOR ) ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void releaseEvent ( EventId eventId ) throws Exception { Lockable < V > eventWrapper = sharedBuffer getEvent ( eventId ) ; if ( eventWrapper ) if ( eventWrapper release ( ) ) { sharedBuffer removeEvent ( eventId ) ; } { sharedBuffer upsertEvent ( eventId, eventWrapper ) ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String toSql ( boolean showParameters ) { String sql ; if ( forPaginator ) { sql = metaModel. getDialect ( ). formSelect ( null, null, fullQuery, orderBys, limit, offset ) ; } { sql = fullQuery? fullQuery : metaModel. getDial ( ). formSelect ( metaModel. getTableName ( ),, subQuery, orderBys, limit, offset ) ; } if ( showParameters ) { = new ( sql ). append ( with parameters ) ; join (, params, ", ) ; sql =. toString ( ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source getSourceFromUriResolver ( StylesheetHandler handler ) throws TransformerException { Source s = ; TransformerFactoryImpl processor = handler getStylesheetProcessor ( ) ; URIResolver uriresolver = processor getURIResolver ( ) ; if ( uriresolver ) { href = getHref ( ) ; base = handler getBaseIdentifier ( ) ; s = uriresolver resolve ( href, base ) ; } return s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public String getTitle ( ) { if ( JournalType featOkTst && ( ( JournalType ) jcasType ) casFeattitle null ) jcasType jcas throwFeatMissing ( "title, "de.julielab.jules.types.Journal" ) ; return jcasType. ll_cas. ll_getStringValue ( addr, ( ( Journal_Type ) jcasType ). casFeatCode_title ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static Val of ( Object o ) { if ( o o Val ) { return Cast. as ( o ) ; } return new Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void addContextTerms ( SparseDoubleVector meaning, Queue < String > words, int distance ) { ( String term : words ) { if ( term ( IteratorFactory. EMPTYTOKEN ) ) { dimension = basis. getDimension ( term ) ; if ( dimension 1 ) ; meaning. set ( dimension, weighting. weight ( distance, windowSize ) ) ; ++ distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public ArrayList < View > getViews ( ) { { if ( config commandLogging ) { Log d ( config. commandLoggingTag,getViews ) ; } return viewFetcher. getViews ( null, false ) ; } ( e ) { e. printStackTrace ( ) ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private < E extends WeightedEdge > SparseDoubleVector getVertexWeightVector ( WeightedGraph < E > g, int vertex ) { if ( keepWeightVectors ) SparseDoubleVector weightVec = vertexToWeightVector ( vertex ) ; if ( weightVec ) synchronized ( this ) { weightVec = vertexToWeightVector ( vertex ) ; if ( weightVec ) weightVec = computeWeightVector ( g, vertex ) ; vertexToWeightVector put ( vertex, weightVec ) ; } } } return weightVec ; } return computeWeightVector ( g, vertex ) ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static int fillRows ( Row [ ] rows, TypeDescription schema, VectorizedRowBatch batch, int [ ] selectedFields ) { rowsToRead = Math. min ( ( ) batch. count ( ), rows. length ) ; List < TypeDescription > fieldTypes = schema. getChildren ( ) ; ( field = ; field < selectedFields. length ; field ) { orcIdx = selectedFields fieldIdx ; readField ( rows, fieldIdx, fieldTypes. get (cIdx ), batch. cols [cIdx ], rowsToRead ) ; } return rowsToRead ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public List < ICalProperty getProperties ( T component ) { return ArrayList < ICalProperty > ( component getProperties ( ) values ( ) ) ; }<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double computeTauAndDivide ( final int j, final int numRows, final double [ ] u, final double max ) { double tau = ; ( i = ; i < numRows ; i ) { double d = u i /= max ; tau += d * d ; } tau = Math. sqrt ( tau ) ; if ( u j ] < ) tau = tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic getEpic ( String epicKey, Map < String, Epic > epicMap ) { { url = featureSettings getJiraBaseUrl ( ) + ( featureSettings getJiraBaseUrl ( ) endsWith ( "/" )? : "/" ) + format ( EPICRESTSUFFIX, epicKey ) ; ResponseEntity < String > responseEntity = makeRestCall ( url ) ; responseBody = responseEntity getBody ( ) ; JSONObject issue = ( JSONObject ) parser. parse ( responseBody ) ; if ( issue ) { return null ; } return saveEpic ( issue, epicMap, false ) ; } ( ParseException pe ) { LOGGER. error (Parser exception when parsing teams, pe ) ; } ( Hygieia e ) { LOGGER. error (Error in calling JIRA API", e ) ; } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable getLayoutConstraints ( final WComponent child ) { PanelModel model = getComponentModel ( ) ; ( model layoutConstraints ) return model. layoutConstraints. get ( child ) ; } return null ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map < String, Set < String > > getReverseMap ( ) { Set < Map. Entry < String, Set < String > > > entries = map. entrySet ( ) ; Map <, Set < > > rMap = HashMap <, Set < > > ( entries size ( ) ) ; ( Map. Entry < String Set < String > > me : entries ) k = me getKey ( ) ; Set < String > transList = me. getValue ( ) ; ( String trans : transList ) Set < String > entry = rMap. get ( trans ) ; if ( entry ) { Set < > toAdd = LinkedHashSet < > ( 6 ) ; toAdd. add ( k ) ; rMap. put ( trans, toAdd ) ; } { entry. add ( k ) ; } } } return rMap ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential setRefreshToken ( String refreshToken ) { lock. lock ( ) ; { if ( refreshToken null ) { Preconditions. checkArgument ( jsonFactory null && transport null && clientAuthentication!= null && tokenServerEncodedUrl!= null,Please use the Builder and call setJsonFactory setTransport setClientAuthentication + and setTokenServerUrl/setTokenServerEncodedUrl ) ; } this. refreshToken = refreshToken ; } { lock. unlock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void makeCurrent ( EGLSurface eglSurface ) { if ( mEGLDisplay EGL14 EGLNODISPLAY ) { Log. d ( TAG,NOTE makeCurrent wo display ) ; } if ( EGL14 eglMakeCurrent ( mEGLDisplay, eglSurface, eglSurface, mEGLContext ) ) { throw new RuntimeException ( "eglMakeCurrent failed" ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static < T T navigateSafe ( final T defaultValue final Object source final Object... paths ) { navigateOrDefault ( defaultValue, source, paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clearCache ( CommerceWarehouseItem commerceWarehouseItem ) { entityCache removeResult ( CommerceWarehouseItemModelImpl ENTITYCACHEENABLED, CommerceWarehouseItemImpl class, commerceWarehouseItem getPrimaryKey ( ) ) ; finderCache clearCache ( FINDER_CLASS_NAME_LIST_WITH_INATION ) ; finderCache clearCache ( FINDER_CLASS_NAME_LIST_WITHOUT_INATION ) ; clearUniqueFindersCache ( ( CommerceWarehouseItemModelImpl ) commerceWarehouseItem, ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String input, String output ) throws MPXJException, IOException { MPPReader reader = new MPPReader ( ) ; m_project = reader. read ( input ) ; varDataFileName ; projectDirName ; mppFileType = NumberHelper getInt ( mproject getProjectProperties ( ) getMppFileType ( ) ) ; ( mp ) 8 projectDirName =" ; varDataFileName =FixDeferFix" ; ; } 9 projectDirName =" ; varDataFileName =VarData" ; ; } projectDirName =" ; varDataFileName =VarData" ; ; } projectDirName =" ; varDataFileName =VarData" ; ; } default : throw new IllegalArgumentException ( "Unsupported file type " + mpp ) ; } } FileInputStream is = new FileInputStream ( input ) ; POIFSFileSystem fs = new POIFSFileSystem ( is ) ; is. close ( ) ; DirectoryEntry root = fs. getRoot ( ) ; m_projectDir = ( DirectoryEntry ) root. getEntry ( projectDirName ) ; Map <, > replacements = new HashMap <, String > ( ) ; ( Task task : m_project. getTasks ( ) ) mapText ( task. getName ( ), replacements ) ; } processReplacements ( ( ( DirectoryEntry ) m_projectDir. getEntry (TBkTask" ) ), varDataFileName, replacements, true ) ; replacements. clear ( ) ; ( Resource resource : m_project. getResources ( ) ) mapText ( resource. getName ( ), replacements ) ; mapText ( resource. getInitials ( ), replacements ) ; } processReplacements ( ( DirectoryEntry ) m_projectDir. getEntry (TBkRsc" ), varDataFileName, replacements, true ) ; replacements. clear ( ) ; ProjectProperties properties = m_project. getProjectProperties ( ) ; mapText ( properties. getProjectTitle ( ), replacements ) ; processReplacements ( m_projectDir,Props", replacements, true ) ; replacements. clear ( ) ; mapText ( properties. getProjectTitle ( ), replacements ) ; mapText ( properties. getSubject ( ), replacements ) ; mapText ( properties. getAuthor ( ), replacements ) ; mapText ( properties. getKeywords ( ), replacements ) ; mapText ( properties. getComments ( ), replacements ) ; processReplacements ( root,SummaryInformation", replacements, ) ; replacements. clear ( ) ; mapText ( properties. getManager ( ), replacements ) ; mapText ( properties. getCompany ( ), replacements ) ; mapText ( properties. getCategory ( ), replacements ) ; processReplacements ( root,DocumentSummaryInformation", replacements, ) ; FileOutputStream os = new FileOutputStream ( output ) ; fs. writeFilesystem ( os ) ; os. flush ( ) ; os. close ( ) ; fs. close ( ) ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void setRollbackOnly ( ) { final = TraceComponent. isAnyTracingEnabled ( ) ; if ( && tc isEntryEnabled ( ) ) { Tr. entry ( tc, "setRollbackOnly", this ) ; } LocalTransactionCoordinator lCoord = getLocalCoord ( ) ; if ( lCoord null ) { lCoord. setRollbackOnly ( ) ; } else { try { txService. setRollbackOnly ( ) ; } ( e ) {. ( e, CLASS_NAME +setRollbackOnly,6, this ) ; throw new IllegalStateException ( "No active transaction" ) ; } } if ( && tc isEntryEnabled ( ) ) { Tr. exit ( tc, "setRollbackOnly" ) ; } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse404Response ( final String content ) { if ( content contains ( "\"reason\":missing\"" ) ) { return true ; }. debug (Design document not found error is, content ) ; return false ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private ListenableFuture <? > writeBlocksToTargets ( Collection < DBBPool. BBContainer > outputBuffers, int [ ] serialized ) { Preconditions. checkArgument ( m_tableTasks. size ( ) serialized. length ) ; Preconditions. checkArgument ( outputBuffers. size ( ) serialized. length ) ; final List < ListenableFuture <? > > writeFutures = < ListenableFuture <? > > ( outputBuffers size ( ) ) ; Iterator < DBBPool. BBContainer > container = outputBuffers. iterator ( ) ; serializedIndex = ; ( SnapshotTableTask task m_tableTasks ) final DBBPool BBContainer container = containerIter next ( ) ; final ByteBuffer buf = container b ( ) ; buf. limit ( serialized serializedIndex + task. m_target. getHeaderSize ( ) ) ; buf. position ( ) ; Callable < DBBPool. BBContainer > valueForTarget = Callables. returning ( container ) ; if ( task mfilters ) { ( SnapshotDataFilter filter : task. m_filters ) valueForTarget = filter. filter ( valueForTarget ) ; } } ListenableFuture <? > writeFuture = task mtarget write ( valueForTarget, mtableId ) ; if ( writeFuture ) { writeFutures. add ( writeFuture ) ; } } return F. allAsList ( writeFutures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean isTerminal ( IAtom atom, Map < IAtom, Integer > atomToIndex ) { return graph atomToIndex get ( atom ) ] length == ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler < AsyncResult < Void > > createUndeployHandler ( final Message < JsonObject > message ) { return new Handler < AsyncResult < Void > > ( ) { public void handle ( AsyncResult < Void > result ) { if ( result failed ( ) ) { message. reply ( new JsonObject ( ). putString (status,error ). putString (message, result. cause ( ). getMessage ( ) ) ) ; } { message. reply ( new JsonObject ( ). putString (status, ) ) ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public PhotoAllContext getAllContexts ( String photoId ) throws FlickrException { PhotoSetList < PhotoSet > setList = new PhotoSetList < PhotoSet > ( ) ; PoolList < Pool > poolList = new PoolList < Pool > ( ) ; PhotoAllContext allContext = new PhotoAllContext ( ) ; Map < String, Object > parameters = new HashMap < String, Object > ( ) ; parameters. put ( "method", METHOD_GET_ALL_CONTEXTS ) ; parameters. put ( "photo_id", photoId ) ; Response response = transport. get ( transport. getPath ( ), parameters,, shared ) ; if ( response isError ( ) ) { throw new FlickrException ( response. ( ), response. ( ) ) ; } Collection < Element > photosElement = response. getPayloadCollection ( ) ; ( Element : photosElement ) { if ( setElement getTagName ( ) ( "set ) ) { PhotoSet pset = new PhotoSet ( ) ; pset. setTitle ( setElement. getAttribute (title ) ) ; pset. setSecret ( setElement. getAttribute (secret ) ) ; pset. setId ( setElement. getAttribute (id ) ) ; pset. setF ( setElement. getAttribute (f ) ) ; pset. setPrimary ( setElement. getAttribute ( ) ) ; pset. setServer ( setElement. getAttribute (server ) ) ; pset. setViewCount ( Integer. ( setElement. getAttribute (view_count ) ) ) ; pset. setCommentCount ( Integer. ( setElement. getAttribute (comment_count ) ) ) ; pset. setCountPhoto ( Integer. ( setElement. getAttribute (count_photo ) ) ) ; pset. setCountVideo ( Integer. ( setElement. getAttribute (count_video ) ) ) ; setList. add ( pset ) ; allContext. setPhotoSetList ( setList ) ; } else if ( setElement getTagName ( ) ( "pool ) ) { Pool pool = new Pool ( ) ; pool. setTitle ( setElement. getAttribute (title ) ) ; pool. setId ( setElement. getAttribute (id ) ) ; pool. setUrl ( setElement. getAttribute (url ) ) ; pool. setIconServer ( setElement. getAttribute (iconserver ) ) ; pool. setIconF ( setElement. getAttribute (iconf ) ) ; pool. setMemberCount ( Integer. ( setElement. getAttribute (members ) ) ) ; pool. setPoolCount ( Integer. ( setElement. getAttribute (pool_count ) ) ) ; poolList. add ( pool ) ; allContext. setPoolList ( poolList ) ; } } return allContext ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map < String, Object > getFieldData ( Map < String, Object > properties ) { Map < String, Object > propReturn = ; if ( properties ) { propReturn = new Hashtable < String, Object > ( ) ; ( i = ; ; i ) String strFieldNumber = DBParams. FIELD + Integer. toString ( i ) ; String strFieldName = ( String ) properties. get ( strFieldNumber ) ; if ( strFieldName ) ; Record record = this. getMainRecord ( ) ; if ( strFieldName indexOf ( '.' ) 1 ) { record = this. getRecord ( strFieldName. substring (, strFieldName. indexOf ( '.' ) ) ) ; strFieldName = strFieldName. substring ( strFieldName. indexOf ( '.' ) + 1 ) ; } BaseField field = ; if ( record ) field = record getField ( strFieldName ) ; if ( field null ) propReturn put ( strFieldNumber, field getData ( ) ) ; } } return propReturn ; }<CODESPLIT>GetFieldData Method .
protected void connect ( InetAddress address, int port ) throws SocketException { BlockGuard getThreadPolicy ( ) onNetwork ( ) ; connect ( address, port ) ; connectedAddress = address ; connectedPort = port ; connected ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char getEscaped ( ) { pos ++ ; if ( pos == length ) { throw new IllegalStateException ( "Unexpected end of DN: " + dn ) ; } ( chars [ pos ] ) { '"' : '\\' : ',' : '=' : '+' : '<' : '>' : '#' : ';' : case'' : case '*' : case '%' : case '_' : return chars [ pos ] ; default : return getUTF8 ( ) ; } }<CODESPLIT>returns escaped char
private static String cutOffValidationMatchersPrefix ( String expression ) { if ( expression startsWith ( Citrus VALIDMATCHERPREFIX ) && expression endsWith ( Citrus VALIDMATCHERSUFFIX ) ) { return expression. substring ( Citrus. VALIDATION_MATCHER_PREFIX. length ( ), expression. length ( ) - Citrus. VALIDATION_MATCHER_SUFFIX. length ( ) ) ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public SortedSet < TypeElement > implementingClasses ( TypeElement typeElement ) { SortedSet < TypeElement > result = get ( implementingClasses, typeElement ) ; SortedSet < TypeElement > intfcs = allSubClasses ( typeElement, false ) ; Iterator < TypeElement > subInterfaces = intfcs. iterator ( ) ; ( sub. ( ) ) Iterator < TypeElement > implementingClasses = implementingClasses ( subInterfaces. next ( ) ). iterator ( ) ; ( implementingClasses. ( ) ) TypeElement c = implementingClassesIter. next ( ) ; if ( result contains ( c ) ) { result. add ( c ) ; } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ( ValidationResult validation ) { correct &= validation correct ; if ( validate ) return ; errors addAll ( validation errors ) ; warnings. addAll ( validation. warnings ) ; }<CODESPLIT>Adds a validation result to this .
public static String toMetaFieldInfoString ( Object obj ) { buf = new ( 100 ) ; MetaFieldInfo fields = toMetaFieldInfoArray ( obj, null, true ) ; ( i = ; i < fields. length ; i ) { MetaFieldInfo field = fields i ; buf. append ( field. name ) ; buf. append ( "=" ) ; if ( field actualValue null && field actualValue getClass ( ) ( String class ) ) { buf. append ( '"' ) ; buf. append ( field. value ) ; buf. append ( '"' ) ; } else { buf. append ( field. value ) ; } if ( i + 1 < fields length ) buf. append ( "," ) ; } return buf. toString ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public String getArrayClassName ( Class < > clazz ) { ( clazz isArray ( ) ) return getArrayClassName ( clazz. getComponentType ( ) ) + "[ ; } return clazz. getName ( ) ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void addBlock ( Block block ) { if ( isInitialized ( ) ) return ; } BlockScanInfo info = blockMap ( block ) ; if ( info ) { warn ( "Adding an already existing block " + block ) ; delBlockInfo ( info ) ; } info = BlockScanInfo ( block ) ; info lastScanTime = getNewBlockScanTime ( ) ; addBlockInfo ( info ) ; adjustThrottler ( ) ; }<CODESPLIT>Adds block to list of blocks
public String getTile ( int x, int y ) { if ( ( x getArrayWidth ( ) ) ( y getArrayHeight ( ) ) ( x < ) ( y < ) ) { throw new IllegalArgumentException ( ) ; } return image [ x ] [ y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBPDslBuilder BitArray ( final String name, final String bitLenExpression, final String sizeExpression ) { Item item = Item ( BinType BITARRAY name, this byteOrder ) ; item bitLenExpression = assertExpressionChars ( bitLenExpression ) ; item sizeExpression = assertExpressionChars ( sizeExpression ) ; this addItem ( item ) ; return this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object indexOf ( String strPattern, String strInput, int offset, boolean caseSensitive, boolean matchAll ) throws MalformedPatternException { PatternMatcherInput input = new PatternMatcherInput ( strInput ) ; Perl5Matcher matcher = new Perl5Matcher ( ) ; compileOptions = caseSensitive? : Perl5Compiler. CASEINSENSITIVE ; compileOptions += Per5 SINGLELINEMASK ; if ( offset < 1 ) offset = 1 ; Pattern pattern = getPattern ( strPattern, compileOptions ) ; if ( offset <= strInput length ( ) ) input setCurrentOffset ( offset 1 ) ; if ( offset <= strInput length ( ) ) { Array matches = new ArrayImpl ( ) ; (. contains ( input, pattern ) ) match = matcher. getMatch ( ). beginOffset ( ) + ; if ( matchAll ) { return new Double ( match ) ; } matches. appendEL ( match ) ; } if ( matches size ( ) ) { return matches ; } } return 0 ; }<CODESPLIT>return index of the first occurence of the pattern in input text
private Object checkRegisteredServicesByLdapFilter ( String filter ) throws InvalidSyntaxException { ServiceReference <? > references = getBundleContext ( ) getServiceReferences ( ( String ) null, filter ) ; if (OrNull ( references ) ) { return null ; } if ( references ) { return getBundleContext ( ). getService ( references [ 0 ] ) ; } throw new RuntimeException ( "Too services registered for filter " + filter ) ; }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void postEvent ( DEvent event ) { if ( _tevent ) { _tevent postEvent ( event ) ; } if ( _omgr ) { _omgr postEvent ( event ) ; } { log ( "Dropping event for non- or no longer managed object", "oid", getOid ( ), "class", getClass ( ) getName ( ), "event", event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static Identity createOverlayManagerGroup ( String name ) { return ExtendedIdentifiers createExtendedIdentifier ( IfmapStrings ICS_METADATA_NS_URI, IfmapStrings ICS_METADATA_PREFIX,overlaymanager-group, name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static DoubleMatrix cholesky ( DoubleMatrix A ) { DoubleMatrix result = A. dup ( ) ; info = NativeBlas dpotrf ( 'U, A rows, result data,, A rows ) ; if ( info < ) { throw new LapackArgumentException ( "DPRF", - info ) ; } if ( info > ) { throw new LapackPositivityException ( "DPRF", "Minor " + info + " was negative Matrix must be positive definite." ) ; } clearLower ( result ) ; return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean isCaller ( final String className, final String methodName ) { final Throwable throwable = new Throwable ( ) ; final StackTraceElement stackElements = throwable. getStackTrace ( ) ; if ( null stackElements ) { LOGGER. log ( Level. WARN, "Empty call stack" ) ; return false ; } final matchAllMethod = "*". ( methodName ) ; ( i = ; i < stackElements. ; i ) if ( stackElements i ] getClassName ( ) ( className ) ) { return matchAllMethod? true : stackElements [ i ]. getMethodName ( ). equals ( methodName ) ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public InputStream setFlag ( String name String value ) throws IOException { return executeCommand (setflag, name, value ) ; }<CODESPLIT>set JVM command line flag
public Q addFlag ( Position position, String prefix, Expression <? > expr ) { Expression <? > flag = Expressions template ( expr getType ( ) prefix + expr ) ; return queryMixin. addFlag ( new QueryFlag ( position, flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ConnectionInfo newConnectionInfo ( Channel c ) { SocketChannel channel = ( SocketChannel ) c ; InetSocketAddress hostAddress = channel. localAddress ( ) ; InetSocketAddress remoteAddress = getRemoteAddress ( channel ) ; String scheme = channel pipeline ( ) get ( SslHandler class )?https :http ; return new ConnectionInfo ( hostAddress, remoteAddress, scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDPDomain getPDPDomain ( String pdpDomainName ) throws IOException { SortedSet < > domainRanges = ; if ( serializedCache ) { if ( serializedCache ( pdpDomainName ) ) { domain = serializedCache. get ( pdp ) ; } } shouldRequestDomainRanges = checkDomainRanges ( domainRanges ) ; { if ( shouldRequestDomainRanges ) { URL u = URL ( server +getPDPDomainpdpId + pdpDomainName ) ; logger. info ( "Fetching, u ) ; InputStream response = URLConnectionTools. getInputStream ( u ) ; xml = JFatCatClient convertStreamToString ( response ) ; domainRanges = XMLUtil. getDomainRangesFromXML ( xml ) ; if ( domainRanges ) cache ( pdpDomainName, domainRanges ) ; } } ( MalformedURLException e ) { logger. error ( "Problem generating PDP request URL for " + pdpDomainName, e ) ; throw new IllegalArgumentException ( "Invalid PDP name " + pdpDomainName, e ) ; } pdbId = ; List < ResidueRange > ranges = < ResidueRange > ( ) ; ( domainRange domainRanges ) SubstructureIdentifier strucId = SubstructureIdentifier ( domainRange ) ; if ( pdbId ) { pdbId = strucId. getPdbId ( ) ; } if ( pdbId ( strucId getPdbId ( ) ) ) { throw new RuntimeException ( "Don't know to take the union of domains from multiple PDB IDs." ) ; } ranges. addAll ( strucId. getResidueRanges ( ) ) ; } return new PDPDomain ( pdpDomainName, ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public Context getContext ( ) { if ( searchView ) return searchView. getContext ( ) ; } if ( supportView ) { return supportView. getContext ( ) ; } throw new IllegalStateException ( ERROR_NO_SEARCHVIEW ) ; }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean isMacroCycle ( IRing ring, IRingSet rs ) { if ( ring getAtomCount ( ) < 8 ) return false ; ( IBond bond : ring. bonds ( ) ) { found = ; ( IAtomContainer other : rs. atomContainers ( ) ) { if ( ring other ) ; if ( other contains ( bond ) ) { found = true ; ; } } if ( found ) return true ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T > T datastoreToJava ( Entity entity ) { { if ( entity ) return null ; } T result = ( T ) persistentClass newInstance ( ) ; populate ( entity, result ) ; return result ; } ( InstantiationException e ) { throw new RuntimeException ( e ) ; } ( e ) { throw new RuntimeException ( e ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void updateCacheState ( Map < String, Object > props ) { getAuthenticationConfig ( props ) ; ( cacheEnabled ) authCacheServiceRef activate ( cc ) ; } authCacheServiceRef deactivate ( cc ) ; } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static QuerySnapshot withChanges ( final Query query, Timestamp readTime, final DocumentSet documentSet, final List < DocumentChange > documentChanges ) { return new QuerySnapshot ( query, readTime ) List QueryDocumentSnapshot documents ; public List < QueryDocumentSnapshot > getDocuments ( ) { ( documents ) (Set ) ( documents ) documents documentSet ( ) ; } } } return Collections. unmodifiableList ( documents ) ; } public List < DocumentChange > getDocumentChanges ( ) { return Collections. unmodifiableList ( documentChanges ) ; } public int size ( ) { return documentSet. size ( ) ; } public boolean equals ( Object o ) { ( this o ) return true ; } ( o getClass ( ) o getClass ( ) ) return ; } QuerySnapshot that = ( QuerySnapshot ) o ; return Objects. equals ( query, that. query ) && Objects. equals ( this. size ( ), that. size ( ) ) && Objects. equals ( this. getDocumentChanges ( ), that. getDocumentChanges ( ) ) && Objects. equals ( this. getDocuments ( ), that. getDocuments ( ) ) ; } public int hashCode ( ) { return Objects. hash ( query, this. getDocumentChanges ( ), this. getDocuments ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean readSend ( InH3 hIn, OutboxAmp outbox, HeadersAmp headers ) throws IOException { MethodRefHamp methodHamp = ; { methodHamp = readMethod ( hIn ) ; } ( e ) { log. log ( Level. FINER, e. toString ( ), e ) ; skipArgs ( hIn ) ; return true ; } MethodRefAmp method = methodHamp getMethod ( ) ; ClassLoader loader = methodHamp getClassLoader ( ) ; Thread thread = Thread currentThread ( ) ; thread setContextClassLoader ( loader ) ; Object args = readArgs ( methodHamp, hIn ) ; if ( log ( _logLevel ) ) { log. log ( _logLevel, this + " send-r " + method. getName ( ) +Args ( args ) + " {to + method + + headers + ) ; } SendMessageN sendMessage = SendMessageN ( outbox, headers, method serviceRef ( ), method method ( ), args ) ; timeout = 1000L ; { sendMessage. offer ( timeout ) ; } ( e ) { log. fine ( e. toString ( ) ) ; if ( log ( Level ) ) { log. log ( Level. FINEST, e. toString ( ), e ) ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private String getRemoteFileName ( UploadFile file ) { if ( file getProperty ( PARAMREMOTEPATH ) endsWith ( "/" ) ) { return file. getName ( service ) ; } if ( file getProperty ( PARAMREMOTEPATH ) contains ( "/" ) ) { String tmp = file. getProperty ( PARAMREMOTE_PATH ). split ( "/" ) ; return tmp [ tmp. length - 1 ] ; } return file. getProperty ( PARAM_REMOTE_PATH ) ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initializeBufferMetrics ( Task task ) { final MetricGroup buffers = addGroup (buffers ) ; buffers gauge (inputQueueLength, new InputBuffersGauge ( task ) ) ; buffers. gauge (outputQueueLength, new OutputBuffersGauge ( task ) ) ; buffers. gauge (inPoolUsage, new InputBufferPoolUsageGauge ( task ) ) ; buffers. gauge (outPoolUsage, new OutputBufferPoolUsageGauge ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void doubleClick ( String fileName ) throws QTasteException { { new Region ( this rect ) doubleClick ( fileName ) ; } ( ) { throw new QTasteException ( ex. getMessage ( ), ex ) ; } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void setDestinationSSECustomerKey ( SSECustomerKey sseKey ) { if ( sseKey this sseAwsKeyManagementParams ) throw new IllegalArgumentException ( "Either SSECustomerKey or SSEAwsKeyManagementParams must not be set at the same time." ) ; } this destinationSSECustomerKey = sseKey ; }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void onFailure ( Throwable t ) { Toast makeText ( this, t getMessage ( ), LENGTHLONG ) show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paintDropLines ( SeaGlassContext context, Graphics g ) { JTable. DropLocation loc = table. getDropLocation ( ) ; if ( loc ) { return ; } Color color = ( Color ) style. get ( context,TabledropLineColor ) ; Color shortColor = ( Color ) style. get ( context,TabledropLineShortColor ) ; if ( color && shortColor ) { return ; } Rectangle rect ; rect = getHDropLineRect ( loc ) ; if ( rect ) { x = rect. x ; w = rect. width ; if ( color ) { extendRect ( rect, true ) ; g. setColor ( color ) ; g. fillRect ( rect. x, rect. y, rect. width, rect. height ) ; } if ( locInsertColumn ( ) && shortColor ) { g. setColor ( shortColor ) ; g. fillRect ( x, rect. y, w, rect. height ) ; } } rect = getVDropLineRect ( loc ) ; if ( rect ) { y = rect. y ; h = rect. height ; if ( color ) { extendRect ( rect, ) ; g. setColor ( color ) ; g. fillRect ( rect. x, rect. y, rect. width, rect. height ) ; } if ( locInsertRow ( ) && shortColor ) { g. setColor ( shortColor ) ; g. fillRect ( rect. x, y, rect. width, h ) ; } } }<CODESPLIT>Paint the drop lines if any .
public DatalogProgram createDatalog ( SWRLRule rule ) { rule accept ( this ) ; if (Supported ) { log warn ( "Not Supported Translation of " + errors ) ; errors clear ( ) ; } DatalogProgram dp = datalogFactory getDatalogProgram ( ) ; dpRule ( facts ) ; return dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflateAuthnRequest ( final byte [ ] decodedBytes ) { val inflated = CompressionUtils inflate ( decodedBytes ) ; if ( ( inflated ) ) return inflated ; } return CompressionUtils. decodeByteArrayToString ( decodedBytes ) ; }<CODESPLIT>Inflate authn request string .
public static FrameworkProjectConfig create ( final String name, final File propertyFile, final Properties properties, final IFilesystemFramework filesystemFramework ) { ( propertyFile exists ( ) ) generateProjectPropertiesFile ( name propertyFile,, properties, ) ; } return create ( name, propertyFile, filesystemFramework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clearLogContext ( ) { final LogContext embeddedLogContext = Holder LOGCONTEXT ; final Configurator configurator = embeddedLogContext getLogger ( ) detach ( Configurator ATTACHMENTKEY ) ; if ( configurator PropertyConfigurator ) { final LogContextConfiguration logContextConfiguration = ( ( PropertyConfigurator ) configurator ) getLogContextConfiguration ( ) ; clearLogContext ( logContextConfiguration ) ; } if ( configurator LogContextConfiguration ) { clearLogContext ( ( LogContextConfiguration ) configurator ) ; } { final List < String > loggerNames = Collections list ( embeddedLogContext. getLoggerNames ( ) ) ; ( String name : loggerNames ) final Logger logger = embeddedLogContext. getLoggerIfExists ( name ) ; if ( logger ) { final Handler handlers = logger. clearHandlers ( ) ; if ( handlers ) { ( Handler handler : handlers ) handler. close ( ) ; } } logger. setFilter ( null ) ; logger. setUseParentFilters ( false ) ; logger. setUseParentHandlers ( ) ; logger. setLevel ( Level. INFO ) ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public RestApiResponse execute ( long timeout TimeUnit timeUnit ) { Blocking blockForSingle ( delegate execute ( ), timeout, timeUnit ) ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public InputStream getInputStream ( HttpServletRequest request, MutableObject < byte [ ] > sourceMapResult ) throws IOException { byte bytes = this. bytes ; byte sourceMap = this. sourceMap ; filename = this filename ; InputStream result = ; if ( bytes ) { result = ByteArrayInputStream ( bytes ) ; if ( sourceMapResult && sourceMapSize > ) { sourceMapResult. setValue ( sourceMap ) ; } } if ( filename ) { ICacheManager cmgr = ( ( IAggregator ) request. getAttribute ( IAggregator. AGGREGATOR_REQATTRNAME ) ). getCacheManager ( ) ; File file = File ( cmgr getCacheDir ( ), filename ) ; if ( sourceMapSize ) { result = FileInputStream ( file ) ; } { CacheData data ; ObjectInputStream is = new ObjectInputStream ( new FileInputStream ( file ) ) ; { data = ( CacheData ) is. readObject ( ) ; } ( ClassNotFoundException e ) { throw new IOException ( e. getMessage ( ), e ) ; } { IOUtils. closeQuietly ( is ) ; } bytes = data. bytes ; sourceMap = data. sourceMap ; if ( sourceMapResult ) { sourceMapResult. setValue ( sourceMap ) ; } result = new ByteArrayInputStream ( bytes ) ; } } { throw new IOException ( ) ; } return result ; }<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void cacheIncludeAndIgnore ( WebElement table ) { if (IgnoreByMatches ( ) ) { setIgnoreByMatches ( < WebElement > ( ) ) ; ( By by getIgnoreRowsMatching ( ) ) getIgnoreByMatches ( ). addAll ( table. findElements ( by ) ) ; } } if ( getIncludeByMatches ( ) ) { setIncludeByMatches ( < WebElement > ( ) ) ; ( By by : getIncludeOnlyRowsMatching ( ) ) getIncludeByMatches ( ). addAll ( table. findElements ( by ) ) ; } } }<CODESPLIT>Does the table comparison
public < E > List < InlineDiffChunk < E > > inline ( List < E > previous, List < E > next ) { setError ( ) ; return this. inlineDiffDisplayer. display ( this. diffManager. diff ( previous, next, null ) ) ; } Diff ) setError ( e ) ; return null ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static CompletableFuture < MessageSet > getMessagesAroundUntil ( TextChannel channel, Predicate < Message > condition, long around ) { CompletableFuture < MessageSet > future = CompletableFuture < > ( ) ; channel getApi ( ) getThreadPool ( ) getExecutorService ( ) submit ( ( ) -> { List < Message > messages = < > ( ) ; Optional < Message > untilMessage = getMessagesAroundAsStream ( channel, around ). peek ( messages :: add ). filter ( condition ). findFirst ( ) ; future complete ( MessageSetImpl ( untilMessage map ( message -> messages ) orElse ( Collections ( ) ) ) ) ; } ( t ) { future. completeExceptionally ( t ) ; } } ) ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean findSipApplicationAnnotation ( InputStream stream ) { { byte rawClassBytes ; rawClassBytes = new byte stream. available ( ) ; stream. read ( rawClassBytes ) ; one = contains ( rawClassBytes, SIPAPPLICATION_BYTES ) ; two = contains ( rawClassBytes, ANNOTATION_BYTES ) ; if ( one && two ) return true ; } ( e ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map < String, Object > buildJobDataMap ( final JmxCommand jmxCommand, final Object [ ] params ) throws MBeanException { final Map < String, Object > jobDataMap = new HashMap < String, Object > ( ) ; { ind = ; ( JmxOption option : JmxOptions. getOptions ( ) ) option. process ( jobDataMap, String. valueOf ( params ind ) ) ; } ( Argument arg : this. remoteProgram. getArguments ( ) ) arg. setValueUsingParser ( String. valueOf ( params ind ) ) ; } } ( e ) { throw new MBeanException ( e ) ; } return jobDataMap ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void V ( StringBuilder buf ) { Token t = getNextToken ( ) ; if ( t tokenType TokenType VALUE ) { throw new IllegalStateException ( "Unexpected token " + t ) ; } buf. append ( t. getValue ( ) ) ; t = getNextToken ( ) ; if ( t tokenType TokenType EOL ) { return ; } else if ( t tokenType TokenType TRAILINGBACKSLASH ) { Vopt ( buf ) ; } }<CODESPLIT>Vopt = EOL V
public void addHeader ( final String sName, final String sValue ) { ( sValue ) _addHeader ( sName, sValue ) ; }<CODESPLIT>Add the passed header as is .
public static < N Number Number max ( List < N numberList ) { cal ( numberList, DoubleStream :: max ) ; }<CODESPLIT>Max number .
public int getChaincodeActionResponseStatus ( ) throws InvalidArgumentException { if ( statusReturnCode ) { return statusReturnCode ; } { ProposalResponsePayloadDeserializer proposalResponsePayloadDeserializer = getProposalResponsePayloadDeserializer ( ) ; statusReturnCode = proposalResponsePayloadDeserializer getExtension ( ) getResponseStatus ( ) ; return statusReturnCode ; } ( InvalidArgumentException e ) { throw e ; } ( e ) { throw new InvalidArgumentException ( e ) ; } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Queue < Pair < Env < AttrContext, JCClassDecl > > queue ) { generate ( queue ) ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static EnhancedMimeType create ( final String primary, final String sub, final Charset encoding, final String version, final Map < String, String > parameters ) { return new EnhancedMimeType ( primary, sub, encoding, version, parameters ) ; } ( final MimeType ) { new RuntimeException ( "Failed to create versioned mime type " + primary + + sub, ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static long toLongWithDefault ( Object value, long defaultValue ) { LongNullableLong ( value ) ; return!= null? ( long ) result : defaultValue ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void setIsolation ( String iso ) throws JspTagException { if ( TRANSACTIONREADCOMMITTED. ( iso ) ) { isolation = Connection. TRANSACTIONREADCOMMIT ; } else if ( TRANSACTIONREADUNCOMMITTED. ( iso ) ) { isolation = Connection. TRANSACTION_READ_UNCOMMIT ; } else if ( TRANSACTIONREPEATABLEREAD. ( iso ) ) { isolation = Connection. TRANSACTION_REPEATABLE_READ ; } else if ( TRANSACTIONSERIALIZABLE. ( iso ) ) { isolation = Connection. TRANSACTION_SERABLE ; } else { throw new JspTagException ( Resources. getMessage ( "TRANSACTION_INVALID_ISOLATION" ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node root ) { initTraversal ( root ) ; curNode = root ; pushScope ( root ) ; traverseBranch ( root, null ) ; popScope ( ) ; } ( Error | ) { throwUnexpectedException ( unexpectedException ) ; } }<CODESPLIT>Traverses a parse tree recursively .
public CollectionRequest < Tag > findByWorkspace ( String workspace ) { path = format ( "/workspaces/%tags, workspace ) ; return new CollectionRequest < Tag > ( this, Tag. class, path, "GET" ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule CriteriaOnlyFindQuery ( ) { return Sequence ( peek ( )CliQuery ( ), JsonParameter ( JsonObject ( ) ), peek ( ) setOperation ( Operation FIND ), peek ( ) setCriteria ( match ( ) ) ) ; }<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlinkLast ( Node < E > l ) { final E element = l. item ; final Node < E > prev = l. prev ; l. item = ; l. prev = ; last = prev ; if ( prev ) first = ; prev next = null ; size -- ; modCount ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void setupSimpleSecurityProperties ( Hashtable < String, Object > env, String userDn, char [ ] pwd ) { env put ( Context. SECURITY_AUTHENTICATION,simple ) ; env. put ( Context. SECURITY_PRINCIPAL, userDn ) ; env put ( Context SECURITYCREDENTIALS, ( pwd ) ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team createTeam ( String name String tag ) { return client sendRpcAndWait ( SERVICE,createTeam, name, tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void checkFilePattern ( String s ) throws ProblemException { Pattern p = null ; if ( File separatorChar '\\' ) { p = Pattern. compile ( "\\\\\\+" ) ; } else if ( File separatorChar '/' ) { p = Pattern. compile ( "\\*+" ) ; } else { throw new ProblemException ( "This platform uses the unsupported " + File. separatorChar + " as file separator character. Please add support for it!" ) ; } Matcher m = p. matcher ( s ) ; if ( m matches ( ) ) { throw new ProblemException ( "The string \"" + s + "\" is not a proper file name." ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ( ) throws Exception { ( Entry < TransactionType ShardingTransactionManager > : transactionManagerMap. ( ) ) entry. getValue ( ). close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String getBar ( long percentage ) { sb = new ( ) ;. append ( percentage ) ;. append ( "% [" ) ; for ( i = ; i < 100 ; i ) { if ( percentage == 100 i < percentage - 1 ) {. append ( "=" ) ; } else if ( i == percentage - 1 ) {. append ( ">" ) ; } else {. append ( " " ) ; } } sb. append ( " ) ; return sb. toString ( ) ; }<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T element, List < T > result ) { Set < T > dependencies = blockedBy get ( element ) ; if ( dependencies ) { ( T dependency dependencies ) resolve ( dependency, result ) ; } blockedBy remove ( element ) ; result. add ( element ) ; } }<CODESPLIT>Resolves an element .
public B camundaOut ( String source, String target ) { CamundaOut param modelInstance newInstance ( CamundaOut ) ; param setCamundSource ( source ) ; param setCamundaTarget ( target ) ; addExtensionElement ( param ) ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
Node createArgumentsReference ( ) { Node result = IR. name (arguments ) ; if (AddingTypes ( ) ) { result setJSType ( argumentsTypeSupplier. ( ) ) ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date toDate ( String dateString ) { Date date = ; DateFormat df = new SimpleDateFormat (yyyy--dd ) ; { date = df. parse ( dateString ) ; } ( ParseException ) { System. out. println ( ex. fillInStackTrace ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public static int cusolverRfSetNumericProperties ( cusolverRfHandle handle double zero double boost ) { checkResult ( cusolverRSetNumericPropertiesNative ( handle zero, boost ) ) ; }<CODESPLIT>CUSOLVERRF set and get numeric properties
public static Object quoteIfString ( Object obj ) obj String? quote ( ( String ) obj ) : obj ; }<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred < Object > deleteUidAsync ( final String type, final String name ) { final UniqueIdType uid_type = UniqueId. stringToUniqueIdType ( type ) ; ( uid_type ) { MET : return metrics deleteAsync ( name ) ; TAGK : return tagnames deleteAsync ( name ) ; TAGV : return tagvalues deleteAsync ( name ) ; default : throw new IllegalArgumentException ( "Unrecognized UID type " + uid_type ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scrollDownList ( int index ) { ( config commandLogging ) Log d ( config commandLoggingTag,scrollDownList(" + index + ) ; } return scroller. scrollList ( waiter. waitForAndGetView ( index, ListView. class ), Scroller. DOWN, false ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void makeAnnotationTypeElementDoc ( MethodSymbol meth, TreePath treePath ) { AnnotationTypeElementDocImpl result = ( AnnotationTypeElementDocImpl ) methodMap ( meth ) ; if ( result ) { if ( treePath ) result setTreePath ( treePath ) ; } { result = AnnotationTypeElementDocImpl ( this, meth, treePath ) ; methodMap put ( meth, result ) ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object call ( String method Object... arguments ) throws PickleException, PyroException, IOException { return internal_call ( method,,,, arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String formatAsPercentage ( int value, int total ) { float average = total? :F value / total ; return PERCENT_FORMATTER. format ( average ) ; }<CODESPLIT>Returns value converted to percentage format .
public static < T Geometry JTSGeometryExpression < T > translate ( Expression < T > expr, float deltax, float deltay ) { return geometryOperation ( expr getType ( ), SpatialOps TRAN, expr, ConstantImpl create ( deltax ), ConstantImpl create ( deltay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static byte [ ] requestWebContent ( String url ) throws TVRageException { { HttpGet httpGet = HttpGet ( url ) ; httpGet addHeader (accept,applicationxml ) ; DigestedResponse response = DigestedResponseReader requestContent ( httpClient, httpGet, CHARSET ) ; if ( response getStatusCode ( ) >= 500 ) throw new TVRageException ( ApiExceptionType. HTTP_503_, url ) ; } if ( response getStatusCode ( ) >= 300 ) { throw new TVRageException ( ApiExceptionType. HTTP__, url ) ; } return response. getContent ( ). getBytes ( DEFAULT_CHARSET ) ; } ( IOException ) { throw new TVRageException ( ApiExceptionType. MAPPING_FAILED, UNABLE_TO_PARSE, url, ex ) ; } }<CODESPLIT>Get content from URL in byte array
private static boolean isNumeric ( String value ) { ( char c value. toCharArray ( ) ) if ( Character isDigit ( c ) ) { return false ; } } return true ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
@ RequestMapping ( method = GET, value = "/foo" ) public Map < String, String > getFoo ( ) { final Map <, >Obj = new HashMap < > ( ) ; fooObj. put (foo,bar ) ; return fooObj ; }<CODESPLIT>Controller to just support pinging .
protected static void fireArrayStartEvent ( JsonConfig jsonConfig ) { if ( jsonConfig isEventTriggeringEnabled ( ) ) { ( Iterator listeners = jsonConfig getJsonEventListeners ( ). iterator ( ) ; listeners. ( ) ; ) JsonEventListener listener = ( JsonEventListener ) listeners next ( ) ; { listener onArrayStart ( ) ; } ( RuntimeException e ) { log warn ( e ) ; } } } }<CODESPLIT>Fires a start of array event .
public static < E extends Exception > Runnable sneaked ( SneakyRunnable < E > runnable ) { return ( ) -> ( ) SneakyRunnable < RuntimeException > castedRunnable = ( SneakyRunnable < RuntimeException > ) runnable ; castedRunnable run ( ) ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( final BandwidthClient client, final String id, final Map < String, Object > params ) throws AppPlatformException, ParseException, IOException, Exception { assert ( client && id ) ; final domainsUri = client getUserResourceInstanceUri ( BandwidthConstants DOMAINSURIPATH, id ) ; final RestResponse response = client post ( domainsUri, params ) ; final JSONObject jsonObject = toJSONObject ( client get ( domainsUri, ) ) ; return new Domain ( client, jsonObject ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream < String > getResourceTypes ( final Event event ) { if ( event org modeshape jcr api observation Event ) { { final org modeshape jcr api observation Event modeEvent = ( org. modeshape. jcr. api. observation. Event ) event ; final Stream. Builder < NodeType > types = Stream. ( ) ; ( final NodeType type : modeEvent. getMixinNodeTypes ( ) ) types. add ( type ) ; } types. add ( modeEvent. getPrimaryNodeType ( ) ) ; return types. build ( ). map ( NodeType :: getName ) ; } ( final RepositoryException e ) { throw new RepositoryRuntimeException ( e ) ; } } return empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void processDefaultHeader ( ParserContext context ) { ( line context. getFileLines ( ) ) if ( hasHeaderSeparator ( line ) ) { ; } processHeaderLine ( line, context getDocumentModel ( ) ) ; } }<CODESPLIT>Process the header of the file .
public Connection getConnection ( String url, String username, String password ) throws SQLException { alive =ConnectionAlive ( ) ; ( alive ) createConnection ( url, username, password ) ; } return connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static final StringBuilder renderPad ( final StringBuilder builder, final int pad, final boolean newLine ) { renderNewLine ( builder, ) ; ( i = ; i < pad ; i ) builder. append ('' ) ; } return builder ; }<CODESPLIT>Render some leading spaces onto a line of html .
public OvhAsyncTaskArray < OvhLine > eligibility_lines_active_POST ( OvhCity city, String contactName, OvhStreet street, String streetNumber ) throws IOException { qPath = "/xdsl/eligibility/lines/active ; StringBuilder = path ( qPath ) ; HashMap <, Object > o = new HashMap < String, Object > ( ) ; ( o,city", city ) ; ( o,contactName", contactName ) ; ( o,street", street ) ; ( o,streetNumber", streetNumber ) ; String resp = exec ( qPath,POST, toString ( ), o ) ; return convertTo ( resp, t5 ) ; }<CODESPLIT>Get the active lines at given address
private static String evaluateExpressionStack ( final Deque < String > operators, final Deque < String > values ) { ( operators ( ) ) values push ( getBooleanResultAsString ( operators pop ( ), values pop ( ), values. pop ( ) ) ) ; } return replaceIntegerStringByBooleanRepresentation ( values. pop ( ) ) ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public int write ( byte [ ] buffer, int offset, int length, boolean isEnd ) throws IOException { result ; long requestExpireTime = _requestExpireTime ; if ( requestExpireTime > && requestExpireTime < CurrentTime currentTime ( ) ) { close ( ) ; throw new ClientDisconnectException ( L. l ( requesttimeout write exp}s", addressRemote ( ), CurrentTime. currentTime ( ) requestExpireTime ) ) ; } synchronized ( _writeLock ) { long now = CurrentTime. getCurrentTimeActual ( ) ; long expires = _socketTimeout + now ; result = writeNative ( _socketFd, buffer, offset, length ) ; } ( result JniStream. TIMEOUTEXN && Current. getCurrent ( ) expires ) ; } if (End ) { closeWrite ( ) ; } return result ; }<CODESPLIT>Writes to the socket .
public void setAmbientLight ( float r, float g, float b ) { ambient =, g, b, 255 } ; normalize ( ambient ) ; gl. glEnable ( GL. GL_LIGHTING ) ; gl. glEnable ( GL2. GL_LIGHT ) ; gl. glLightfv ( GL2. GL_LIGHT, GL2. GL_AMENT, ambient, ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
BigInteger setMultiChoiceCount ( ) { if ( fields null ) for ( int i = ; i < fields length ; i ++ ) multiChoiceCount = multiChoiceCount multiply ( fields i ]. setMultiChoiceCount ( ) ) ; return multiChoiceCount ;<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete ( boolean forceDelete ) throws APIException { HttpResponse response client delete ( getUrl ( ) + "?force + forceDelete ) ; HttpClientHelpersIfNotOk ( response ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void addNameToApplicationMap ( String name ) { appName = getApplicationName ( ) ; if ( appName ) return ; ConcurrentLinkedQueue < String > list = applicationMap. get ( appName ) ; if ( list ) { ConcurrentLinkedQueue < > newList = ConcurrentLinkedQueue < > ( ) ; list = applicationMap. putIfAbsent ( appName, newList ) ; if ( list ) list = newList ; } list. add ( name ) ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static Envelope getTableEnvelope ( Connection connection, TableLocation location, String geometryField ) throws SQLException { if ( geometryField geometryField ( ) ) { List < > geometryFields = getGeometryFields ( connection, location ) ; if ( geometryFields ( ) ) { throw new SQLException ( "The table " + location + " not contain a Geometry field then the extent " + "cannot be computed" ) ; } geometryField = geometryFields get ( ) ; } ResultSet rs = connection ( ). executeQuery (SELECT ST_Extent(" + TableLocation. quoteIdentifier ( geometryField ) + ext FROM + location ) ; if ( rs next ( ) ) { return ( ( Geometry ) rs. getObject ( 1 ) ). getEnvelopeInternal ( ) ; } throw new SQLException ( "Unable to get the table extent may be empty" ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void doListGet ( final Message < JsonObject > message ) { final String name = message. body ( ). getString (name ) ; if ( name null ) { message. reply ( new JsonObject ( ). putString (status,error ). putString (message,No name specified." ) ) ; return ; } final Integer index = message. body ( ). getInteger (index ) ; if ( index null ) { message. reply ( new JsonObject ( ). putString (status,error ). putString (message,No index specified." ) ) ; return ; } context. execute ( new Action < Object > ( ) { public Object perform ( ) { return data. getList ( formatKey ( name ) ). get ( index ) ; } }, new Handler < AsyncResult < Object > > ( ) { public void handle ( AsyncResult < Object > result ) { if ( result failed ( ) ) { message. reply ( new JsonObject ( ). putString (status,error ). putString ( "message, result. cause ( ). getMessage ( ) ) ) ; } else { message. reply ( new JsonObject ( ). putString ( "status, "ok ). putValue ( "result, result. result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static PlotCanvas plot ( String id, double [ ] data ) { Histogram histogram = new Histogram ( data ) ; histogram. setID ( id ) ; double lowerBound = { Math. min ( data ), } ; double upperBound = { Math. max ( data ), } ; double ] ] freq = histogram. getHistogram ( ) ; for ( i = ; i < freq. length ; i ) { if ( freq [ i ] [ 1 ] > upperBound [ 1 ] ) { upperBound 1 = freq i 1 ; } } PlotCanvas canvas = new PlotCanvas ( lowerBound, upperBound ) ; canvas. getAxis ( 0 ). setGridVisible ( false ) ; canvas. add ( histogram ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static Pair < List < Tuple >, List < Tuple > > splitData ( final List < Tuple > trainingData, double proportion ) { if ( proportion < proportion > 1 ) { throw new RuntimeException ( "Proportion should between 00 - 10" ) ; } if ( proportion >.5 ) { proportion = proportion ; } List < Tuple > smallList = new ArrayList < > ( ) ; List < Tuple > largeList = new ArrayList < > ( ) ; smallListSize = ( ). floor ( proportion trainingData. size ( ) ) ; ct = ; Set < Integer > indices = new HashSet < > ( ) ; ( ct smallListSize && trainingData. size ( ) > indices. size ( ) ) index = ( ) (. random ( ) ( trainingData. size ( ) ) ) ; ( indices. contains ( index ) ) index = ( int ) (. random ( ) ( trainingData. size ( ) 1 ) ) ; } indices. add ( index ) ; ; } smallList. addAll ( indices. stream ( ). map ( trainingData :: get ). collect ( Collectors. toList ( ) ) ) ; IntStream. range (, trainingData. size ( ) ). filter ( x -> indices. ( x ) ). forEach ( -> largeList. add ( trainingData. get ( i ) ) ) ; return new ImmutablePair < > ( smallList, largeList ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void getScreenShotABGR ( ByteBuffer bgraBuf, BufferedImage out ) { WritableRaster wr = out. getRaster ( ) ; DataBufferByte db = ( DataBufferByte ) wr. getDataBuffer ( ) ; byte [ ] cpuArray = db. getData ( ) ; bgraBuf. clear ( ) ; bBuf. get ( cpuArray ) ; bgraBuf. clear ( ) ; int width =. getWidth ( ) ; int height =. getHeight ( ) ; for ( = ; < height / 2 ; ) { for ( x = ; x < width ; x ) { int inPtr = ( y * width + x ) * 4 ; int outPtr = ( ( height - y - 1 ) * width + x ) * 4 ; byte b = cpuArray inPtr + ] ; byte g = cpuArray inPtr + 1 ] ; byte r = cpuArray inPtr + 2 ] ; byte a = cpuArray inPtr + 3 ] ; byte b = cpuArray outPtr + ] ; byte g = cpuArray outPtr + 1 ] ; byte r = cpuArray [ outPtr + 2 ] ; byte a = cpuArray [ outPtr + 3 ] ; cpuArray [ outPtr + ] = a ; cpuArray [ outPtr + 1 ] = b ; cpuArray [ outPtr + 2 ] = g ; cpuArray [ outPtr + 3 ] = r ; cpuArray [ inPtr + ] = a ; cpuArray [ inPtr + 1 ] = b ; cpuArray [ inPtr + 2 ] = g ; cpuArray [ inPtr + 3 ] = r ; } } }<CODESPLIT>Good format for java swing .
public Pair < int [ ] [ ] [ ], int [ ] > documentToDataAndLabels ( List < IN > document ) { docSize = document. size ( ) ; ] ] [ ] data = new [ docSize ] [ windowSize ] [ ] ; [ ] labels = new [ docSize ] ; if ( flags. useReverse ) { Collections. reverse ( document ) ; } for ( = ; < docSize ; ) { CRFDatum < List < String >, CRFLabel > d = makeDatum ( document, j, featureFactory ) ; List < List < String > > features = d. asFeatures ( ) ; for ( k =, fSize = features. size ( ) ; k < fSize ; k ) { Collection < String > cliqueFeatures = features. get ( k ) ; data [ j ] [ k ] = new [ cliqueFeatures. size ( ) ] ; m = ; for ( String feature : cliqueFeatures ) { index = featureIndex. indexOf ( feature ) ; if ( index >= 0 ) { data j k m = index ; m ++ ; } else { } } if ( m < data [ j ] [ k ]. length ) { [ ] f = new [ m ] ; System. arraycopy ( data j k,, f,, m ) ; data j k = f ; } } IN wi = document. get ( j ) ; labels [ j ] = classIndex. ( wi. get ( AnswerAnnotation. class ) ) ; } if ( flags. useReverse ) { Collections. reverse ( document ) ; } return new Pair < int [ ] [ ] [ ], int [ ] > ( data, labels ) ; }<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List < Class <? > > locateAll ( final String serviceName ) { if ( serviceName ) { throw new IllegalArgumentException ( "serviceName cannot be null" ) ; } List < Class <? > > classes = ArrayList < Class <? > > ( ) ; if ( factories ) { List < Callable < Class <? > > > l = factories get ( serviceName ) ; if ( l ) { ( Callable < Class < > > c : l ) { classes. add ( c. call ( ) ) ; } ( e ) { } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decodeCString ( ByteBuf buffer ) throws IOException { length = buffer bytesBefore ( BsonConstants STRINGTERMINATION ) ; if ( length < ) throw new IOException ( "string termination not found ) ; String result = buffer toString ( buffer readerIndex ( ), length, StandardCharsets. UTF8 ) ; buffer. skipBytes ( length + 1 ) ; return result ; }<CODESPLIT>default visibility for unit test
public void addCase ( JMFType theCase ) { if ( theCase == null ) throw new NullPointerException ( "Variant case cannot be null" ) ; JSType newCase = ( JSType ) theCase ; if ( cases == null ) cases = new JSType [ 1 ] ; else { JSType oldCases = cases ; cases = JSTypeCases length + 1 ; System. arraycopy ( oldCases,, cases,, oldCases. length ) ; } newCase. parent = this ; newCase. siblingPosition = cases. length - 1 ; casesCase siblingPosition =Case ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarizeState ( ) { buf = new ( ) ; buf. append ( "clipVol ). append ( _clipVol ) ; buf. append ( ", disabled ) ; ii = ; ( SoundType soundType : _disabledTypes ) if ( ii ++ > ) { buf. append ( ", " ) ; } buf. append ( soundType ) ; } return buf. append ( "]" ). toString ( ) ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map < String, String > getCustomMap ( Pattern keyPattern ) { Map <, > map = new HashMap < > ( ) ; ( Iterator < Object > = props. keySet ( ). iterator ( ) ;. ( ) ; ) key = ( String ) it next ( ) ; matcher = keyPattern. matcher ( key ) ; if ( matcher matches ( ) ) { String id = matcher group ( 2 ) ; String propertyValue = props getProperty ( key ) ; map. put ( id, propertyValue ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public static long rawUncompress ( long inputAddr long inputSize long destAddr ) throws IOException { impl rawUncompress ( inputAddr, inputSize, destAddr ) ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( byte [ ] b, int off, int len ) { this checkIncreaseArray ( len ) ; System arraycopy ( b, off, this buffer, this pos, len ) ; this pos len ; }<CODESPLIT>Writes a byte array content into the stream
public final Operation patchHealthCheck ( ProjectGlobalHealthCheckName healthCheck, HealthCheck healthCheckResource, List < String > fieldMask ) { PatchHealthCheckHttpRequest request = PatchHealthCheckHttpRequest newBuilder ( ) setHealthCheck ( healthCheck? : healthCheck toString ( ) ) setHealthCheckResource ( healthCheckResource ) addAllFieldMask ( fieldMask ) build ( ) ; return patchHealthCheck ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initializeNoxItemMargin ( TypedArray attributes ) { float noxItemMarginDefaultValue = getResources ( ) getDimension ( R dimen defaultnoxitemmargin ) ; float noxItemMargin = attributes getDimension ( R. styleable. noxitemmargin, noxItemMarginDefaultValue ) ; noxConfig. setNoxItemMargin ( noxItemMargin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static OperationResult failed ( long index long eventIndex Throwable error ) { return OperationResult ( index, eventIndex, error, ) ; }<CODESPLIT>Returns a failed operation result .
public static InsnList ifIntegersEqual ( InsnList lhs, InsnList rhs, InsnList action ) { Validate notNull ( lhs ) ; Validate notNull ( rhs ) ; Validate notNull ( action ) ; InsnList ret = InsnList ( ) ; LabelNodeEqualLabelNode = LabelNode ( ) ; ret add ( lhs ) ; ret add ( rhs ) ; ret add ( JumpInsnNode ( Opcodes IFICMPNE, notEqualLabelNode ) ) ; ret add ( action ) ; ret add ( notEqualLabelNode ) ; return ret ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static FormatOptions of ( int flags, int width, int precision ) { if ( checkFlagConsistency ( flags, width UNSET ) ) { throw new IllegalArgumentException ( "invalid flags 0x" + Integer. toHexString ( flags ) ) ; } if ( ( width < 1 width > MAXALLOWEDWIDTH ) && width UNSET ) { throw new IllegalArgumentException ( "invalid width " + width ) ; } if ( ( precision < precision > MAXALLOWEDPRE ) && precision UNSET ) { throw new IllegalArgumentException ( "invalid precision: " + precision ) ; } return new FormatOptions ( flags, width, precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void tripleClick ( Coordinates where ) { Point p = getPoint ( where,triple click ) ; exec mouseAction ( p x, p y, 3, OperaMouseKeys. LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initializeNoxItemPlaceholder ( TypedArray attributes ) { Drawable placeholder = attributes getDrawable ( R styleable nox_item_placeholder ) ; if ( placeholder ) { placeholder = getContext ( ) getResources ( ). getDrawable ( R. drawable. ic_nox ) ; } noxConfigPlaceholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void pruneInvalidOptional ( DependencyExplorerOutput output, InvalidKeys invalidKeys ) { DependencyGraph GraphPruner prunedGraph = DependencyGraph GraphPruner ( output getGraph ( ) ) ; ( Key < > key invalidKeys. getInvalidOptionalKeys ( ) ) prunedGraph. remove ( key ) ; output. removeBinding ( key ) ; } output setGraph ( prunedGraph update ( ) ) ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private PersistentResourceXMLDescription getSimpleMapperParser ( ) { if ( version ( Version. VERSION10 ) ) { return simpleMapperParser_1_0 ; } else if ( version. ( Version. VERSION11 ) ) { return simpleMapperParser_1_1 ; } return simpleMapperParser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String getAbsoluteTemplateURI ( String templateName, boolean includeExtension ) { FastStringWriter buf = FastStringWriter ( ) ; tmp = templateName substring (, templateName length ( ) ) ; if ( tmp ( SLASH ) ) { buf. append ( SLASH ) ; i = tmp ( SLASH ) ; buf. append ( tmp. substring (, i ) ) ; buf. append ( SLASH_UNDR ) ; buf. append ( tmp. substring ( i +, tmp. length ( ) ) ) ; } { buf. append ( SLASH_UNDR ) ; buf. append ( templateName. substring (, templateName. length ( ) ) ) ; } if ( includeExtension ) { buf. append ( EXTENSION ) ; } uri = buf toString ( ) ; buf. close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scanResourcePaths ( String startPath ) throws IOException, SAXException { Set < String > dirList = context. getResourcePaths ( startPath ) ; if ( dirList null ) { ( String path : dirList ) if ( path startsWith ( "/WEBINFclasses/" ) ) { } else if ( path startsWith ( "/WEBINFlib/" ) ) { } else if ( path endsWith ( "/" ) ) { scanResourcePaths ( path ) ; } else if ( path startsWith ( "/WEBINFtags/" ) ) { if ( path endsWith ( "/implicit.tld ) ) { parseTld ( path ) ; } } else if ( path endsWith ( TLDEXT ) ) { parseTld ( path ) ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected boolean duringDrag ( SVGPoint startPoint, SVGPoint dragPoint, Event evt, boolean inside ) { ( listener ) return listener duringDrag ( startPoint, dragPoint, evt, inside ) ; } return ; }<CODESPLIT>Method called during drags .
private PGPKeyRingGenerator createKeyRingGenerator ( String userId, String password, int keySize ) { LOGGER. trace (createKeyRingGeneratorString String int ) ;. trace (User ID Password Key Size, userId, password?not set :********, keySize ) ; PGPKeyRingGenerator generator = ; { LOGGER. debug (Creating RSA key pair generator" ) ; RSAKeyPairGenerator generator = new RSAKeyPairGenerator ( ) ; generator init ( new RSAKeyGenerationParameters ( BigInteger valueOf (x100 ), getSecureRandom ( ), keySize, 12 ) ) ; LOGGER. debug (Generating Signing Key Pair" ) ; BcPGPKeyPair signingKeyPair = new BcPGPKeyPair ( PGPPublicKey RSASIGN, generator. generateKeyPair ( ), new Date ( ) ) ; LOGGER. debug (Generating Encyption Key Pair" ) ; BcPGPKeyPair encryptionKeyPair = new BcPGPKeyPair ( PGPPublicKey. RSAENCRYPT, generator. generateKeyPair ( ), new Date ( ) ) ; LOGGER. debug (Generating Signature Key Properties" ) ; PGPSignatureSubpacketGenerator signatureSubpacketGenerator = new PGPSignatureSubpacketGenerator ( ) ; signatureSubpacketGenerator. setKeyFlags (, KeyFlags._DATA | KeyFlags. CERTIFY_ ) ; signatureSubpacketGenerator. setPreferred (, getPreferredEncryption ( ) ) ; signatureSubpacketGenerator. setPreferredHash (, getPreferredHashing ( ) ) ; signatureSubpacketGenerator. setPreferredCompression (, getPreferredCompression ( ) ) ; LOGGER. debug (Generating Encyption Key Properties" ) ; PGPSignatureSubpacketGenerator encryptionSubpacketGenerator = new PGPSignatureSubpacketGenerator ( ) ; encryptionSubpacketGenerator. setKeyFlags (, KeyFlags. ENCRYPT_COMMS | KeyFlags. ENCRYPT_STORAGE ) ; LOGGER. info (Creating PGP Key Ring Generator" ) ; generator = new PGPKeyRingGenerator ( PGPPublicKey. RSASIGN, signingKeyPair, userId, new BcPGPDigestCalculatorProvider ( ). get ( HashAlgorithmTags. SHA ), signatureSubpacketGenerator. generate ( ),, new BcPGPContentSignerBuilder ( PGPPublicKey. RSASIGN, HashAlgorithmTags. SHA256 ), new BcPBESecretKeyEncryptorBuilder ( getEncryptionAlgorithm ( ) ). build ( password. toCharArray ( ) ) ) ; generator. addSubKey ( encryptionKeyPair, encryptionSubpacketGenerator. generate ( ), null ) ; } ( PGPException e ) {. error ( "{}", e. getMessage ( ) ) ; generator = ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date getDateFromString ( final String dateString, final String pattern ) { SimpleDateFormat df = buildDateFormat ( pattern ) ; return df. parse ( dateString ) ; } ( ParseException e ) { new DateException ( String format ( "Could parses with patterns.", dateString, pattern ), e ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public Object remove ( Object key ) { synchronized ( _cacheL2 ) { if ( _cacheL ( key ) _cacheL ( key ) ) { return null ; } Object retval ; Map newMap ; synchronized ( _cacheL1 ) { newMap = HashMapUtils. merge ( _cacheL, _cacheL2 ) ; retval = newMap. remove ( key ) ; } _cacheL = newMap ; _cacheL2. clear ( ) ; _missCount = ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private String getItemType ( Cmdb cmdb ) { String itemType = null ; String subType = cmdb. getConfigurationItem ( ) ; String type = cmdb. getConfigurationItemType ( ) ; String hpsmSettings = hpsmSettings. getApp ( ) ; String hpsmSettingsType = hpsmSettings. getAppType ( ) ; typeCheck = ; subTypeCheck = ; if ( "" ( hpsmSettingsType ) ) { typeCheck = true ; } if ( "" ( hpsmSettingsSubType ) ) { subTypeCheck = true ; } if ( typeCheck && subTypeCheck ) { if ( subType null && subType. ( hpsmSettings. getAppSubType ( ) ) ) { itemType = APPTYPE ; } else if ( subType null && subType. ( hpsmSettings. getCompSubType ( ) ) ) { itemType = COMPONENTTYPE ; } else if ( subType null && subType. ( hpsmSettings. getEnvSubType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } else if ( typeCheck && subTypeCheck ) { if ( type null && type. ( hpsmSettings. getAppType ( ) ) ) { itemType = APPTYPE ; } else if ( type null && type. ( hpsmSettings. getCompType ( ) ) ) { itemType = COMPONENTTYPE ; } else if ( type null && type. ( hpsmSettings. getEnvType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } else { if ( subType null && subType. ( hpsmSettings. getAppSubType ( ) ) && type null && type. ( hpsmSettings. getAppType ( ) ) ) { itemType = APPTYPE ; } else if ( subType null && subType. ( hpsmSettings. getCompSubType ( ) ) && type null && type. ( hpsmSettings. getCompType ( ) ) ) { itemType = COMPONENTTYPE ; } else if ( subType null && subType. ( hpsmSettings. getEnvSubType ( ) ) && type null && type. ( hpsmSettings. getEnvType ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } return itemType ; }<CODESPLIT>Returns the type of the configuration item .
public void readXML ( final List < String > _tags, final Map < String, String > _attributes, final String _text ) throws SAXException, EFapsException { if ( _tags size ( ) 1 ) { final String value = _tags. get ( ) ; if ( "uuid ( value ) ) { this. uuid = _text ; } if ( "fileapplication ( value ) ) { this. fileApplication = _text ; } if ( "definition ( value ) ) { this. definitions. add ( newDefinition ( ) ) ; } } if ( "definition ( _tags get ( ) ) ) { final AbstractDefinition curDef = this. definitions. get ( this. definitions. size ( ) ) ; curDef. readXML ( _tags. subList ( 1, _tags. size ( ) ), _attributes, _text ) ; } else { throw new SAXException ( "Unknown XML Tag: " + _tags + " for: " + this. installFile ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public String getSQLUpdate ( boolean bUseCurrentValues ) { String strRecordset = this. getBaseRecord ( ). makeTableNames ( ) ; KeyArea keyArea = this. getBaseRecord ( ). getKeyArea ( ) ; bUseCurrentKeyValues = bUseCurrentValues? true : keyArea. isNull ( DBConstants. TEMPKEYAREA, true ) ;QueryRecord = this. getBaseRecord ( ). isQueryRecord ( ) ; String sFilter = keyArea. addSelectParams ( "=", DBConstants. TEMPKEYAREA,,QueryRecord, bUseCurrentKeyValues,, true, true ) ; if ( sFilter length ( ) > ) sFilter = " WHERE " + sFilter ; String strSetValues = this. getBaseRecord ( ). getSQLFields ( DBConstants. SQLUPDATE_TYPE, bUseCurrentValues ) ; if ( strSetValues length ( ) ) return ; strRecordset =UPDATE + strRecordset + SET + strSetValues + sFilter ; return strRecordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object... objects ) { ( Object mock objects ) if ( mock Class <? ) { verifyClass ( ( Class <? > ) mock ) ; } { EasyMockMethodInvocationControl invocationControl = ( EasyMockMethodInvocationControl ) MockRepository. getInstanceMethodInvocationControl ( mock ) ; if ( invocationControl ) { invocationControl. verify ( ) ; } { if ( isNiceReplayAndVerifyMode ( )EasyMocked ( mock ) ) { } { { org. easymock. EasyMock. verify ( mock ) ; } ( RuntimeException e ) { throw new RuntimeException ( mock + " not a mock object", e ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void mapTileRequestFailed ( final MapTileRequestState pState ) { if ( mTileNotFoundImage ) { putTileIntoCache ( pState getMapTile ( ), mTileNotFoundImage, ExpirableBitmapDrawable NOT_FOUND ) ; ( final Handler handler mTileRequestCompleteHandlers ) if ( handler ) { handler sendEmptyMessage ( MAPTILE_SUCCESS_ID ) ; } } } { ( final Handler handler mTileRequestCompleteHandlers ) if ( handler ) { handler. sendEmptyMessage ( MAPTILE_FAIL_ID ) ; } } } if ( Configuration getInstance ( ) isDebugTileProviders ( ) ) { Log. d ( IMapView.TAG, "MapTileProviderBasemapTileRequestFailed(): " + MapTileIndex. toString ( pState. getMapTile ( ) ) ) ; } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validateFactoryAndClass ( FieldDefinition fd, int factoryId, int classId, String fullPath ) { if ( factoryId fd getFactoryId ( ) ) { throw new IllegalArgumentException ( "Invalid factoryId! " + fd. getFactoryId ( ) + Current " + factoryId + " in path " + fullPath ) ; } if ( classId fd getClassId ( ) ) { throw new IllegalArgumentException ( "Invalid classId! " + fd. getClassId ( ) + Current " + classId + " in path " + fullPath ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static String getLabelFor ( InputComponent <?,? > input, boolean addColon ) { label = input getLabel ( ) ; if ( label ) { label = input. getName ( ) ; } if ( add && label endsWith ( COLON ) ) { label += COLON ; } return label ; }<CODESPLIT>Returns the label for this component
protected final View inflatePlaceholderView ( final View convertView, final int height ) { View view = convertView ; ( ( view PlaceholderView ) ) view = PlaceholderView ( getContext ( ) ) ; } view setMinimumHeight ( height ) ; return view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stopService ( ) throws Exception { Log. info ( c,stopService,Stopping LdapServer ) ; this. server. stop ( ) ; Log. info ( c,stopService",Stopping DirectoryService" ) ; service. shutdown ( ) ; Log. info ( c,stopService",Ldap stopped." ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void setCacheMinutes ( int iMinutes ) { if ( iMinutes 1 ) iMinutes = DEFAULTCACHEDMIN ; cacheMinutes =Minutes ; if ( iMinutes ) { if ( timerCache null ) { timerCache. cancel ( ) ; timerCache = ; this. stopCache ( ) ; } } { if ( timerCache null ) { timerCache. cancel ( ) ; } this. startCache ( ) ; timerTask = new DBTimerTask ( ) ; timerCache = new java. util. Timer ( ) ; timerCache. schedule ( timerTask, cacheMinutes 60 1000 ) ; } }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagateOnEnter ( GVRPickedObject hit ) { GVRSceneObject hitObject = hit. getHitObject ( ) ; GVREventManager eventManager = getGVRContext ( ). getEventManager ( ) ; if ( mEventOptions contains ( EventOptions SENDTOUCHEVENTS ) ) { if ( mEventOptions contains ( EventOptions SENDTOLISTENERS ) ) { eventManager. sendEvent ( this, ITouchEvents. class, "onEnter", hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOHITOBJECT ) ) { eventManager. sendEvent ( hitObject, ITouchEvents. class, "onEnter", hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOSCENE ) && ( mScene ) ) { eventManager. sendEvent ( mScene, ITouchEvents. class, "onEnter", hitObject, hit ) ; } } if ( mEventOptions contains ( EventOptions SENDPICKEVENTS ) ) { if ( mEventOptions contains ( EventOptions SENDTOLISTENERS ) ) { eventManager. sendEvent ( this, IPickEvents. class, "onEnter", hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOHITOBJECT ) ) { eventManager. sendEvent ( hitObject, IPickEvents. class, "onEnter", hitObject, hit ) ; } if ( mEventOptions contains ( EventOptions SENDTOSCENE ) && ( mScene ) ) { eventManager. sendEvent ( mScene, IPickEvents. class, "onEnter", hitObject, hit ) ; } } }<CODESPLIT>Propagate onEnter events to listeners
public java. util. concurrent. Future GetSendQuotaResult getSendQuotaAsync ( com. amazonaws. handlers. AsyncHandler GetSendQuotaRequest GetSendQuotaResult asyncHandler ) { getSendQuotaAsync ( GetSendQuotaRequest ( ), asyncHandler ) ; }<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short shortValue ( ) throws OtpErlangRangeException { l = longValue ( ) ; short i = ( short ) l ; if ( l ) throw new OtpErlangRangeException ( "Value too large for short " + val ) ; } return i ; }<CODESPLIT>Get this number as a short .
private MjdbcSQLException translateSQLStatePrefix ( String reason, String SQLState, int vendorCode, SQLException cause ) { MjdbcSQLException result = null ; String sqlState = getSqlState ( cause ) ; String sqlStatePrefix = null ; if ( sqlState null && sqlState. length ( ) >= 2 ) { sqlStatePrefix = sqlState. substring (, 2 ) ; if ( SpringExceptionHandler. SQLSTATEPREFIXBADSQLGRAMMAR. contains ( sqlStatePrefix ) == true ) { result = new BadSqlGrammarException ( reason, SQLState, vendorCode ) ; } else if ( SpringExceptionHandler. SQLSTATEPREFIXDATAINTEGRITYVIOLATION. contains ( sqlStatePrefix ) == true ) { result = new DataIntegrity ( reason, SQLState, vendorCode ) ; } else if ( SpringExceptionHandler. SQLSTATEPREFIXDATAACCESSRESOURCEFAILURE. contains ( sqlStatePrefix ) == true ) { result = new DataAccessResourceFailureException ( reason, SQLState, vendorCode ) ; } else if ( SpringExceptionHandler. SQLSTATEPREFIXTRANSIENTDATAACCESSRESOURCEEXCEPTION. contains ( sqlStatePrefix ) == true ) { result = new TransientDataAccessResourceException ( reason, SQLState, vendorCode ) ; } else if ( SpringExceptionHandler. SQLSTATE_PREFIX_CONCUR_FAILURE. contains ( sqlStatePrefix ) == true ) { result = new ConcurrencyFailureException ( reason, SQLState, vendorCode ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean matches ( String name ) { if ( name ) { return pattern. equals ( "" ) ; } if ( all ) { return all. equals ( name ) ; } if ( middle ) { return name. contains ( middle ) ; } if ( start null && name startsWith ( start ) ) { return false ; } return end == null || name. endsWith ( end ) ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get ( nitro_service service, String selectorname ) throws Exception { nslimitselector obj nslimitselector ( ) ; obj_selectorname ( selectorname ) ; nslimitselector response ( nslimitselector ) obj_resource ( service ) ; return response ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int solveQuad ( double [ ] eqn, double [ ] res ) { double a = eq 2 ; double b = eq 1 ; double c = eq ; int rc = ; if ( a == 0f ) { if ( b == 0f ) { return - 1 ; } res rc ++ = - c / b ; } else { double d = b * b - 4f * a * c ; if ( d < 0f ) { return 0 ; } d = Math. sqrt ( d ) ; res rc ] = ( - b + d ) / ( a * 2f ) ; if ( d 0f ) { res rc ] = ( - b - d ) / ( a * 2f ) ; } } return fixRoots ( res, rc ) ; }<CODESPLIT>Solves quadratic equation
public Set < Term > getAllTerms ( ) { final Set < Term > ret = HashSet < Term > ( ) ; ( final StatementGroup sg statementGroups ) ( final Statement stmt sg. getAllStatements ( ) ) ret. addAll ( stmt. getAllTerms ( ) ) ; } } return ret ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void cancelCopy ( CopyOperationImpl op ) throws SQLException { if ( hasLock ( op ) ) { throw new PSQLException ( GT. tr ( "Tried to cancel an inactive copy operation" ), PSQLState. OBJECT__IN_STATE ) ; } SQLException error = ; errors = ; { if ( op CopyIn ) { synchronized ( this ) { LOGGER. log ( Level. FINEST,FE => CopyFail ) ; final byte msg = Utils encodeUTF8 (Copy cancel requested ) ; pgStream. sendChar ( 'f ) ; pgStream. sendInteger4 ( 5 + msg. length ) ; pgStream. send ( msg ) ; pgStream. sendChar ( ) ; pgStream. flush ( ) ; { processCopyResults ( op, true ) ; } ( SQLException ) { errors ; if ( error ) { SQLException e = se ; SQLException next ; ( ( next e. getNextException ( ) ) ) e = next ; } e. setNextException ( error ) ; } error = se ; } } (Lock ( op ) ) ; } } if ( op CopyOut ) { sendQueryCancel ( ) ; } } ( IOException ioe ) { throw new PSQLException ( GT. tr ( "Database connection failed when canceling copy operation" ), PSQLState. CONNECTION_, ioe ) ; } { synchronized ( this ) { if ( hasLock ( op ) ) { unlock ( op ) ; } } } if ( op CopyIn ) { if ( errors < ) { throw new PSQLException ( GT. tr ( "Missing expected error response to copy cancel request" ), PSQLState. COMMUNIC_ ) ; } if ( errors > ) { throw new PSQLException ( GT. tr ( "Got {} error responses to single copy cancel request, String. valueOf ( errors ) ), PSQLState. COMMUNICATION_ERROR, error ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public com. google. api. ads. adwords. axis. v201809. o. AttributeType getRequestedAttributeTypes ( ) requestedAttributeTypes ; }<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void setRange ( Annotation v ) { if ( OntRelationMentionType featOkTst ( ( OntRelationMentionType ) jcasType ) casFeatrange ) jcasType jcas throwFeatMissing ( "range, "de.julielab.jules.types.OntRelationMention ) ; jcasType. ll_cas. ll_setRefValue ( addr, ( ( OntRelationMention_Type ) jcasType ). casFeatCode_range, jcasType. ll_cas. ll_getFSRef ( v ) ) ; }<CODESPLIT>setter for range - sets
public List < com. ibm. wsspi. security. wim. model. RolePlayer > getRelatedRolePlayer ( ) { if ( relatedRolePlayer ) { relatedRolePlayer = new ArrayList < com ibm wsspi security wim model RolePlayer > ( ) ; } return this. relatedRolePlayer ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JCExpression getUnderlyingBinding ( Unifier unifier ) { return ( unifier == )? : unifier getBinding ( UFreeIdent Key ( identifier ( ) ) ) ; }<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clearCache ( ) { entityCache clearCache ( CommercePriceEntryImpl class ) ; finderCache clearCache ( FINDER_CLASS_NAME_ENTITY ) ; finderCache clearCache ( FINDER_CLASS_NAME_LIST_WITH_INATION ) ; finderCache clearCache ( FINDER_CLASS_NAME_LIST_WITHOUT_INATION ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int computeCapacity ( int initial ) { if ( initial < MINIMUMCAPACITY ) { return MINIMUM_CAPACITY ; } if ( initial > MAXIMUMCAPACITY ) { return MAXIMUM_CAPACITY ; } capacity = ; ( capacity initial ) capacity <<= 1 ; } return capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public V get ( K k, long timeout, TimeUnit unit ) throws, TimeoutException { await ( k timeout unit ) ; return cache get ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void setupClasspath ( final Path distributedClassPath, final Path intermediateClassPath, final Job job ) throws IOException { String classpathProperty = System getProperty (druidhadoopinternalclasspath ) ; if ( classpathProperty ) { classpathProperty = System. getProperty (javaclasspath" ) ; } String jarFiles = classpathProperty. split ( File. pathSeparator ) ; final Configuration conf = job. getConfiguration ( ) ; final FileSystem fs = distributedClassPath. getFileSystem ( conf ) ; if ( fs LocalFileSystem ) { return ; } ( String jarFilePath : jarFiles ) final File jarFile = new File ( jarFilePath ) ; if ( jarFile getName ( ) endsWith ( ".jar ) ) { { RetryUtils. retry ( ( ) -> if (Snapshot ( jarFile ) ) { addSnapshotJarToClassPath ( jarFile, intermediateClassPath, fs, job ) ; } { addJarToClassPath ( jarFile, distributedClassPath, intermediateClassPath, fs, job ) ; } return true ; }, shouldRetryPredicate ( ), NUM_RETRIES ) ; } ( e ) { throw new RuntimeException ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void eval ( String javascript ) throws WidgetException { WebElement element = findElement ( false ) ; WebDriver wd = getGUIDriver ( ). getWrappedDriver ( ) ; { ( ( JavascriptExecutor ) wd ). executeScript ( javascript, element ) ; } ( e ) { long time = System. currentTimeMillis ( ) + 2000 ; success = ; ( && System. currentTimeMillis ( ) time ) try { ( ( JavascriptExecutor ) wd ). executeScript ( javascript, element ) ; success = true ; } ( e ) { try { Thread. sleep ( 500 ) ; } ( InterruptedException e ) { } e = e ; } } if ( success ) { throw new RuntimeException ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public long addWrapField ( long instant int amount ) { return set ( instant, FieldUtils getWrappedValue ( get ( instant ), amount,, iDivisor ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected synchronized SendRequest makeUnsignedChannelContract ( Coin valueToMe ) { Transaction tx = Transaction ( wallet getParams ( ) ) ; if ( getTotalValue ( ) subtract ( valueToMe ) ( Coin ZERO ) ) { tx addOutput ( getTotalValue ( ) subtract ( valueToMe ), LegacyAddress fromKey ( wallet. getParams ( ), getClientKey ( ) ) ) ; } tx. addInput ( contract. getOutput ( ) ) ; return SendRequest. forTx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static String getUserNameFromToken ( String authToken ) { ( authToken ) return null ; } return authToken. split ( TOKEN_SEPARATOR ) [ 0 ] ; }<CODESPLIT>Extracts the user name from token .
protected Class <? > resolveProxyClass ( String [ ] interfaceNames ) throws ClassNotFoundException { ClassLoader proxyClassLoader = classLoader ; Class <? > interfaces = new Class interfaceNames. length ; Class <? > nonPublicInterface = null ; ( i = ; i < interfaceNames. ; i ) { Class <? > intf = loadClass ( interfaceNames i ) ; if ( Modifier isPublic ( intf getModifiers ( ) ) ) { ClassLoader classLoader = getClassLoader ( intf ) ; if ( nonPublicInterface null ) { if ( classLoader proxyClassLoader ) { throw new IllegalAccessError ( nonPublicInterface + " and " + intf + " both declared non-public in different class loaders" ) ; } } else { nonPublicInterface = intf ; proxyClassLoader = classLoader ; } } interfaces = intf ; } { return Proxy. getProxyClass ( proxyClassLoader, interfaces ) ; } ( IllegalArgumentException ex ) { throw new ClassNotFoundException ( null, ex ) ; } }<CODESPLIT>Delegates class loading to the specified class loader .
public static double [ ] rowSums ( double [ ] [ ] data ) { double [ ] x = new double [ data. length ] ; for ( i = ; i < x. length ; i ) { x i = sum ( data i ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int newCapacity ) { oldCapacity = table. length ; long oldTable ] = table ; oldValues ] = values ; byte oldState = state ; long newTable ] = new long newCapacity ] ; newValues ] = new newCapacity ] ; byte newState ] = new byte [ newCapacity ] ; this. lowWaterMark = chooseLowWaterMark ( newCapacity, this. minLoadFactor ) ; this. highWaterMark = chooseHighWaterMark ( newCapacity, this. maxLoadFactor ) ; this. table = newTable ; this. values = newValues ; this. state = newState ; this. freeEntries = newCapacity - this. distinct ; for ( i = oldCapacity ; i -- > ; ) { if ( oldState [ i ] == FULL ) { long element = oldTable [ i ] ; index = indexOfInsertion ( element ) ; newTable [ index ] = element ; newValues index = oldValues i ; newState index = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( HpackHeaderField header ) { headerSize = header. size ( ) ; if ( headerSize > capacity ) { clear ( ) ; return ; } ( capacity size headerSize ) remove ( ) ; } hpackHeaderFields head ++ = header ; size += header. size ( ) ; if ( head hpackHeaderFields. length ) { head = ; } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction initial ) { ( final LauncherListener listener listenersLauncher ) listener. notifyFired ( ) ; } ( final LaunchableConfig launchableConfig launchables ) final Media media = Medias create ( launchableConfig getMedia ( ) ) ; final Featurable featurable = factory create ( media ) ; { final Launchable launchable = featurable getFeature ( Launchable class ) ; if ( launchableConfig getDelay ( ) > ) { delayed add ( DelayedLaunch ( launchableConfig, initial, featurable, launchable ) ) ; } { launch ( launchableConfig, initial, featurable, launchable ) ; } } ( final LionEngine exception ) { featurable. getFeature ( Identifiable. class ). destroy ( ) ; throw exception ; } } }<CODESPLIT>Called when fire is performed .
public static void init ( InvocationManager invmgr, RootDObjectManager omgr ) { _invmgr = invmgr ; _omgr = omgr ; invmgr registerProvider ( TimeBaseProvider ( ) TimeBaseMarshaller class GLOBALGROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static UfsJournalFile createLogFile ( URI location long start long end ) { return UfsJournalFile ( location, start, end, ) ; }<CODESPLIT>Creates a journal log file .
protected Object writeReplace ( ) throws java. io. ObjectStreamException { { return new CertificateRep ( type, getEncoded ( ) ) ; } ( CertificateException e ) { throw new java.. NotSerializableException ( "javasecuritycertCertificate " + type + " + e. getMessage ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extractThrowable ( final Object [ ] arguments ) { return arguments length ==? null : extractThrowable ( arguments arguments length - 1 ] ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static List < Map < IBond, IBond > > makeBondMapsOfAtomMaps ( IAtomContainer ac1, IAtomContainer ac2, List < Map < IAtom, IAtom > > mappings ) { List < Map < IBond IBond > > bondMaps = < Map < IBond IBond > > ( ) ; ( Map < IAtom IAtom > mapping mappings ) bondMaps add ( makeBondMapOfAtomMap ( ac, ac, mapping ) ) ; } return bondMaps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public LongConstant addLong ( long value ) { LongConstant entry = getLongByValue ( value ) ; ( entry ) return entry ; entry = LongConstant ( this _entries size ( ) value ) ; addConstant ( entry ) ; addConstant ( null ) ; return entry ; }<CODESPLIT>Adds a long constant .
public GeoPackage getOrOpen ( String name File file ) { getOrOpen ( name, file, ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extractVersionFromSchemaName ( String clz_name ) { idx = clz_name. ( 'V ) ; if ( idx 1 ) return 1 ; { return Integer. valueOf ( clz_name. substring ( idx + 1 ) ) ; } ( NumberFormatException ex ) { return - 1 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void drawShape ( Canvas canvas, Paint paint, Path path, ShapeAppearanceModel shapeAppearanceModel, RectF bounds ) { if ( shapeAppearanceModelRoundRect ( ) ) cornerSize = shapeAppearanceModel getTopCorner ( ) getCornerSize ( ) ; canvas drawRoundRect ( bounds, cornerSize, cornerSize, paint ) ; } { canvas drawPath ( path, paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public AnalyzerJob getAnalyzerJob ( final String descriptorName, final String analyzerName, final String analyzerInputName ) { List < AnalyzerJob > candidates = < > ( _jobs ) ; candidates = CollectionUtilsCandidates ( candidates, o -> final actualDescriptorName = o getDescriptor ( ) getDisplayName ( ) ; return descriptorName. equals ( actualDescriptorName ) ; } ) ; if ( analyzerName ) { candidates = CollectionUtils refineCandidates ( candidates, o -> final actualAnalyzerName = o getName ( ) ; return analyzerName. equals ( actualAnalyzerName ) ; } ) ; } if ( analyzerInputName ) { candidates = CollectionUtils refineCandidates ( candidates, o -> final InputColumn <? > inputColumn = getIdentifyingInputColumn ( o ) ; if ( inputColumn ) { return false ; } return analyzerInputName. equals ( inputColumn. getName ( ) ) ; } ) ; } if ( candidates isEmpty ( ) ) { logger. error ( "No more AnalyzerJob candidates to choose from" ) ; return null ; } if ( candidates size ( ) > ) { logger. warn ( "Multiple AnalyzerJob candidates to choose from picking first" ) ; } return candidates. iterator ( ). next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public boolean removeExecutedTradeCallback ( final BitfinexExecutedTradeSymbol tradeSymbol final BiConsumer < BitfinexExecutedTradeSymbol BitfinexExecutedTrade callback ) throws BitfinexClientException { traCallbacks removeCallback ( tradeSymbol, callback ) ; }<CODESPLIT>Remove a executed trade callback
public HealthDto doPrimaryHealthCheck ( ) { List < HealthDependency > primaryHealthDependencies = healthDependencies values ( ) stream ( ) filter ( HealthDependency :: isPrimary ) collect ( Collectors ( ) ) ; return checkHealth ( primaryHealthDependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitro_service service ) throws Exception { appfwxmlerrorpage obj appfwxmlerrorpage ( ) ; appfwxmlerrorpage ] response ( appfwxmlerrorpage ] ) obj_resources ( service ) ; return response [ 0 ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void setupClient ( final AbstractHttpClient client ) { this. client. addResponseInterceptor ( new HttpResponseInterceptor ( ) { public void process ( final HttpResponse response, final HttpContext context ) throws HttpException, IOException { Header header = response getFirstHeader (Location ) ; if ( header ) context setAttribute (Location, header getValue ( ) ) ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quickSelect ( List < P > points, int splitAxis, int medianNum ) { numPoints = points. size ( ) ; if ( tmp length < numPoints ) { tmp = new double numPoints ; indexes = new numPoints ; } ( i = ; i < numPoints ; i ) tmp [ i ] = distance. valueAt ( points. get ( i ), splitAxis ) ; } QuickSelect. selectIndex ( tmp, medianNum, numPoints, indexes ) ; }<CODESPLIT>Uses quick - select to find the median value
public void writeHtml ( JspWriter pOut, String pHtml ) throws IOException { StringTokenizer parser = new StringTokenizer ( pHtml, "<>&, true ) ; ( parser. ( ) ) String token = parser. ( ) ; if ( token ( "<" ) ) { pOut. print ( "&lt ) ; } else if ( token ( ">" ) ) { pOut. print ( "&gt ) ; } else if ( token. ( "&" ) ) { pOut. print ( "&amp ) ; } else { pOut. print ( token ) ; } } }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected String getNodeName ( Node node ) { node getLocalName ( ) ; return result == null? node. getNodeName ( ) : result ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void setExpiryDate ( IntRange ( from =, to = 12 ) int month, @ IntRange ( from =, to = 9999 ) int year ) { mExpiryDateEditText setText ( Date createDateStringIntegerInput ( month, year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected void writeApplyDdl ( DdlWrite write ) { scriptInfo setApplyDdl ( "-- drop dependenciesn + write applyDropDependencies ( ) getBuffer ( ) +n + "-- apply changesn + write apply ( ). getBuffer ( ) + write. applyForeignKeys ( ). getBuffer ( ) + write. applyHistoryView ( ). getBuffer ( ) + write. applyHistoryTrigger ( ). getBuffer ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static final boolean classEquals ( Class clz1, Class clz2 ) { if ( clz clz ) { throw new NullPointerException ( ) ; } return clz1 == clz2 || clz1. getName ( ). equals ( clz2. getName ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void addSharedFunction ( ISource source ) { fileName source FileSource? ( ( FileSource ) source ) getFileName ( ) : ; doAddSharedFunction ( source, fileName ) ; }<CODESPLIT>Add shared function by ISource
public void setCommercePriceListService ( com. liferay. commerce. price. list. service. CommercePriceListService commercePriceListService ) commercePriceListService commercePriceListService ; }<CODESPLIT>Sets the commerce price list remote service .
public static HtmlTree MAIN ( ) { HtmlTree htmltree = HtmlTree ( HtmlTag MAIN ) ; htmltree setRole ( Role MAIN ) ; return htmltree ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabel_stats get ( nitro_service service, String labelname ) throws Exception { cachepolicylabelstats obj = cachepolicylabelstats ( ) ; obj_labelname ( labelname ) ; cachepolicylabelstats response = ( cachepolicylabel_stats ) obj stat_resource ( service ) ; return response ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void saveBroker ( File mapfile, HashMapIDBroker broker ) throws RuntimeException { if ( broker isModified ( ) ) { return ; } { = ( FileWriter ( mapfile ) ) ; broker. writeTo ( bout ) ; bout. close ( ) ; } ( IOException ioe ) { throw new RuntimeException ( "Unable to store component ID map [mapfile=" + mapfile +, ioe ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( final Collection < T values ) throws DataAccessException { jdbcTemplate. execute ( new ConnectionCallback < Object ( ) { Object doInConnection ( Connection connection ) throws SQLException DataAccessException { crud update ( connection values ) ; return ; } } ) ; }<CODESPLIT>update the objects .
public static MutableInt fromExternal ( final IntSupplier s, final IntConsumer c ) { return MutableInt ( ) int getAsInt ( ) { return s getAsInt ( ) ; } Integer get ( ) { return getAsInt ( ) ; } MutableInt set ( final int value ) { accept ( value ) ; return this ; } } ; }<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) { LOGGER debug (Reloading configuration." ) ; this configWriteLock. lock ( ) ; { this config = config ; processAppPackages ( config ) ; } { this. configWriteLock. unlock ( ) ; } }<CODESPLIT>Replace the configuration of this instance directly .
protected void addPropertiesStart ( String type ) { putProperty ( PropertyKey Host name ( ), IpUtils getHostName ( ) ) ; putProperty ( PropertyKey Type name ( ), type ) ; putProperty ( PropertyKey Status name ( ), Status. Start. name ( ) ) ; }<CODESPLIT>Add properties to properties map on transaction start
public List < SequenceListType. Sequence > getSequence ( ) { if ( sequence ) { sequence = ArrayList < SequenceListType Sequence > ( ) ; } return this. sequence ; }<CODESPLIT>Gets the value of the sequence property .
public MapBuilder addNumber ( String fieldName, boolean include, Supplier < Number > supplier ) { if ( include ) Number value = supplier ( ) ; if ( value ) { map put ( getFieldName ( fieldName ), value ) ; } } return this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnectCardOneConsumer ( ) { if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. entry ( tc, "disconnectCardOneConsumer" ) ; Object [ ] clonedConsumerPoints = null ; synchronized ( consumerPoints ) { clonedConsumerPoints = consumerPoints. toArray ( ) ; } SILimit e = new SILimit (. ( "CONSUMERCARDINALITY_LIMIT_REACHED_", new Object [ ] { getDestName ( ), getLocalisationUuid ( ). toString ( ) }, null ) ) ;. ( e, "comibmwssibprocessorimplRemoteConsumerDispatcherdisconnectCardOneConsumer", "1451221", this ) ; SibTr. exception ( tc, e ) ; for ( i = ; i < clonedConsumerPoints. length ; i ) { DispatchableKey ck = ( DispatchableKey ) clonedConsumerPoints [ i ] ; ck. notifyConsumerPointAboutException ( e ) ; } if ( TraceComponent. isAnyTracingEnabled ( ) && tc. isEntryEnabled ( ) ) SibTr. exit ( tc, "disconnectCardOneConsumer" ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean isAdministrator ( AuthContext ctx ) { return ctx getUsername ( )!= null && ctx getUsername ( ) equals ( adminName ) && ctx getPassword ( )!= null && ctx getPassword ( ) equals ( adminPass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { if ( settings autostart ( ) ) { = settings. getRunner ( ) ; logger. config ( "Using runner " + runner. getClass ( ). getSimpleName ( ) ) ; } { settings. setPort ( OperaDefaults. SERVER_DEFAULT_PORT_IDENTIFIER ) ; } createScopeServices ( ) ; if ( runner ) { runner. startOpera ( ) ; } services. init ( ) ; debugger = services. getDebugger ( ) ; debugger. setDriver ( this ) ; windowManager = services. getWindowManager ( ) ; exec = services. getExec ( ) ; core = services. getCore ( ) ; cookieManager = services. getCookieManager ( ) ; mouse = OperaMouse ( this ) ; keyboard = OperaKeyboard ( this ) ; services getConsoleLogger ( ) onConsoleMessage ( ConsoleMessageConverter ( logs ) ) ; settings. setProduct ( ( ). getProduct ( ) ) ; if ( utils ( ) getUserAgent ( ) contains ( "Mini ) ) { preferences = OperaScopePreferences ( services getPrefs ( ) ) ; preferences ( ). set (User Prefs,Ignore Un Pop, ) ; if ( utils ( ) getProduct ( ) ( M ) ) { preferences ( ). set (User Prefs,Allow Autofocus Form Element, true ) ; } } proxy = OperaProxy ( this ) ; proxy. parse ( settings. getProxy ( ) ) ; }<CODESPLIT>Initialize required Scope services .
public static String calculateMD5 ( String string ) { byte hash ; { hash = MessageDigest. getInstance ( "MD5" ). digest ( string. getBytes ( "UTF-8" ) ) ; } ( NoSuchAlgorithmException e ) { throw new RuntimeException ( "Huh MD5 should be supported?", e ) ; } ( UnsupportedEncodingException e ) { throw new RuntimeException ( "Huh, UTF-8 should be supported?", e ) ; } hex = new ( hash. length 2 ) ; ( byte b : hash ) i = ( b &xFF ) ; if ( i <x10 ) hex append (') ; hex. append ( Integer. toHexString ( i ) ) ; } return hex. toString ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File findRawDir ( File dir ) { ( i = ; dir!= null && i < 20 ; i ) File rawDir = findResRawDir ( dir ) ; if ( rawDir ) { return rawDir ; } dir = dir. getParentFile ( ) ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public Object resolveVariable ( String pName ) throws ELException { ELContext ctx thisELContext ( ) ; return ctx getELResolver ( ) getValue ( ctx, null, pName ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected DependantValue createPrimaryKeyValue ( InFlightMetadataCollector mappings, PersistentProperty property, Collection collection, Map <?,? > persistentClasses ) { KeyValue keyValue ; DependantValue key ; propertyRef = collection getReferencedPropertyName ( ) ; if ( propertyRef ) { keyValue = collection. getOwner ( ). getIdentifier ( ) ; } { keyValue = ( KeyValue ) collection. getOwner ( ). getProperty ( propertyRef ). getValue ( ) ; } if ( ( ) ) debug ( "[GrailsDomainBinder creating dependant key value to table [" + keyValue getTable ( ) getName ( ) + "]" ) ; key = DependantValue ( metadataBuildingContext, collection getCollectionTable ( ), keyValue ) ; key setTypeName ( null ) ; key setNullable ( true ) ; key setUpdateable ( ) ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected AVariableExp getVarExp ( ILexNameToken name, PDefinition vardef, PType type ) { AVariableExp getVarExp ( name var ) ; var setType ( type ) ; return var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean isNullOrWhiteSpace ( String arg ) { if ( Strings isNullOrEmpty ( arg ) arg trim ( ) isEmpty ( ) ) { return true ; } return false ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public BlockInfo queryBlockByNumber ( long blockNumber ) throws InvalidArgumentException ProposalException { queryBlockByNumber ( getShuffledPeers ( EnumSet of ( PeerRole LEDGERQUERY ) ), blockNumber ) ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
 (" ) public static Getter getGetter ( Class type, String name ) { return getGettersAsMap ( type ). get ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static String decodeLZToString ( byte [ ] data, String dictionary ) { return new String ( decodeLZ ( data ), "UTF-8" ) ; } ( UnsupportedEncodingException ) new RuntimeException ( e ) ; } }<CODESPLIT>Decode lz to string string .
public static AirlineFlightUpdateTemplateBuilder addAirlineFlightUpdateTemplate ( String introMessage String locale String pnrNumber UpdateType updateType ) { AirlineFlightUpdateTemplateBuilder ( introMessage locale, pnrNumber, updateType ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void addModulesArgument ( final String argument, final List < String > arguments, final Module [ ] modules, final String aditionalpath, final String role ) throws MojoExecutionException { buf = new ( ) ; if ( null adpath ) { arguments. add ( argument ) ; buf. append ( aditionalpath ) ; } if ( modules null && modules length > ) { if ( arguments contains ( argument ) ) { arguments. add ( argument ) ; } ( i = ; i < modules. length ; i ) { Module module = modules i ; Artifact artifact = null ; SuppressWarnings ( ) Set < Artifact > allArtifacts = project. getArtifacts ( ) ; ( Artifact art : allArtifacts ) { if ( art getGroupId ( ) ( module getGroupId ( ) ) && art getArtifactId ( ) ( module getArtifactId ( ) ) && StringUtils defaultString ( module getClassifier ( ) ) ( StringUtils defaultString ( art. getClassifier ( ) ) ) && StringUtils. defaultString ( module. getType ( ), "jar" ). ( StringUtils. defaultString ( art. getType ( ) ) ) ) { artifact = art ; ; } } if ( artifact null ) { throw new MojoExecutionException ( "The artifact " + module. toString ( ) + " referenced in aspectj plugin as " + role + ", is not found the project dependencies" ) ; } if ( buf. length ( ) ) { buf. append ( File. pathSeparatorChar ) ; } buf. append ( artifact. getFile ( ). getPath ( ) ) ; } } if ( buf. length ( ) > ) { String pathString = buf. toString ( ) ; arguments. add ( pathString ) ; getLog ( ). debug ( "Adding " + argument + " + pathString ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extractAeroGearSenderInformation ( final HttpServletRequest request ) { client = request getHeader (aerogearsender ) ; if ( hasValue ( client ) ) return client ; } return request. getHeader ( "user-agent" ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux < ServiceMessage > requestMany ( ServiceMessage request, Class < > responseType, Address address ) { return Flux. defer ( ( ) -> requireNonNull ( address,requestMany address parameter required and must be ) ; requireNonNull ( transport,transport required and must be ) ; return transport. create ( address ). requestStream ( request ). map ( message -> ServiceMessageCodec. decodeData ( message, responseType ) ). map ( this :: throwIfError ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incrementalRestore ( File incrementalBackupFile ) throws FileNotFoundException, IOException, ClassNotFoundException, RepositoryException { ObjectInputStream ois = ; { ois = new ObjectInputStream ( PrivilegedFileHelper. fileInputStream ( incrementalBackupFile ) ) ; ( ) TransactionChangesLog changesLog = readExternal ( ois ) ; changesLog. setSystemId ( Constants. JCR_CORE_RESTORE_WORKSPACE_INITIALIZER_SYSTEM_ID ) ; ChangesLogIterator cli = changesLog. getLogIterator ( ) ; (.Log ( ) ) if ( cli nextLog ( ) getEventType ( ) ExtendedEvent LOCK ) { cli. removeLog ( ) ; } } saveChangesLog ( changesLog ) ; } } ( EOFException ioe ) { if ( ( ) ) {. trace ( "An exception occurred " + ioe. getMessage ( ) ) ; } } }<CODESPLIT>Perform incremental restore operation .
public Key < Integer > start ( ) { Key Integer > object Key < Integer > ( ) ; consumers. put ( object, new Consumer < Integer > ( ) { count ; public void consume ( final ByteBuffer buffer ) { buffer remaining ( ) ; } public Integer finish ( ) { return count ; } } ) ; return object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean isElementPresent ( String locator ) { logger. entering ( locator ) ; flag = ; { flag = HtmlElementUtils. locateElement ( locator ) ; } ( NoSuchElementException e ) { } logger. exiting ( flag ) ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String args [ ] ) throws Exception { final buffer = (The lazy fox ) ; Thread t1 = new Thread ( ) { public void run ( ) { synchronized ( buffer ) { buffer. delete (, 4 ) ; buffer. append ( in the middle ) ; System.. println ( "Middle" ) ; { Thread. sleep ( 4000 ) ; } ( e ) { } buffer. append ( of fall ) ; System.. println ( "Fall" ) ; } } } ; Thread t2 = new Thread ( ) { public void run ( ) { { Thread. sleep ( 1000 ) ; } ( e ) { } buffer. append ( jump over the fence ) ; System.. println ( "F" ) ; } } ; t1. start ( ) ; t2. start ( ) ; t1. join ( ) ; t2. join ( ) ; System.. println ( buffer ) ; }<CODESPLIT>We have more input since wait started
protected double interpolate ( double boundA, double boundB ) { alphaNew ; if ( Double isNaN ( gp ) ) { alphaNew = SearchInterpolate quadratic ( f, g, st, fp, stp ) ; } { alphaNew = SearchInterpolate cubic ( f, g, stprev, fp, gp, stp ) ; if ( Double isNaN ( alphaNew ) ) alphaNew = SearchInterpolate quadratic ( fprev, gprev, stprev, fp, stp ) ; } l, u ; if ( boundA boundB ) { l = boundA ; u = boundB ; } { l = boundB ; u = boundA ; } if ( alphaNew l ) alphaNew = l ; if ( alphaNew u ) alphaNew = u ; return alphaNew ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List < SemanticError > check ( DataType dataType ) { logger.er ( "Checking semantic constraints on datatype " + dataType. name ) ; final List < SemanticError > errors = < SemanticError > ( ) ; final Set < > constructorNames = HashSet < > ( ) ; ( Constructor constructor dataType. constructors ) logger. ( "Checking semantic constraints on constructor " + constructor. name + " in datatype " + dataType. name ) ; if ( dataType constructors size ( ) dataType name ( constructor name ) ) { logger. ( "Constructor with same name as its data type " + dataType. name + ) ; errors. add ( _ConstructorDataTypeConflict ( dataType. name ) ) ; } if ( constructorNames contains ( constructor name ) ) { logger. ( "Two constructors with same name " + constructor. name + " in data type " + dataType. name + ) ; errors. add ( _DuplicateConstructor ( dataType. name, constructor. name ) ) ; } { constructorNames. add ( constructor. name ) ; } errors. addAll ( check ( dataType, constructor ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
@ SuppressWarnings (",rawtypes" } ) protected void registerDependency ( List additionalList, GrailsPlugin plugin ) { if ( addedNames contains ( plugin getName ( ) ) ) { addedNames add ( plugin. getName ( ) ) ; additionalList. add ( plugin ) ; addPluginDependencies ( additionalList, plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private JsonNode executeRequest ( HttpPost request ) throws IOException, GroovesharkException { HttpResponse response = httpClient. execute ( request ) ; if (Logging ) { logRequest ( request, response ) ; } responsePayload = CharStreams toString ( ( response getEntity ( ) getContent ( ), Charsets UTF8 ) ) ; { return jsonMapper. readTree ( new StringReader ( responsePayload ) ) ; } ( JsonProcessingException e ) { throw new GroarkException. ServerErrorException ( "Failed to parse response - received data was not valid JSON " + responsePayload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map < String, T > parseMap ( JsonParser jsonParser ) throws IOException { HashMap <, T > map = new HashMap <, T > ( ) ; ( jsonParser. nextToken ( ) JsonToken. ENDOBJECT ) String key = jsonParser getText ( ) ; jsonParser. nextToken ( ) ; if ( jsonParser getCurrentToken ( ) JsonToken VALUENULL ) { map. put ( key, null ) ; } { map. put ( key, parse ( jsonParser ) ) ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public DateFuncSup subtract ( DateSeperator d ) { date setTime ( date getTime ( ) d parse ( ) ) ; return this ; }<CODESPLIT>subtract date on supported date
private double radicalInverse ( long i ) { double digit = 1 / ( double ) base ; double radical = digit ; double inverse = ; while ( i > 0 ) inverse += digit * ( double ) ( i base ) ; digit *= radical ; i /= base ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String getTempDir ( ) { synchronized ( FileUtil. class ) { if ( TEMPDIR null ) { String tmpDir = System. getProperty (javaiotmpdir ) ; if ( StringUtil isEmpty ( tmpDir ) ) { if ( new File ( "/temp ) exists ( ) ) { tmpDir = "/temp" ; } else { tmpDir = "/tmp" ; } } TEMPDIR = tmpDir ; } } return TEMP_DIR ; }<CODESPLIT>Gets the default temp directory for the system .
public static < Accumulator, Value > Accumulator reduce ( List < Value > list, Accumulator init, ReduceClosure < Accumulator, Value > f ) { Acc accumulator = init ; ( Value value list ) accumulator f eval ( accumulator value ) ; } return accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected ProcessOutput executeProcess ( FaxJob faxJob, String command, FaxActionType faxActionType ) { if ( command ) { this throwUnsupportedException ( ) ; } updatedCommand = command ; if ( this useWindowsCommandPrefix ) { buffer = ( updatedCommand ( ) + this windowsCommandPrefix ( ) + ) ; buffer append ( this. windowsCommandPrefix ) ; buffer. append ( ) ; buffer. append ( updatedCommand ) ; updatedCommand = buffer. toString ( ) ; } ProcessOutput processOutput = ProcessExecutorHelper. executeProcess ( this, updatedCommand ) ; this. validateProcessOutput ( processOutput, faxActionType ) ; this. updateFaxJob ( faxJob, processOutput, faxActionType ) ; return processOutput ; }<CODESPLIT>Executes the process and returns the output .
public ModelNode getConnector ( String name ) throws Exception { Address address = Address root ( ) add ( SUBSYSTEM SUBSYSTEMWEB, CONNECTOR, name ) ; return readResource ( address, true ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( CharsetDetector det, int [ ] commonChars ) { @ SuppressWarnings ( "unused" ) int singleByteCharCount = ; doubleByteCharCount = ; commonCharCount = ; badCharCount = ; totalCharCount = ; confidence = ; iteratedChar iter = new iteratedChar ( ) ; detectBlock : { (. reset ( ) ; nextChar (, det ) ; ) { totalCount ++ ; if ( iter. error ) { badCount ++ ; } else { long cv = iter. charValue &xFFFFFFFFL ; if ( cv <=xff ) { singleByteCount ++ ; } else { doubleByteCount ++ ; if ( commonChars null ) { if ( Arrays. binarySearch ( commonChars, ( int ) cv ) >= ) { commonCount ++ ; } } } } if ( badCharCount >= 2 && badCharCount 5 >= doubleByteCharCount ) { detectBlock ; } } if ( doubleByteCharCount <= 10 && badCharCount ) { if ( doubleByteCharCount && totalCharCount < 10 ) { confidence = ; } else { confidence = 10 ; } detectBlock ; } if ( doubleByteCharCount < 20 badCharCount ) { confidence = ; detectBlock ; } if ( commonChars null ) { confidence = 30 + doubleByteCharCount - 20 * badCharCount ; if ( confidence > 100 ) { confidence = 100 ; } } else { double maxVal = Math. log ( ( float ) doubleByteCharCount 4 ) ; double scaleFactor = 90 / maxVal ; confidence = ( int ) ( Math. log ( commonCharCount + 1 ) scaleFactor + 10 ) ; confidence = Math. min ( confidence, 100 ) ; } } return confidence ; }<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( DMatrix src, int srcY0, int srcY1, int srcX0, int srcX1, DMatrix dst ) { ( ( ReshapeMatrix ) dst ). reshape ( srcY srcY, srcX1 srcX ) ; extract ( src, srcY, srcY1, srcX, srcX1, dst,, ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resizeEip ( ResizeEipRequest request ) { ( request getNewBandwidthInMbps ( ),newBandwidthInMbps should not be ) ; checkStringNotEmpty ( request getEip ( ),eip should not be empty ) ; if ( Strings isNullOrEmpty ( request getClientToken ( ) ) ) { request setClientToken ( generateDefaultClientToken ( ) ) ; } InternalRequest internalRequest = this createRequest ( request, HttpMethodName PUT, request getEip ( ) ) ; internalRequest addParameter (resize, null ) ; internalRequest. addParameter ( CLIENT_TOKEN_IDENTIFY, request. getClientToken ( ) ) ; fillPayload ( internalRequest, request ) ; invokeHttpClient ( internalRequest, AbstractBceResponse. class ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void useNextAddressAsNewContactSeedBroker ( ) { if ( ++ currentContactSeedBrokerIndex seedBrokerAddresses length ) { currentContactSeedBrokerIndex = ; } URLContactUrl = NetUtils getCorrectHostnamePort ( seedBrokerAddresses currentContactSeedBrokerIndex ) ; this consumer = new SimpleConsumer ( newContactUrl getHost ( ), newContactUrl getPort ( ), soTimeout, bufferSize, dummyClientId ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { result = new ( ) ; ( i = ; i < value. ( ) ; i ) char c = value. charAt ( i ) ; if ( c ESCAPEPREFIX ) { String codeString = value. substring ( i +, i + 3 ) ; code = Integer. ( codeString, 16 ) ; if ( code < reservedChars length && reservedChars code ] code ) { result. append ( reservedChars code ) ; i += 2 ; } else { throw new ServiceLocationException ( "Unknown escaped character " + ESCAPE_PREFIX + codeString + " at position " + ( i + 1 ) + " of " + value, SLPError. PARSE_ ) ; } } else { result. append ( c ) ; } } return result. toString ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected HashMap readFile ( HashMap brMap ) throws IOException { HashMap ret = HashMap ( ) ; < HashMap > expArr = < HashMap > ( ) ; HashMap < String, HashMap > files = readObvData ( brMap ) ; ArrayList < HashMap > obvData ; HashMap obv ; HashMap expData ; ( exname files. keySet ( ) ) obvData = ( ArrayList ) files get ( exname ). get ( obv ) ; ( HashMap obvSub obvData ) expData = HashMap ( ) ; obv = HashMap ( ) ; copyItem ( expData, files. get ( exname ),exname ) ; copyItem ( expData, files. get ( exname ),crid ) ; copyItem ( expData, files. get ( exname ),local_name ) ; expData. put ( jsonKey, obv ) ; obv. put ( obvFileKey, obvSub. get ( obv ) ) ; expArr. add ( expData ) ; } } idNames = ( ) ; idNames. add (trno_t ) ; removeIndex ( expArr, idNames ) ; ret. put (experiments, expArr ) ; return ret ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static FixedStringSearchInterpolator createInterpolator ( MojoParameters params, String filter ) { delimiters extractDelimiters ( filter ) ; ( delimiters ) return FixedStringSearchInterpolator. create ( ) ; } DockerAssemblyConfigurationSource configSource DockerAssemblyConfigurationSource ( params ) ; return AssemblyInterpolator. fullInterpolator ( params. getProject ( ), DefaultAssemblyReader. createProjectInterpolator ( params. getProject ( ) ). withExpressionMarkers ( delimiters [ 0 ], delimiters [ 1 ] ), configSource ). withExpressionMarkers ( delimiters [ 0 ], delimiters [ 1 ] ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean isPartitionCleanupInProgress ( ZooKeeper zk ) throws KeeperException, InterruptedException { List < String > children = zk getChildren ( VoltZK leadersinitiators, ) ; List < ZKUtil ChildrenCallback > childrenCallbacks = Lists ( ) ; ( String child : children ) ZKUtil ChildrenCallback callback = new ZKUtil. ChildrenCallback ( ) ; zk. getChildren ( ZKUtil. joinZKPath ( VoltZK. leaders_initiators, child ),, callback, null ) ; childrenCallbacks. add ( callback ) ; } ( ZKUtil. ChildrenCallback callback : childrenCallbacks ) if ( callback ( ) isEmpty ( ) ) { return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private byte [ ] unifyLData ( final CEMI ldata, final boolean emptySrc, final List < Integer > types ) { final byte data ; if ( ldata instanceof CEMILDataEx ) { final CEMILDataEx ext = ( ( CEMILDataEx ) ldata ) ; final List < AddInfo > additionalInfo = ext. additionalInfo ( ) ; synchronized ( additionalInfo ) { ( final Iterator < AddInfo > i = additionalInfo. iterator ( ) ; i. ( ) ; ) { final AddInfo info = i. next ( ) ; if ( types. contains ( info. getType ( ) ) ) { logger. warn ( "remove L-Data additional info {}", info ) ; i. remove ( ) ; } } } } data = ldata. toByteArray ( ) ; data = ; data 1 + data 1 + 1 = ; if ( emptySrc ) { data 1 + data 1 + 3 = ; data 1 + data 1 + 4 = ; } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static < T extends Number > int [ ] asArray ( final T... array ) { int [ ] b = new int [ array. length ] ; for ( i = ; i < b. length ; i ) { b i = array i. intValue ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void setActiveChunkHandle ( SegmentHandle handle ) { Preconditions. checkArgument ( handle handle. isReadOnly ( ),Active SegmentChunk handle cannot be readonly." ) ; SegmentChunk last = lastChunk ( ) ; Preconditions. checkState ( last null,Cannot set an Active SegmentChunk handle when are no SegmentChunks." ) ; Preconditions. checkArgument ( handle null handle. getSegmentName ( ). ( last. getName ( ) ),Active SegmentChunk handle must be for the last SegmentChunk." ) ; this. activeChunkHandle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String getEmptyValue ( ) { if ( Timex3IntervalType featOkTst && ( ( Timex3IntervalType ) jcasType ) casFeatemptyValue ) jcasType jcas throwFeatMissing ( "emptyValue, "de.unihd.dbs.uima.types.heideltime.Timex3Interval ) ; return jcasType. ll_cas. ll_getStringValue ( addr, ( ( Timex3Interval_Type ) jcasType ). casFeatCode_emptyValue ) ; }<CODESPLIT>getter for emptyValue - gets
public static AccountInfo adaptAccountInfo ( BitstampBalance bitstampBalance, String userName ) { List < Balance > balances = < > ( ) ; ( org. knowm. xchange. bitstamp. dto. account. BitstampBalance. Balance b : bitstampBalance. getBalances ( ) ) Balance xchangeBalance = Balance ( Currency getInstance ( b getCurrency ( ) toUpperCase ( ) ), b getBalance ( ), b getAvailable ( ), bReserved ( ), ZERO, ZERO, b getBalance ( ) subtract ( b getAvailable ( ) ) subtract ( bReserved ( ) ), ZERO ) ; balances. add ( xchangeBalance ) ; } return new AccountInfo ( userName, bitstampBalance. getFee ( ), new Wallet ( balances ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void afterConnectionClosed ( WebSocketSession session, CloseStatus status ) { logger. debug ( "WebSocket closed Close Status, session, status. toString ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trimLastPathSection ( String path ) { String [ ] sections = path. split ( "/" ) ; newPath = new ( "/" ) ; for ( i = ; i < sections. length - ; i ) { newPath. append ( sections i ). append ( "/" ) ; } return newPath. toString ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ( ) { final Style style = Style ( ) ; style color = PaletteUtils getSolidColor ( PaletteUtils MATERIALRED ) ; return style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public ManagedObjectContext createContext ( ) { Bean < T > bean ; EjbDescriptor < T > ejbDescriptor getEjbDescriptor ( ) ; ( ejbDescriptorMessageDriven ( ) ) bean = getBean ( ) ; } WeldManager beanManager = getBeanManager ( ) ; WeldCreationalContext < T > creationalContext = beanManager createCreationalContext ( bean ) ; ManagedObjectContext managedObjectContext CDIManagedObjectState ( creationalContext ) ; return managedObjectContext ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public final void deleteOperation ( String name ) { DeleteOperationRequest request DeleteOperationRequest newBuilder ( ) setName ( name ) build ( ) ; deleteOperation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean isMember ( int x ) { Assert check ( currentState BitsState UNKNOWN ) ; return <= x && x < ( bits. length wordshift ) && ( bits [ x >>> wordshift ] & ( 1 ( x & word ) ) )!= 0 ; }<CODESPLIT>Is x an element of this set?
public HandlerRegistration addSearchFinishHandler ( SearchFinishEvent. SearchFinishHandler handler ) { addHandler ( handler SearchFinishEvent TYPE ) ; }<CODESPLIT>This handler will be triggered when search is finish
public void setForeignBusSendAllowed ( boolean sendAllowed ) { if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) { SibTr. entry ( tc,setForeignBusSendAllowed, Boolean. valueOf ( sendAllowed ) ) ; } _sendAllowedOnTargetForeignBus = Boolean. valueOf ( sendAllowed ) ; if ( aliasesThatTargetThisDest ) { synchronized ( aliasesThatTargetDest ) { Iterator i = aliasesThatTargetThisDest. iterator ( ) ; (. ( ) ) AbstractAliasDestinationHandler abstractAliasDestinationHandler = ( AbstractAliasDestinationHandler ) i. next ( ) ; abstractAliasDestinationHandler setForeignBusSendAllowed ( sendAllowed ) ; } } } if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) { SibTr. exit ( tc,setForeignBusSendAllowed ) ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processingInstruction ( String target, String data ) throws SAXException { ( documentHandler ) documentHandler processingInstruction ( target, data ) ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer getFileSizeOnFTPServer ( String hostName, Integer port, String userName, String password, String filePath ) { Integer result = ; String replyString = executeCommandOnFTPServer ( hostName, port, userName, password,SIZE, filePath ) ; if ( replyString null replyString contains ( " " ) ) { throw new RuntimeException ( String. format ( "Unable to get size of the %s file Got [%s reply from FTP server.", filePath, replyString ) ) ; } else { result = Integer. valueOf ( replyString. split ( " " ) 1. replaceAll ( "[r, "" ) ) ; } return result ; }<CODESPLIT>Get size of the FTP file .
public static base_responses enable ( nitro_service client, String trapname [ ] ) throws Exception { base_responses result = null ; if ( trapname null && trapname. length > 0 ) { snmpalarm enableresources = new snmpalarm trapname. length ; for ( i = ; i < trapname. length ; i ) { enableresources i = new snmpalarm ( ) ; enableresources i. trapname = trapname i ; } result = perform_operation_bulk_request ( client, enableresources, "enable" ) ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void ordered ( Consumer < T > action ) { TopSorter < T > sorter TopoSorter < > ( this ) ; sorter ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static SeqServerGroup parse ( String asg ) { d = asg. indexOf ( '-' ) ; d = asg. indexOf ( '-', d + ) ; dN = asg. ( '-' ) ; if ( dN < isSequence ( asg, dN ) ) { dN = asg. length ( ) ; } return new SeqServerGroup ( asg, d1, d2, dN ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int getMapCount ( int srcCount, int numNodes ) { numMaps = ( ) ( srcCount OPPERMAP ) ; numMaps =. min ( numMaps, numNodes MAX_MAPS_PER_NODE ) ; return Math. max ( numMaps, 1 ) ; }<CODESPLIT>Calculate how many maps to run .
protected void channelRead0 ( ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg ) throws Exception { switch ( msg. getStatus ( ) ) { SUCCESS : originalPromise setSuccess ( ) ; ctx. pipeline ( ). remove ( this ) ; ctx. fireChannelActive ( ) ; ; ACCESS : originalPromise setFailure ( new AuthenticationException ( "Authentication on Select Bucket command" ) ) ; ; NOT : originalPromise. setFailure ( new AuthenticationException ( "Bucket found on Select Bucket command" ) ) ; ; default : originalPromise. setFailure ( new AuthenticationException ( "Unhandled select bucket status: " + msg. getStatus ( ) ) ) ; } }<CODESPLIT>Handles incoming Select bucket responses .
private final DiceNotationExpression unwrap ( final DiceNotationExpression expression ) { DiceNotationExpression result ; if ( expression ExpressionWrapper ) result = ( ( ExpressionWrapper ) expression )WrappedExpression ( ) ; } { result = expression ; } return result ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float [ ] checkArrayElementsInRange ( float [ ] value, float lower, float upper, String valueName ) { checkNotNull ( value, valueName + must not be null" ) ; ( i = ; i < value. ; i ) float v = value i ; if ( Float isNaN ( v ) ) { throw new IllegalArgumentException ( valueName + "[" + i + "] must not be NaN" ) ; } if ( v < lower ) { throw new IllegalArgumentException ( String. format ( "%s[%d is out of range of [%f %f ( low)", valueName, i, lower, upper ) ) ; } if ( v > upper ) { throw new IllegalArgumentException ( String. format ( "%s[%d is out of range of [%f %f ( high)", valueName, i, lower, upper ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy ( InputStream inputStream, OutputStream outputStream ) throws IOException { copy ( inputStream outputStream ) ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection < Tuple > getTuples ( List < VarDef > varDefs, int varStart, int varEnd, int tupleSize ) { Collection < Tuple > tuples = new ArrayList < Tuple > ( ) ; ( i = varStart ; i < var ; i ) VarDef nextVar = varDefs. get ( ) ; Iterator < VarValueDef > values = nextVar. getValidValues ( ) ; if ( values hasNext ( ) ) { throw new IllegalStateException ( "Can't complete tuples -- no valid values defined for var=" + nextVar ) ; } Collection < Tuple > subTuples = tupleSize? : getTuples ( varDefs, i +, varEnd +, tupleSize ) ; if ( subTuples ) { ( values. ( ) ) tuples. add ( new Tuple ( new VarBindingDef ( nextVar, values. next ( ) ) ) ) ; } } if ( subTuples isEmpty ( ) ) { ( values. ( ) ) VarBindingDef nextBinding = new VarBindingDef ( nextVar, values. next ( ) ) ; ( Tuple subTuple : subTuples ) Tuple nextTuple = new Tuple ( nextBinding ). addAll ( subTuple ) ; if ( nextTupleCompatible ( ) ) { tuples. add ( nextTuple ) ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public V get ( K key ) { final hash = hash ( key ) ; final slot = indexOf ( hash ) ; ( Entry < K, V > entry = table [ slot ; entry!= null ; entry = entry. next ) { if ( entry hashCode hash && entry key ( key ) ) { return entry. value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public boolean validSecondFactor ( String secret, String number ) { Objects requireNonNull ( secret, Required SECRET ( ) ) ; Objects requireNonNull ( number, Required TOTP toString ( ) ) ; return TotpUtils. verifiedTotp ( secret, number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void updateOutgoingEdgesStateDL ( int currS, int currL, int prevS, int prevL, Emissions emission ) { updateOutgoingEdges ( currS, currL, States DL, prevS, prevL, States DL, Transitions tDLin, emission ) ; updateOutgoingEdges ( currS, currL, States DL, prevS, prevL, States S, Transitions tStoDL, emission ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void setPrefix ( String key, String prefix ) { PdfName fieldname = PdfName ( key ) ; PdfObject o = get ( fieldname ) ; if ( o ) throw new IllegalArgumentException (You must set a value before adding a prefix." ) ; PdfDictionary dict = PdfDictionary ( PdfName COLLECTIONSUBITEM ) ; dict put ( PdfName. D, o ) ; dict put ( PdfName P, PdfString ( prefix, PdfObject TEXTUNICODE ) ) ; put ( fieldname, dict ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected AbstractExpression replaceExpressionsWithPve ( AbstractExpression expr ) { assert ( expr ) ; if ( expr TupleValueExpression ) { paramIdx = ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpression pve = new ParameterValueExpression ( paramIdx, expr ) ; m_parameterTveMap. put ( param, expr ) ; return pve ; } if ( expr AggregateExpression ) { paramIdx = ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpression pve = new ParameterValueExpression ( paramIdx, expr ) ; List < TupleValueExpression > tves = ExpressionUtil getTupleValueExpressions ( expr ) ; assert ( mparentStmt ) ; ( TupleValueExpression tve : tves ) origId = tve. getOrigStmtId ( ) ; if ( mstmtId origId && mparentStmt mstmtId origId ) { throw new PlanningErrorException ( "Subqueries do not support aggregation of parent statement columns" ) ; } } m_parameterTveMap. put ( param, expr ) ; return pve ; } if ( expr getLeft ( ) ) { expr. setLeft ( replaceExpressionsWithP ( expr. getLeft ( ) ) ) ; } if ( expr getRight ( ) ) { expr. setRight ( replaceExpressionsWithP ( expr. ( ) ) ) ; } if ( expr getArgs ( ) ) { List < AbstractExpression > newArgs = new ArrayList < > ( ) ; ( AbstractExpression argument : expr. getArgs ( ) ) newArgs. add ( replaceExpressionsWithPve ( argument ) ) ; } expr. setArgs ( newArgs ) ; } return expr ; }<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean addCallback ( String applicationId, DelayedCallback callback ) { isFirst = ; List < DelayedCallback > list = BACKLOG ( applicationId ) ; if ( list ) { list = ArrayList < DelayedCallback > ( ) ; BACKLOG. put ( applicationId, list ) ; isFirst = ; } list. add ( callback ) ; return isFirst ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static byte [ ] gunzipBytes ( byte [ ] compressedBytes ) throws IOException { bos = ( ( ) ( compressedBytes length5 ) ) ; InflaterOutputStream dos = new InflaterOutputStream ( bos ) ; dos. write ( compressedBytes ) ; dos. close ( ) ; return bos. toByteArray ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public TupleValueExpression getOutputExpression ( int index ) { SchemaColumn schemaCol = getSchemaColumn ( index ) ; TupleValueExpression tve = TupleValueExpression ( getTableAlias ( ) getTableAlias ( ) schemaCol getColumnAlias ( ) schemaCol getColumnAlias ( ) index ) ; return tve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
