public final ExampleData getSelectedExampleData ( ) { allSelectedItems getSelectedRows ( ) ; (SelectedItemsSelectedItems ( ) ) return null ; } ( selectedItem allItems ) > rowIndex TreeItem rowIndex ( selectedItem ) ; return getTreeModel ( ) getExampleData ( rowIndex ) ; } return null ; }<CODESPLIT>Get the example which is selected in the tree .
public void dimAt ( float alpha ) { (DimEnabled ) return ; } (DimView )DimView makeDimView ( ) ; } (DimViewShown ( ) )DimView setVisibility ( VISIBLE ) ;DimViewBackgroundColor (DimColor ) ; }DimViewAlpha ( alpha ) ; }<CODESPLIT>Set the dim - behind layer a specific opacity .
public Path extract ( ) { ( ( ) ) new IllegalStateException (Extract can called once ) ; extractSW start ( ) ; SEntry =ptEntry ; setEndNode ( currEdge adjNode ) ;EdgeValid EdgeIterator Edge isValid ( currEdge edge ) ;Edge ; (EdgeValid EdgeIterator Edge isValid ( currEdge parent edge ) ; =Valid? curr parent edge : EdgeIterator NO ; processEdge ( currEdge edge currEdge adjNodeEdge ) ; curr = curr parent ; } setFromNode ( currEdge adjNode ) ; reverseOrder ( ) ; extractSW stop ( ) ; return setFound ( ) ; }<CODESPLIT>Extracts the Path from the shortest - path - tree determined by sptEntry .
public static int writeInt ( byte [ ] target, int offset, int value ) { target offset ( ) ( value ) ; target offset + ( ) ( value ) ; target offset + ( ) ( value ) ; target offset + = ( ) value ; return Integer BYTES ; }<CODESPLIT>Writes the given 32 - bit Integer to the given byte array at the given offset .
private void visitGetElem ( Node n ) { validator expectMatch ( getJS ( ( ) ) getJS (Child ( ) ) ) ;Typed ( ) ; }<CODESPLIT>Visits a GETELEM node .
private static Class < > getTypedClass ( java. lang. reflect. Type type ) { ( Class ) return ( ( Class ) type ) ; } ( ParameterizedType ) java lang reflect Type raw ( ( ParameterizedType ) type ) getRawType ( ) ; return getTypedClass ( rawParamterizedType ) ; } ( TypeVariable ) java upperBound = ( ( TypeVariable ) ) ( ) ; return getTypedClass ( upperBound ) ; } new IllegalArgumentException ( finding generic class + type ) ; }<CODESPLIT>Gets the typed class .
public URI toUri ( JimfsPath path ) fileStore ( ( ) ; pathServiceUri ( uri pathAbsolutePath ( ) ) ; }<CODESPLIT>Gets the URI of the given path in this file system .
public ActivityInterface getActivityInterface ( ) { ( activityInterface activityInterface ActivityInterface ( shared transport ) ; } activityInterface ; }<CODESPLIT>Get the ActivityInterface .
private void initBeforeList ( ) { < ProcessAdvice > beforeRequestProcessAd < > ( ) ; Method invokeHolderInvokeHolder ( ) ; Class <? > processorClass invokeHolder getDeclaringClass ( ) ; ( processorClass processorClass isAnnotationPresent ( Before ) ) Class <? ProcessAdvice > bcs processorClass getAnnotation ( Before ) value ( ) ; ( ; b ; ) Class <? ProcessAdvice > bc bcs ; ProcessAdvice beforeRequestProcessAdvice BeanManager getInstance ( ) getReference ( bc ) ; beforeRequestProcessAdvices add ( beforeRequestProcessAdvice ) ; } } ( invokeHolder isAnnotationPresent ( Before ) ) Class <? ProcessAdvice > bcs invokeHolder getAnnotation ( Before ) value ( ) ; ( ; b ; ) Class <? ProcessAdvice > bc bcs ; ProcessAdvice beforeRequestProcessAdvice BeanManager getInstance ( ) getReference ( bc ) ; beforeRequestProcessAdvices add ( beforeRequestProcessAdvice ) ; } } this beforeRequestProcessAdvices = beforeRequestProcessAdvices ; }<CODESPLIT>Initializes before process advices .
private void init ( ) { js Json ( ) ; jsFactory configure ( JsonParser Feature ALLOWCOMMENTS, ) ; jsFactory configure ( JsonParser Feature ALLOWSINGLEQUOTES, ) ; jsFactory configure ( JsonParser Feature ALLOWNONNUMBERS, ) ; }<CODESPLIT>Creates the JsonFactory .
static void flushStackLocalLeaks ( Lo lo ) { Handler handler Handler ( lo ) { void handleMessage ( Message msg ) { sendMessageDelayed (Message ( ) THREADCLEAN ) ; } } ; handler sendMessageDelayed ( handlerMessage ( ) THREADCLEAN ) ; }<CODESPLIT>Prior to Android 5 HandlerThread always keeps a stack local reference to the last message that was sent to it . This method makes sure that stack local reference never stays there for too long by sending new messages to it every second .
public void addReset ( String label ) { ( buttons ) buttonsAtBottom ( ) ; Element Input ( Input ResetReset label ) ; ( extendRow ) addField ( ) ; buttons add ( ) ; }<CODESPLIT>Add a reset button .
public getMaximumVolume ( Context ) ( ( AudioManager ) getSystemService ( Context AUDISERVICE ) ) getStreamVolume ( AudioManager STREAMMUSIC ) ; }<CODESPLIT>Returns maximum volume the media volume can have
@ ( "checkstyle:npathity" ) public void removeSREs ( ISREInstall... sres ) { ISREInstallSRE getDefaultSRE ( ) ;Id =SRE? :SRE getId ( ) ;Index = ; ( defaultId ) ( ; defaultIndex < this sreTable getItem ( ) ; ) ( defaultId ( ( ( ISREInstall ) this sreTable getItem ( ) getData ( ) ) getId ( ) ) )Index = ; } } } normDefaultId = StringsEmpty (Id ) ;IsRemoved = ; ( final ISREInstall sre sres ) ( this sreArray remove ( sre ) sre getId ( ) ( normDefaultId ) )IsRemoved = ; } } refreshSREListUI ( ) ; ( defaultRemoved ) ( this sreTable getItemCount ( ) ) setSelection ( ) ; } ( defaultIndex )Index = ; } ( defaultIndex >= this sreTable getItemCount ( ) )Index = this sreTable getItemCount ( ) ; }Selection ( StructuredSelection ( this sreTable getItem (Index ) getData ( ) ) ) ; } } this sresList refresh ( ) ; ( defaultRemoved ) fireDefaultSREChanged ( ) ; } updateUI ( ) ; }<CODESPLIT>Removes the given SREs from the table .
public static WikiUser getUser ( String wikiId, String siteurl ) { WikiUser result ; Properties props getProperties ( wikiId ) ; result WikiUser ( ) ;Username ( props (user ) ) ;Email ( props (email ) ) ; Crypt pcf Crypt ( props getProperty (cypher ) props getProperty (salt ) ) ; setPassword ( pc decrypt ( props getProperty ( ) ) ) ; } ( FileNotFoundException ) { msg help ( wikiId siteurl ) ; log ( Level SEVERE, msg ) ; } ( ) { log ( Level SEVERE, e getMessage ( ) ) ; } ( General ) { log ( Level SEVERE, e getMessage ( ) ) ; } return result ; }<CODESPLIT>get the Wiki user for the given wikiid
public T next ( ) { retryCount ; T delegate ( ) ; ( alreadyGenerated ( ) ) alreadyGenerated add ( ) ; return next ; } retryCount ; } ( numberOfRetries ; new IllegalStateException ( on ( " " ) join ( "", numberOfRetries, "retries trying generate unique value" ) ) ; }<CODESPLIT>Returns unique &lt ; T&gt ; generated by delegate Generator&lt ; T&gt ;
private isAllowedInsideList ( Node node ) { ( node getNodeType ( ) Node ELEMENTNODE node getNodeName ( ) equalsIgnoreCase ( TAGLI ) ) ( node getNodeType ( ) Node TEXTNODE node getNodeValue ( ) trim ( ) length ( ) ) ; }<CODESPLIT>Checks if a given node is allowed or not as a child of a &lt ; ul&gt ; or &lt ; ol&gt ; element .
public static ResidueNumber [ ] matchSequenceToStructure ( ProteinSequence seq, Structure struct ) { Map Group > atomIndexPosition Group > ( ) ; ProteinSequence structSeq getProteinSequenceStructure ( struct atomIndexPosition ) ; SubstitutionMatrix AminoAcidCompound > matrix SimpleSubstitutionMatrix AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ) ( short ) ( short ) ) ; matrix SimpleSubstitutionMatrix AminoAcidCompound > ( AminoAcidCompoundSet getAminoAcidCompoundSet ( ) ( SimpleSubstitutionMatrix getResourceAsStream ( "/matbtxt ) )b ) ; SequencePair ProteinSequence AminoAcidCompound > pair Align getPairAlignment ( seq structSeq PairSequenceAligner GLOBAL SimpleGapPen ( ) matrix ) ; AlignSequence ProteinSequence AminoAcidCompound alignedSeq pair getQuery ( ) ; AlignSequence ProteinSequence AminoAcidCompound alignedStruct pair getTarget ( ) ; assert ( alignedSeq getLength ( ) alignedStruct getLength ( ) ) ; ResidueNumber ca ResidueNumber seq getLength ( ) ; ( pos aligned getStart ( ) getPosition ( ) ; pos aligned ( ) getPosition ( ) ; pos ) ( alignedSeqGap ( pos ) ) structIndex alignedStruct getSequenceIndex ( pos ) ; assert ( structIndex ) ; Group g atomIndexPosition ( structIndex ) ; (Chain residue Structure no corresponding amino acid in sequence g getChainId ( ) g getResidueNumber ( ) ( ) g getChain ( ) getStructure ( ) getPDBCode ( ) ) ; ; } ( alignedStructGap ( pos ) ) seqIndex alignedSeq getSequenceIndex ( pos ) ; structIndex alignedStruct getSequenceIndex ( pos ) ; Group g atomIndexPosition ( structIndex ) ; assert ( seqIndex seqIndex ca ) ; ca seqIndex g getResidueNumber ( ) ; } } return ca ; }<CODESPLIT>Given a sequence and the corresponding Structure get the ResidueNumber for each residue in the sequence .
@ ( } ) public static IMeta mergeMeta ( IMetaData <?,? > metaData1, IMetaData <?,? > metaData2 ) { Map < Object > map = ( ( Map < Object > ) metaData ) ; Set < Entry < String, Object > > set = map ( ) ; Map < Object > map = ( ( Map < Object > ) metaData ) ; Set < Entry < String, Object > > set = map ( ) ; Map < Object > rep = < Object > ( ) ; ( < Object > set ) key = entry getKey ( ) ; ( map ( key ) ) Object value = map ( key ) ; Object value = map ( key ) ; ( value Double ) ( Double valueOf ( value toString ( ) ) doubleValue ( ) Double valueOf ( value toString ( ) ) doubleValue ( ) ) rep put ( key, value ) ; } } if ( value Integer ) if ( Integer valueOf ( value toString ( ) ) intValue ( ) Integer valueOf ( value toString ( ) ) intValue ( ) ) rep put ( key, value ) ; } } if ( value Long ) if ( Long valueOf ( value toString ( ) ) longValue ( ) Long valueOf ( value toString ( ) ) longValue ( ) ) rep put ( key, value ) ; } } if ( value Boolean ) if ( Boolean valueOf ( value toString ( ) ) Boolean valueOf ( value toString ( ) ) ) rep put ( key, value ) ; } } } } set removeAll ( rep ( ) ) ; set addAll ( rep ( ) ) ; set addAll ( set ) ; return metaData1 ; }<CODESPLIT>Merges the two Meta objects
public List < T subList ( int arg0 int arg1 ) { (Results ( argResultsAvailable ( moveNextResults ( ) ; } return unmodifiableList ( allResults subList ( arg, arg ) ) ; }<CODESPLIT>Returns a sub - list in the range specified loading more results as necessary .
private Message prepare ( String channel, Message message, Recipient [ ] recipients ) { messageMetadata (cwfpubnode, nodeId ) ; messageMetadata (cwfpubchannel, channel ) ; messageMetadata (cwfpubevent, UUID randomUUID ( ) ( ) ) ; messageMetadata (cwfpub, System ( ) ) ; messageMetadata (cwfpubrecipients, recipients ) ; return message ; }<CODESPLIT>Adds publication - specific metadata to the message .
private < T > GraphRequest < T > graph ( String object, JavaType type, Param... params ) { this checkForBatchExecution ( ) ; Graph T Graph T ( object this mapper this TMappingChain ( ) ) ; this graphRequests ( ) ; return req ; }<CODESPLIT>The actual implementation of this after we ve converted to proper Jackson JavaType
public void writeLength ( long length ) { if ( 25 ) buf position = ( byte ) length ; } if ( ) { buf position = ( byte ) ; buf position = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; } if ( 1616 ) { buf position = ( byte ) ; buf position = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; buf position = ( byte ) ( length 16 ) ; } { buf position = ( byte )xfe ; buf position = ( byte ) length ; buf position = ( byte ) ( length 8 ) ; buf position = ( byte ) ( length 16 ) ; buf position = ( byte ) ( length 24 ) ; buf position = ( byte ) ( length 32 ) ; buf position = ( byte ) ( length 40 ) ; buf position = ( byte ) ( length ) ; buf position = ( byte ) ( length ) ; } }<CODESPLIT>Write length .
public static < TSource TResult List < TResult map ( Collection < TSource items Mapper < TSource TResult mapper ) { ( ( items ) ) return ArrayList < > ( ) ; } T ( items ( ) ) ; ( TSource item items ) TResult mappedItem mapper map ( item ) ; ( mappedItem ) ; } return ; }<CODESPLIT>Projects each element of a collection into a new collection .
private static void serializeReal ( Number real ContentHandler handler ) throws SAXException { serializeElement (real ( real ( ) ) handler ) ; }<CODESPLIT>Serialize a Number as a real element .
public JMenuBar setupStandardMenu ( ActionListener targetAction, boolean bAddHelpMenu ) { Application application BaseApplet getSharedInstance ( ) getApplication ( ) ; ResourceBundleResources application getResourceBundle ( ) ; application getResources ( ) ; this setupActions ( targetAction ) ; JMenuBar menuBar = new JMenuBar ( ) { private static final long =L ; public Dimension getMaximumSize ( ) { return new Dimension ( super. getMaximumSize ( ). width, super. getPreferredSize ( ). height ) ; } } ; menuBar ( ) ; JMenu menu ;chItemShortcut 20 ; menu this addMenu ( menuBar ThinMenu FILE ) ; this addMenuItem ( menu ThinMenu PRINTItemShortcut ) ; menu addSeparator ( ) ; this add ( menu,MenuON,chItem ) ; this add ( menu,MenuOUT,chItem ) ; this addMenuItem ( menu ThinMenu CHANGEPASSWORDItemShortcut ) ; menu addSeparator ( ) ; this addMenuItem ( menu ThinMenu CLOSEItemShortcut ) ;chItemShortcut 20 ; menu this addMenu ( menuBar ThinMenu EDIT ) ; this addMenuItem ( menu ThinMenu CUTItemShortcut ) ; this addMenuItem ( menu ThinMenu COPYItemShortcut ) ; this addMenuItem ( menu ThinMenu PASTEItemShortcut ) ; menu addSeparator ( ) ; this addMenuItem ( menu ThinMenu PREItemShortcut ) ; (Resources ) applicationResourceBundle (Resources ) ; (AddHelpMenu ) menu = this addHelpMenu ( menuBar ) ; return menuBar ; }<CODESPLIT>Setup the standard menu items .
public static String getPreferredAttributeNameForLaneCount ( ) { Preferences prefs Preferences userNodePackage ( RoadNetwork ) ; ( prefs ) return prefs get (LANECOUNTATTRNAME, DEFAULTATTRLANECOUNT ) ; } return DEFAULTATTRLANECOUNT ; }<CODESPLIT>Replies the preferred name for the number of lanes of the roads .
public static nsrollbackcmd [ ] get ( nitro_service service, nsrollbackcmd_args args ) throws Exception { nsrollbackcmd obj nsrollbackcmd ( ) ; option ( ) ;args ( nitro objectwithoutquotes ( args ) ) ; nsrollbackcmd ( nsrollbackcmd ) obj_resources ( service ) ; return ; }<CODESPLIT>Use this API to fetch all the nsrollbackcmd resources that are configured on netscaler . This uses nsrollbackcmd_args which is a way to provide additional arguments while fetching the resources .
private int translateElementNo ( int i ) { ( useList ) return i ; } j ; PatternRule rule = ( PatternRule ) this rule ; ( k ; k < ; k ) rule getElementNo ( ) ( k ) ; } return j ; }<CODESPLIT>Gets the index of the element indexed by i adding any offsets because of the phrases in the rule .
public String [ ] getProxyHostsWhiteList ( ) { ( _proxyHostsWhiteList _proxyHostsWhiteList size ( ) ) return new String ; hosts _proxyHostsWhiteList ( ) ; hosts ( String ) _proxyHostsWhiteList ( hosts ) ; return hosts ; }<CODESPLIT>Get proxy host white list .
public boolean addMetatypeAd ( MetatypeAd metatypeAd ) { ( this metatypeAd ) this metatypeAd new LinkedList MetatypeAd ( ) ; ( Metatype ad metatype ) ( ad getID ( ) equals ( metatype getID ( ) ) ) return ; this metatype ( metatype ) ; return ;<CODESPLIT>Adds a metatype AD .
public long skip ( long n ) throws IOException { ( mInputStream available ( ) n ) return mInputStream. skip ( n ) ; } mInputStream close ( ) ;Pos ; mObject mClient getObject ( mBucketName mKey m ) ; mInputStream ( mObject getDataInputStream ( ) ) ; } ( ServiceException ) new IOException ( e ) ; } return n ; }<CODESPLIT>This method leverages the ability to open a stream from GCS from a given offset . When the underlying stream has fewer bytes buffered than the skip request the stream is closed and a new stream is opened starting at the requested offset .
public static boolean isSuperCall ( JCTree tree ) { Name called ( tree ) ; ( ) names = table names ; return name names _super ; } return ; } }<CODESPLIT>Is this a call to super?
public static String getShortRequestDump ( String fromMethod, boolean includeHeaders, HttpServletRequest request ) { dump = ( ) ; dump (Timestamp : ) ( ISO getTimestamp ( ) ) ( ) ; dump (fromMethod : ) append ( fromMethod ) append ( ) ; dump append (Method : ) append ( request getMethod ( ) ) append ( '\ ) ; dump append (Scheme : ) append ( request getScheme ( ) ) append ( '\ ) ; dump append (URI : ) append ( request getRequestURI ( ) ) append ( '\ ) ; dump append (QueryString : ) append ( request getQueryString ( ) ) append ( '\ ) ; dump append (AuthType : ) append ( request getAuthType ( ) ) append ( '\ ) ; dump append (RemoteAddr : ) append ( request getRemoteAddr ( ) ) append ( '\ ) ; dump append (Scheme : ) append ( request getScheme ( ) ) append ( '\ ) ; dump append (ContentType : ) append ( request getContentType ( ) ) append ( '\ ) ; dump append (ContentLength ) append ( request getContentLength ( ) ) append ( '\ ) ; if ( includeHeaders ) { dump append (Headers : ) ; Enumeration < String > headers = request getHeaderNames ( ) ; ( headers ( ) ) header = headers ( ) ; dump append (t ) append ( header ) append ( ) append ( request getHeader ( header ) ) append ( '\ ) ; } } return ( dump. toString ( ) ) ; }<CODESPLIT>Build a String containing a short multi - line dump of an HTTP request .
public static void validateNotEmpty ( String stringToCheck boolean trim String argumentName ) throws NullArgumentException { validate (Check argumentName ) ; ( stringToCheck ( ) ( stringToCheck ( ) ( ) ) ) new NullArgumentException ( argumentName + ISEMPTY ) ; } }<CODESPLIT>Validates that the string is not null and not an empty string .
public static JPanel createPanelWithVerticalLayout ( ) { JPanelpanel JPanel ( ) ;panel ( Box (panel Box YAXIS ) ) ; _panel ; }<CODESPLIT>Create a panel that lays out components vertically .
protected shouldAnalyze ( ) { ( analyzerAnalyzer FileTypeAnalyzer fileTypeAnalyzer ( FileTypeAnalyzer analyzer ; fileTypeAnalyzer accept ( dependency getActualFile ( ) ) ; } ; }<CODESPLIT>Determines if the analyzer can analyze the given dependency .
public void registerServiceClass ( Class serviceClass ) { registeredServiceClasses ( service ( ) service ) ; Settings ServicesAvailable ( service ( ) ) ; }<CODESPLIT>Registers a service enabling the service layer to automatically start autorun servies .
public String getSectionText ( String pageTitle int sectionNumber ) throws Exception { this getPageContent ( pageTitlervsection section ) ; return ; }<CODESPLIT>get the text for the given section
public static double pearson ( int [ ] x, int [ ] y ) { ( x ) new IllegalArgumentException ( String format (Arrays different xd yd x y ) ) ; return 1 - Math. cor ( x, y ) ; }<CODESPLIT>Pearson correlation distance between the two arrays of type int .
public static TileGrid getTileGridFromWGS84 ( Point point int zoom ) { Projection projection Projection getProjection ( Projection EGGESYSTEM ) ; getTileGrid ( point zoom projection ) ; }<CODESPLIT>Get the tile grid for the location specified as WGS84
public List < VectorLayer getVectorLayers ( ) { VectorLayer list VectorLayer ( ) ; ( Layer layer layers ) ( layer VectorLayer ) list ( ( VectorLayer ) layer ) ; } } return list ; }<CODESPLIT>Return a list containing all vector layers within this model .
private void calcRmsd ( Point3d [ ] x, Point3d [ ] y ) { ( centered ) innerProduct ( x ) ; } xref CalcPoint clonePointArray ( x ) ; xtrans CalcPoint centroid ( xref ) ; ( centroid + x ) ; xtrans negate ( ) ; CalcPoint translate ( Vector (trans ) xref ) ;ref CalcPoint clonePointArray ( ) ;trans CalcPoint centroid (ref ) ; (y centroid + y ) ;trans negate ( ) ; CalcPoint translate ( Vector (trans )ref ) ; innerProduct (ref xref ) ; } calcR ( wsum ) ; }<CODESPLIT>Calculates the RMSD value for superposition of y onto x . This requires the coordinates to be precentered .
public void setSectionHeading ( Title v ) { if ( Section featOkTst ( ( Section ) jcasType ) casFeatsectionHeading ) jcasType jcas throwFeatMissing (sectionHeading,dejulielabjulestypesSection ) ; jcasType llcas llset ( addr, ( ( SectionType ) jcasType ) casFeatCodesectionHeading, jcasType llcas llgetFSRef ( v ) ) ; }<CODESPLIT>setter for sectionHeading - sets the title of the section
public Response process ( InputStream is ) throws IOException, SAXException, ParserConfigurationException { SmpParser parser SmpParser ( version ) ; Operation operation ; operation parser parse ( ) ; } Sx ) ( getOperation ( ) getOperation ( ) getType ( ) ) ( fully parse XML into request returning ErrorResponse error + e ( ) + parsed + e getOperation ( ) ) ; return new ErrorResponse ( e. getOperation ( ). getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } new SAXException ( e ( ), e ) ; } } ( ( operation Request ) ) new S ( S UNSOPERATION, "A session can process requests" ) ; } Request = ( Request ) operation ; ( req getAccount ( ) ) new S ( S MISSINGREQUIREDELEMENT, "A request include account credentials" ) ; } ( processor authenticate ( req getAccount ( ) ) ) new S ( S AUTH, "Authentication" ) ; } ( operation SubmitRequest ) return processor. submit ( req. getAccount ( ), ( SubmitRequest ) operation ) ; } ( operation DeliverRequest ) return processor. deliver ( req. getAccount ( ), ( DeliverRequest ) operation ) ; } ( operation DeliveryReportRequest ) return processor. deliveryReport ( req. getAccount ( ), ( DeliveryReportRequest ) operation ) ; } new S ( S UNSOPERATION, "Unsupported operation request type" ) ; } } Sx ) ( ( ) ) ; return new ErrorResponse ( operation. getType ( ), e. getErrorCode ( ). getIntValue ( ), e. ( ) ) ; } ) (Major uncaught throwable processing request generating ErrorResponse, t ) ; return new ErrorResponse ( operation. getType ( ), SxmpErrorCode. GENERIC. getIntValue ( ),Generic error while processing request ) ; } }<CODESPLIT>Processes an InputStream that contains a request . Does its best to only produce a Response that can be written to an OutputStream . Any exception this method throws should be treated as fatal and no attempt should be made to print out valid XML as a response .
private void submitPayload ( String url, HttpRequestUtil. ConnectionSettings connectionSettings, String jsonPayloadObject, String pushApplicationId, String masterSecret, MessageResponseCallback callback, List < String > redirectUrls ) { ( redirectUrls ( url ) ) new PushSenderException ( "The site contains an infinite redirect loop Duplicate url " + url ) ; } redirectUrls add ( url ) ; } HttpURLConnection http ; credentials pushApplicationId + ':' + masterSecret ; encoded Base64 encode ( credentials ( UTF ) ) ; http ( HttpURLConnection ) HttpRequestUtil post ( url, encoded, jsonPayloadObject, UTF, proxy, customTrustStore, connectionSettings ) ; statusCode http getResponseCode ( ) ; ( Level INFO, String format (HTTP Response code from UnifiedPush Server, ) ) ; (Redirect ( statusCode ) ) redirectURL http getHeaderField (Location ) ; ( Level INFO, String format (Perform redirect, redirectURL ) ) ; submitPayload ( redirectURL, pushConfiguration getConnectionSettings ( ), jsonPayloadObject, pushApplicationId, masterSecret, callback, redirectUrls ) ; } ( statusCode ) ( Level SEVERE,The Unified Push Server returned status code + ) ; new PushSender ( ) ; } ( callback ) callback onComplete ( ) ; } } } ( )he ; } ( ) { ( Level INFO, trying send push delivery request, ) ; new PushSenderException ( e ( ), e ) ; } ( http ) http disconnect ( ) ; } } }<CODESPLIT>The actual method that does the real send and connection handling
public String [ ] getChildNames ( ) { if ( children children size ( ) ) return EMPTYNAMES ; arr = children size ( ) ; ( = ; i < arr. ; i ) arr [ ] = ( ( RamResourceCore ) children ( ) ) getName ( ) ; } return arr ; }<CODESPLIT>Gibt den Feldnamen children zurueck .
public static Object getIndex ( Object array, int index ) throws UtilTargetError { Interpreter (getIndex array index index ) ; ( array List ) ( ( List ) array ) ( index ) ; val Array ( array index ) ; return Primitive. wrap ( val, Types. arrayElementType ( array. getClass ( ) ) ) ; } ) array? ( (? > ) array ) ( ) : Array getLength ( array ) ; new UtilTarget ( "Index " + index + " outofbounds length " + len, ) ; } }<CODESPLIT>Get object from array or list at index .
public static base_response add ( nitro_service client, aaakcdaccount resource ) throws Exception { aaakcdaccount addresource aaakcdaccount ( ) ; addresourceccount =ccount ; addresource keytab = keytab ; addresource realm = realm ; addresource delegateduser = delegateduser ; addresourcepassword = kpassword ; addresource user = user ; addresourceert =ert ; return addresource. add_resource ( client ) ; }<CODESPLIT>Use this API to add aaakcdaccount .
public synchronized void lockExclusive ( ) { ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr entry ( this, tc,lockExclusive, this ) ; interrupted ; ( tryLockExclusive ( ) ) ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this, tc,Waiting to exclusive lock ) ; wait ( 1000 ) ; } ( InterruptedException ) { interrupted ; } } (LockCount ) ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this, tc,Waiting for lock count to reach +LockCount ) ; wait ( 1000 ) ; } ( InterruptedException ) { interrupted ; } } ( interrupted ) Thread currentThread ( ) interrupt ( ) ; } ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this, tc,lockExclusive ) ; }<CODESPLIT>This method locks the mutex so no other lockers can get the lock .
public void setCPOptionValueLocalService ( com. liferay. commerce. product. service. CPOptionValueLocalService cpOptionValueLocalService ; }<CODESPLIT>Sets the cp option value local service .
public static inferModulePathFromType ( TypeDeclaration type )Declaration pkg getPackage ( ) ; pkg? + pkg getQualifiedName ( ) replace ( '.' ) : ; }<CODESPLIT>Infers the Struts module path from the given controller class .
final int getLeapMonth ( int cycle, int yearOfCycle ) { leapMonths = thisLeapMonths ( ) ; elapsedYears = ( cycle ) 60 + yearOfCycle ; index = 2 ( ( elapsedYears leapMonths ) 3 ) ; lm = ; ( ( index leapMonths ) ) test = leapMonths index ; if ( test elapsedYears ) index max ( 2 ( ( elapsedYears ) 3 ) 2 ) ; } if ( test elapsedYears ) ; } { lm = leapMonths index + ; ; } } return lm ; }<CODESPLIT>number of leap month or zero if no leap year
public Snippet getSnippet ( Integer snippetId, boolean downloadContent ) throws GitLabApiException { ( snippetId ) new RuntimeException ( "snippetId" ) ; } Response get ( Responsesnippets snippetId ) ; Snippet snippet readEntity ( Snippet ) ; ( downloadContent ) snippet setContent (ippetContent ( snippet getId ( ) ) ) ; } return snippet ; }<CODESPLIT>Get a specific Snippet .
public final int get ( int codePoint ) { value ; ix ; if ( codePoint >= ) { if ( codePointxd800 ( codePointxdbff codePointx ) ) { = index UTESHIFT ; ix = ( ix UTRIEINDEXSHIFT ) + ( codePoint & UTRIEDATA_MASK ) ; value = data ; return value ; } if ( codePointxffff ) { = index UTELSCPINDEXOFFSET + ( (xd800 ) UTESHIFT ) ; ix = ( ix UTRIE_INDEX_SHIFT ) + ( codePoint & UTRIE_DATA_MASK ) ; value = data ; return value ; } if ( codePoint highStart ) { ix = ( UTRIE_INDEX__OFFSET UTRIE_OMITTED_BMP_INDEX__LENGTH ) + ( codePoint UTRIE_SHIFT_ ) ; = index ; += ( codePoint UTE ) & UTEMASK ; = index ; ix = ( ix UTRIE_INDEX_SHIFT ) + ( codePoint & UTRIE_DATA_MASK ) ; value = data ; return value ; } if ( codePointx10 ) { value = data highValueIndex ; return value ; } } return errorValue ; }<CODESPLIT>Get the value for a code point as stored in the Trie2 .
public static Object getMBeanAttributeObject ( name attrName ) JM { MBeanServer serverBeanServer ( ) ; ObjectName ObjectName ( ; server getAttribute ( objName attrName ) ; }<CODESPLIT>Get MBean attribute object
public synchronized void setSelectedIndex ( final int selectedIndex ) { ( items ( ) selectedIndex selectedIndex ) new IndexOutOfBoundsException ( argument ComboBoxsetSelectedIndex + ) ; }Selection this ; this selectedIndex = selectedIndex ; ( selectedIndex ) updateText ( ) ; } update ( items ( selectedIndex ) ( ) ) ; } runOnGUIThreadIfExistsOtherwiseRunDirect ( new Runnable ( ) { void run ( ) { ( Listener listener listeners listener onSelectionChanged ( selectedIndexSelection ) ; } } } ) ; invalidate ( ) ; }<CODESPLIT>Programmatically selects one item in the combo box which causes the displayed text to change to match the label of the selected index .
public Stats getPhotoStats ( photoId Date date ) throws Flickr { getStats ( METHODGETPHOTOSTATSphotoid photoId date ) ; }<CODESPLIT>Get the number of views comments and favorites on a photo for a given date .
public ServiceCall < DocumentStatus > getDocumentStatus ( GetDocumentStatusOptions getDocumentStatusOptions ) { Validator notNull ( getDocumentStatusOptions,getDocumentStatusOptions cannot be null ) ; =venvironments,collections,documents } ; pathParameters = getDocumentStatusOptions environmentId ( ), getDocumentStatusOptions collectionId ( ), getDocumentStatusOptions documentId ( ) } ; RequestBuilder = RequestBuilder ( RequestBuilderUrl (Point ( ) pathParameters ) ) ; query (version, versionDate ) ; Map < > sdkHeaders = SdkCommon getSHeaders (discoveryvgetDocumentStatus ) ; ( < > sdkHeaders ( ) ) header ( header getKey ( ), header getValue ( ) ) ; } header (Accept,applicationjson ) ; return createServiceCall ( builder. build ( ), ResponseConverterUtils. getObject ( DocumentStatus. class ) ) ; }<CODESPLIT>Get document details .
public Pager Issue getClosesIssues ( Object projectIdOrPath Integer mergeRequestIid int itemsPerPage ) throws GitLabApiException { Pager < Issue > ( this Issue itemsPerPageprojects getProjectIdOrPath ( projectIdOrPath )mergerequests, mergeRequestIid,closesissues ) ; }<CODESPLIT>Get a Pager containing all the issues that would be closed by merging the provided merge request .
public static final void loge ( Class <? > clazz, String msg, Exception... e ) { ( DEBUG ) exceptionStr ; ( e e ) sw ( ) ; = ( sw ) ; e printStackTrace ( ) ; flush ( ) ; exceptionStr =exception = + sw toString ( ) ; } System err println ( "[" + sSdf format ( Date ( ) ) + "]" + + "[" + clazz getSimpleName ( ) + + msg + + exceptionStr ) ; } }<CODESPLIT>To output the error log message to the error out
public static HtmlTree TH ( HtmlStyle styleClass String scope Content body ) { HtmlTree html HtmlTree ( HtmlTag THCheck ( body ) ) ; ( style ) htmltree addStyle ( style ) ; htmltree ( Html SCOPECheck ( scope ) ) ; htmltree ; }<CODESPLIT>Generates a TH tag with style class and scope attributes and some content .
private void obtainDividerMargin ( final int themeResourceId ) { Typed typedArray ( ) getTheme ( ) obtainStyAttributes ( theme R attr materialDialogDividerMargin } ) ; setDividerMargin ( typedArray getDimensionPixel ( ) ) ; }<CODESPLIT>Obtains the left and right margin of dividers from a specific theme .
public void setDefaultButton ( SBaseButton button ) { getScreenView ( ) setDefault ( button button getScreenView ( ) ) ; }<CODESPLIT>Set the default button for this basepanel .
public Key select ( int k ) { ( k k ( root ) ) ( ) ; RedBlackTreeNode Key Value select ( root k ) ; return x getKey ( ) ; }<CODESPLIT>Return the kth smallest key in the symbol table .
public void add ( RequestHandler request ) { lock ( ) lock ( ) ;SessionRequests ( request ) ; } lock ( ) ( ) ; } }<CODESPLIT>Adds a request handler to this queue .
public static T T withPrintWriter ( OutputStream stream ClosureParams ( value SimpleType. class optionsjavaPrintWriter" ) Closure T closure ) throws IOException {Writer (PrintWriter ( ) closure ) ; }<CODESPLIT>Create a new PrintWriter for this OutputStream . The writer is passed to the closure and will be closed before this method returns .
public void addRegexRoute ( String urlPattern Class Actor actorClass ) throws RouteAlreadyMapped { addRoute ( Route (Pattern actor ) ; }<CODESPLIT>Add a URL pattern to the routing table .
public synchronized void sendQueuedEvents ( KeenProject project, KeenCallback callback ) { ( isActive ) handleLibraryInactive ( callback ) ; return ; } ( project defaultProject ) handleFailure ( IllegalStateException (No project specified no project ) ) ; return ; } (NetworkConnected ( ) ) KenLogging log (Not sending events no network connection +Events be retried time `sendQueuedEvents called ) ; handleFailure ( callback Exception (Network connected ) ) ; return ; } KeenProjectProject ( project?Project : project ) ; projectIdProject getProjectId ( ) ; Map < < > > eventHandles eventStoreHandles ( projectId ) ; Map < < Map < > > > events buildEventMap ( projectId eventHandles ) ; response publishAll (Project events ) ; ( response ) handleAddEventsResponse ( eventHandles, response ) ; } ( ) KenLogging log (Error handling response to batch publish + e getMessage ( ) ) ; } } handleSuccess ( callback ) ; } ( ) handleFailure ( callback, e ) ; } }<CODESPLIT>Synchronously sends all queued events for the given project . This method will immediately publish the events to the Keen server in the current thread .
public getMaxQueuedConnections ( ( )? : ( (ThreadPool ( ) getQueue ( ) ArrayBlockingQueue )? ( ( ArrayBlockingQueue )ThreadPool ( ) getQueue ( ) ) ( ) ( ( ArrayBlockingQueue )ThreadPool ( ) getQueue ( ) )Capacity ( ) : ) ;<CODESPLIT>this should only be used as an estimate
final public AuxiliaryTree TreeRoot ( boolean requiresFoot ) throws ParseException { SimpleNode jj SimpleNode ( JJTTREERO ) ; jjtc ; jjtree openNodeScope ( jj ) ; Tree ; t TreeNode ( ) ; jjtree closeNodeScope ( jj, ) ; jj = ; ( ) return new AuxiliaryTree ( t requiresFoot ) ; } } ( jj ) { ( jjtc ) jjtree clearNodeScope ( jj ) ; jj = ; } jjtree popNode ( ) ; } ( jjte RuntimeException ) ( ) ( RuntimeException ) jjte ; } } ( jjte ParseException ) ( ) ( ParseException ) jjte ; } } ( ) ( Error ) jjte ; } } ( jjtc ) jjtree closeNodeScope ( jj, ) ; } } new Error ( "Missing return statement in function" ) ; }<CODESPLIT>the argument says whether there must be a foot node on the aux tree .
INodeDirectory addToParent ( byte [ ] src, INodeDirectory parentINode, INode newNode, boolean propagateModTime, int childIndex ) { INodeDirectory newParent ; ( ) ; newParent rootDir addToParent ( src, newNode, parentINode,, propagateModTime, childIndex ) ; cacheName ( newNode ) ; } ( FileNotFoundException ) return null ; } ( newParent ) ; ( newNode isDirectory ( ) ) INodeFileF ( INodeFile ) newNode ; BlockInfo blocksFBlocks ( ) ; ( ; blocks ; )FBlock ( getFNames ( ) blocksMap addINodeForLoading ( blocksF ) ) ; } } } writeUnlock ( ) ; } return newParent ; }<CODESPLIT>Add node to parent node when loading the image .
public void setModel ( final MindMap model, final boolean notifyModelChangeListeners ) { this ( ) ; ( this elementUnderEdit ) Utils. safeSwingBlockingCall ( new Runnable ( ) { public void run ( ) {Edit ( ) ; } } ) ; } > selectedPaths > ( ) ; ( Topic this selectedTopics ) selectedPaths add ( t getPositionPath ( ) ) ; } this selectedTopics clear ( ) ; MindMapModel this model ; this model assertNotNull (Model be model ) ; ( PanelAwarePlugin MindMapPluginRegistry ( ) find ( PanelAwarePlugin class ) ) onPanelModelChange ( thisModel this model ) ; } doLayout ( ) ; revalidate ( ) ; selectionChanged ; ( posPath selectedPaths ) Topic topic this model findPositionPath ( posPath ) ; ( topic ) selectionChanged ; } ( MindMap isHidden ( topic ) ) this selectedTopics add ( topic ) ; } } ( selectionChanged ) fireNotificationSelectionChanged ( ) ; } repaint ( ) ; } this ( ) ; ( notifyModelChangeListeners ) fireNotificationMindMapChanged ( ) ; } } }<CODESPLIT>Set model for the panel allows to notify listeners optionally .
public OperationFuture LoadBalancer delete ( LoadBalancer loadBalancer ) LoadBalancerMetadata loadBalancerMetadata findBy ( loadBalancer ; loadBalancerClient delete ( loadBalancerMetadata getData ( loadBalancerMetadata ( ) ; OperationFuture > ( loadBalancer NoWaitingJobFuture ( ) ) ; }<CODESPLIT>Delete load balancer
public GetSnapshotResponse getSnapshot ( GetSnapshotRequest request ) { ( request ) ; checkString ( requestnapshotId ( ) snapshotId no be empty ) ; InternalRequest internalRequest this createRequest ( request Http GET SNAPSHOTPREFIX requestnapshotId ( ) ) ; return invokeHttpClient ( internalRequest, GetSnapshotResponse. ) ; }<CODESPLIT>Getting the detail information of specified snapshot .
@ SuppressWarnings ( "checkstyle:emptyblock" ) void excludeLoggers ( ) { { BugsnagAppender. addExcludedLoggerPattern (orgapachecatalcoreContainerBase." + "\\[Tomcat[[[ ) ; BugsnagAppender. addExcludedLoggerPattern (orgeclipsejettyserverHttpChannel ) ; BugsnagAppender. addExcludedLoggerPattern (ioundertowrequest" ) ; } ( NoClassDefFound ignored ) { } }<CODESPLIT>If using Logback stop any configured appender from creating Bugsnag reports for Spring log messages as they effectively duplicate error reports for unhandled exceptions .
public void subtract ( R1 relationships ) { if ( base ) { throw new AssertionError ( "" ) ; } ( = ; < base ; ) if ( base ) { ; } final IConceptSet set = data i = SparseConceptHashSet ( ) ; set addAll ( base i ) ; if ( relationships data i ) { set removeAll ( relationships data i ) ; } } }<CODESPLIT>This should only ever be called when the relationships wrap an initial state and no other methods have been called .
private static < E > E getEndpoint ( Class < E > type, String name, Reflections reflections ) { E result ; Set < Class <? E > > foundClasses reflection getSubTypes ( type ) ; Set < Class <? E > > endpointClasses HashSet < > ( ) ; ( Class < E clazzClasses ) ( isAbstract ( clazz ( ) ) ) endpointClasses add ( clazz ) ; } } Iterator < Class <? E > > iterator endpointClasses iterator ( ) ; ( iterator ( ) ) Class <? E > iterator ( ) ; (IgnoreCase ( next getName ( ),comgithubdavidcarbonirestolroutes ) ) iterator remove ( ) ; } } ( endpointClasses size ( ) ) ( endpointClasses size ( ) ) (Warning found multiple candidates for endpoint, name, endpointClasses ) ; } result = endpointClasses iterator ( ) ( ) newInstance ( ) ; } ( ) { (Error cannot instantiate endpoint, name, endpointClasses iterator ( ) ( ) ) ; e ( ) ; } } return result ; }<CODESPLIT>Locates a single endpoint class .
public final void writtenStartedFlush ( AOStream stream, Item startedFlushItem ) { if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr entry ( tc, "writtenStartedFlush ) ; String key = SIMPUtils getRemoteGetKey ( stream. getRemoteMEUuid ( ), stream. getGatheringTargetDestUuid ( ) ) ; StreamInfo sinfo = streamTable. get ( key ) ; if ( ( sinfo ) && sinfo streamId ( stream streamId ) ) { synchronized ( s ) { sinfo. item = ( AOStartedFlushItem ) startedFlushItem ; } } { e = new (. (INTERNALERROR, new ObjectsibprocessorAnycastOutputHandler",58" }, null ) ) ;. ( e,comsibprocessorimplAnycastOutputHandlerwrittenStartedFlush",12865141", this ) ; SibTr. exception ( tc, e ) ; SibTr. error ( tc,INTERNALERROR, new ObjectsibprocessorAnycastOutputHandler"," } ) ; if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr exit ( tc, "writtenStartedFlush, e ) ; throw e ; } if ( TraceComponent isAnyTracingEnabled ( ) && tc isEntryEnabled ( ) ) SibTr exit ( tc, "writtenStartedFlush ) ; }<CODESPLIT>Callback when the Item that records that flush has been started has been committed to persistent storage
public static List < Report > getDetailSubreports ( ReportLayout reportLayout ) { < Report > subreports < Report > ( ) ; Band band = reportLayout getDetailBand ( ) ; ( rows band getRow ( ) ; < rows ; ) List < BandElement > list band getRow ( ) ; ( list ( ) ; < ; ) BandElement = list ( ) ; ( ReportBandElement ) subreports add ( ( ( ReportBandElement ) be ) getReport ( ) ) ; } } } return subreports ; }<CODESPLIT>Get detail band subreports for a report layout
public ApiAppList getApiApps ( ) HelloSign { ApiAppList (Auth ( auth ) ( BASEURI + APIAPPURI ) asJson ( ) ) ; }<CODESPLIT>Retrieves a paged list of API apps for the authenticated account .
public void detachAgent ( Object pVm ) { ( pVm ) Class clazz pVm getClass ( ) ; Method method clazz getMethod (detach ) ; setAccessible ( ) ; method invoke ( pVm ) ; } } ( ) new Processing ( " detaching", e, options ) ; } ( ) new Processing ( " detaching", e, options ) ; } ( ) new Processing ( " detaching", e, options ) ; } }<CODESPLIT>Detach from the virtual machine
public ObjectGraph excludeClasses ( Class < >... classes ) { ( Class classes ) ( ) new NullPointerException ( "Null class allowed" ) ; } excludedClasses ( ) ; } return this ; }<CODESPLIT>Exclude any object that extends from these classes .
public void setSampling ( double min double max int total ) { this sampleMin = min ; this sample = ; thisSamples = total ; this scoresSamples ; }<CODESPLIT>Specifies how focal lengths are sampled on a log scale . Remember 1 . 0 = nominal length
private void calcProductAtVar ( int v, VarTensor prod, int excl1, int excl2 ) { ( nb ; nb bg numNT ( v ) ; nb ) ( nb excl nb excl ) ; } VarTensorMsg = msgs bg opposingT ( ) ; elemMultiply (Msg ) ; } }<CODESPLIT>Computes the product of all messages being sent to a node optionally excluding messages sent from another node or two .
protected ItemState findLastItemState ( QPath itemPath ) { ( itemAddStates ( ) ; ; ) ItemStatestate = itemAddStates ( ) ; if (state getData ( ) getQPath ( ) ( itemPath ) ) returnstate ; } return null ; }<CODESPLIT>Find last ItemState .
public void addDispatcher ( String dispatcherId AbsActorDispatcher dispatcher ) { ( dispatch ( dispatch ( dispatcherId ) ) ; } dispatch put ( dispatcher dispatcher ) ; } }<CODESPLIT>Registering custom dispatcher
private void sgdTrain ( ClassificationDataSet D, MatrixOfVecs W, Vec b, int sign_mul, boolean parallel ) { IntList order = IntList ( D size ( ) ) ; List addRange ( order,, D size ( ), ) ; final double lambdaadj = lambda ( D size ( ) epochs ) ; owned = K ; assignedpositiveinstances = ; assignments = D size ( ) ; Arrays fill ( assignments, ) ; Vec dots = DenseVector ( W rows ( ) ) ; t = ; ( epoch = ; epoch < epochs ; epoch ) Collections shuffle ( order ) ; ( i order ) t ; eta = ( lambdaadj t ) ; Vec xi = D getDataPoint ( i ) getNumericalValues ( ) ; y = ( D getDataPointCategory ( i ) 2 ) sign ; b copyTo ( dots ) ; W multiply ( xi,, dots ) ; if ( yi ) { ( k = ; k < K ; k ) if (. ( k ) > ) W getRowView ( k ) mutableSubtract ( eta, xi ) ; b increment ( k, eta ) ; } } { kmax = ; ( k = ; k <. ( ) ; k ) if (. ( k ) >. ( k__max ) ) k__max = k ; if (. ( k__max ) < ) z = ASSIGN ( dots, i, kmax, owned, assignments, assignedpositiveinstances ) ; W getRowView ( z ) mutableAdd ( eta, xi ) ; b increment ( z, eta ) ; if ( assignments i ) assignedinstances ; owned assignments i -- ; z ; assignments = z ; } } W mutableMultiply ( t ) ; b mutableMultiply ( t ) ; } } }<CODESPLIT>Training procedure that can be applied to each version of the CPM sub - problem .
public static appfwfieldtype get ( nitro_service service ) throws Exception { appfwfieldtype appfwfieldtype ( ) ; appfwfieldtype ( appfwfieldtype )resources ( service ) ; ; }<CODESPLIT>Use this API to fetch all the appfwfieldtype resources that are configured on netscaler .
public Future < Channel create ( final Promise < Channel channelReadyPromise ) { delay thisSeconds ( ) ; channelReadyPromise. addListener ( new GenericFutureListener < Future < Channel ( ) { public void operationComplete ( final Future < Channel > future ) { updated future ( )? : ( ( delayCONNECT ) MINCONNECT ) ; ApChannel thisDelay compareAndSet ( delay updatedDelay ) ; } } ) ; this. bootstrapTemplate. config ( ). group ( ). schedule ( new Runnable ( ) { public void run ( ) { Bootstrap bootstrap ApnsChannel this bootstrapTemplate clone ( ) channel ( AugmentReflectChannel ( ClientChannelChannel ( ApnsChannel this bootstrapTemplate ( ) group ( ) ) CHANNELPROSEATTRIBUTE channelReadyPromise ) ) ; ChannelFuture connectFuture bootstrap connect ( ) ; connectFuture. addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { ( future ( ) )Failure ( channelPromise ( ; } } } ) ; connectFuture. channel ( ). closeFuture ( ). addListener ( new GenericFutureListener < ChannelFuture > ( ) { public void operationComplete ( final ChannelFuture future ) { channelReadyPromise tryFailure ( (Channel closed HTTP pre completed ) ) ; } } ) ; } } delay ) ; return channelReadyPromise ; }<CODESPLIT>Creates and connects a new channel . The initial connection attempt may be delayed to accommodate exponential back - off requirements .
public static List < String > loadOptions ( String optionFileName ) { List < > args < > ( ) ; File optionFile File ( optionFileName ) ; stringWriter ( ) ; InputStream inputStream FileInputStream ( optionFile ) ; copy ( inputStream, stringWriter ) ; } ( FileNotFoundException ) { System (Error reading options file + e ( ) ) ; System exit ( ) ; } ( IOException ) { System (Error reading options file + e ( ) ) ; System exit ( ) ; } string stringWriter toString ( ) ; stringTokenizer ( string ) ; ( string ( ) ) args add ( stringTokenizer nextToken ( ) ) ; } return args ; }<CODESPLIT>Load options from a file
public void runJob ( ) { thisJob this jobQueue take ( ) ; ExecutionContext context ExecutionContext ( ) ; this executionContextManager initialize ( context ) ; } ( Execution ) new RuntimeException ( " initialize Job " + this currentJob + " execution context", e ) ; } thisJob run ( ) ; } ( ) } this execution removeContext ( ) ; } }<CODESPLIT>Execute one job .
public Response bind ( String name Object model ) { ( ) ( model ) ; this ; }<CODESPLIT>Binds an object to the response .
public byte [ ] getByteArray ( Integer offset ) { byte ; ( offset ) m_map ( offset ) ; } return ( result ) ; }<CODESPLIT>This method retrieves a byte array containing the data at the given offset in the block . If no data is found at the given offset this method returns null .
public Object [ ] getMetaMethods ( ) { MetaClass metaClass InvokerHelper getMetaClass ( objectUnderInspection ) ; metaMethods metaClass getMetaMethods ( ) ; Object result Object metaMethods size ( ) ; ; ( Iterator metaMethods ( ) ; ( ) ; ) MetaMethod metaMethod ( MetaMethod ) iter ( ) ; i methodInfo ( metaMethod ) ; } return result ; }<CODESPLIT>Get info about instance and class Methods that are dynamically added through Groovy .
static long [ ] parse ( String pollers ) { periods = pollers split (s*" ) ; result = periods ; errors = ; Logger = LoggerFactory getLogger ( Pollers class ) ; ( = ; < periods. ; i ) period = periods i ; { result i = Long parseLong ( period ) ; if ( result i ) { error ( "Invalid polling interval must positive, period ) ; errors = ; } } ( NumberFormatException e ) { error ( "Cannot parse '{}' as a long, period, e getMessage ( ) ) ; errors = ; } } if ( errors periods ) { ( "Using a default configuration for poller intervals, join ( DEFAULTPERIODS ) ) ; return DEFAULT_PERIODS ; } { return result ; } }<CODESPLIT>Parse the content of the system property that describes the polling intervals and in case of errors use the default of one poller running every minute .
public void setFooter ( String key, String value ) { Objects requireNonNull ( value ) ; = ;Footer = ; ( _footerKeys ( ) ; ; ) oldKey = _footerKeys ( ) ; ( oldKey ( key ) ) (Footer ) _footerKeys remove ( i ) ; _footerValues remove ( i ) ; }Footer = ; _footerValues ( i, value ) ; } } } (Footer ) _footerKeys add ( key ) ; _footerValues add ( value ) ; } }<CODESPLIT>Sets a footer replacing an already - existing footer
public void addAttribute ( String name, final String value ) { ( melemContext mstartTagOpen ) patched patch ( name ) ; localName getLocalName ( patched ) ; uri getNamespaceURI ( patched ) ; addAttributeAlways ( uri localName patchedName,CDATA, value, ) ; } }<CODESPLIT>Adds the given attribute to the set of collected attributes but only if there is a currently open element .
public MimeMessage createMimeMessage ( Session session ) throws MessagingException { ( ( htmlPart ) ( textPart ) ) new IllegalArgumentException (Missing email content" ) ; } MimeMessage MimeMessage ( session ) ; setSubject ( subject ) ; ( Internet ( ) ) ; setContent (MultiPart ( ) ) ;Recipients ( Message TO InternetAddress parse ( recipients ) ) ; return msg ; }<CODESPLIT>Creates a MimeMessage containing given Multipart . Subject sender and content and session will be set .
public static ForwardCurveInterpolation createForwardCurveFromMonteCarloLiborModel ( String name, LIBORModelMonteCarloSimulationModel model, double startTime ) throws CalculationException { timeIndex model getTimeIndex ( startTime ) ; < RandomVariable > liborsAtTimeIndex < > ( ) ;LibIndex modelLibPeriodDiscretization ( ) getTimeIndexNearestGreater ( startTime ) ;LibTime modelLibretization ( ) getTime (LibIndex ) ; ( firstLibTime startTime ) libAtTimeIndex add ( modelLIBOR ( startTime startTimeLibTime ) ) ; } timesLibTime startTime? ( model getNumberOfLibors ( )LibIndex ) : ( model getNumberOfLibors ( )LibIndex + ) ; times = ; indexOffset firstLibTime startTime? : ; ( firstLibIndex ; < modelLibors ( ) ; ) libAtTimeIndex add ( modelLIBOR ( timeIndex ) ) ; timesLibIndex + index ] modelLibretization ( ) getTime ( ) startTime ; } RandomVariable libors liborsAtTimeIndex ( RandomVariable liborsAtTimeIndex ( ) ) ; return ForwardCurveInterpolation. createForwardCurveFromForwards ( name, times, libors, model. getLiborPeriodDiscretization ( ). getTimeStep ( firstLiborIndex ) ) ; }<CODESPLIT>Create a forward curve from forwards given by a LIBORMonteCarloModel .
public ServiceCall < Void > deleteWord ( DeleteWordOptions deleteWordOptions ) { Validator notNull ( deleteWordOptions,deleteWordOptions cannot be ) ;vcustomizations,words } ; pathParameters deleteWordOptions customizationId ( ), deleteWordOptions word ( ) } ; RequestBuilder = RequestBuilder delete ( RequestBuilder constructHttpUrl ( getEndPoint ( ),, pathParameters ) ) ; Map < > sdkHeadersCommon getSHeaders (texttopeechvdeleteWord ) ; ( < > sdkHeaders ( ) ) header ( header getKey ( ), header getValue ( ) ) ; } return createServiceCall ( builder. build ( ), ResponseConverterUtils. getVoid ( ) ) ; }<CODESPLIT>Delete a custom word .
private boolean tryMove ( float x, float y ) {x playerX + x ; player + y ; ( blocked ( new, new ) ) ( blocked ( new, player ) ) ( blocked ( playerX, new ) ) return false ; } playery ; return true ; } } playerXx ; return true ; } } playerXx ; playery ; return true ; } }<CODESPLIT>Try to move in the direction specified . If it s blocked try sliding . If that doesn t work just don t bother
public void recover ( ) { messages clear ( ) ; this dataLogger prepareRead ( ) ; this dataLogger recover ( this ) ; } ) new DelegatedRuntimeException ( ) ; } }<CODESPLIT>recovers the dataRecorder all messages are removed and all the messsages of the logger are recoverd
public void clearSources ( ) { (AudioSources ( GVRAudioSource sourceAudioSources source ( ) ; }AudioSources clear ( ) ; } }<CODESPLIT>Remove all of the audio sources from the audio manager . This will stop all sound from playing .
@ ( "" ) public static < V extends NumberVector > NumberVector. Factory < V > guessFactory ( SimpleTypeInformation < V > in ) { NumberVector Factory < V > factory ; ( in VectorInformation ) factory ( NumberVector Factory < V ) ( ( VectorInformation < V ) in ) getFactory ( ) ; } ( factory ) Field f inClass ( ) getField (FACTORY ) ; factory ( NumberVector Factory V ) f ( ) ; } ( ) LoggingUtil (Cannot determine factory type + inClass ( ) ) ; } } return factory ; }<CODESPLIT>Try to guess the appropriate factory .
public void balance ( ) { ( rootDir exists ( ) ) rootDir mkdirs ( ) ; ( rootSaveDir exists ( ) ) rootSaveDir mkdirs ( ) ; ( paths ) paths = Maps newHashMap ( ) ; ( labelRootDirs ) labelRootDirs = ( ) ; ( ; < numLabels ; ) paths put ( < File > ( ) ) ; labelRootDirs add ( File ( rootDir valueOf ( ) ) ) ; } ( dataSet ( ) ) DataSet next = dataSetIterator next ( ) ; if ( miniBatchSize ) miniBatchSize = next numExamples ( ) ; ( ; < next numExamples ( ) ; ) DataSet currExample = next ( ) ; if ( labelRootDirs ( currExample outcome ( ) ) exists ( ) ) labelRootDirs ( currExample outcome ( ) ) mkdirs ( ) ; File example = File ( labelRootDirs ( currExample outcome ( ) ) valueOf ( paths ( currExample outcome ( ) ) size ( ) ) ) ; currExample save ( example ) ; paths ( currExample outcome ( ) ) add ( example ) ; } } numsSaved = ; ( paths ( ) ) List < DataSet > miniBatch = < > ( ) ; ( miniBatch size ( ) miniBatchSize paths ( ) ) ( ; < numLabels ; ) if ( paths ( ) paths ( ) ( ) ) DataSet d = DataSet ( ) ; d load ( paths ( ) remove ( ) ) ; miniBatch add ( d ) ; } paths remove ( ) ; } } if ( rootSaveDir exists ( ) ) rootSaveDir mkdirs ( ) ; if ( miniBatch ( ) ) DataSet merge = DataSet merge ( miniBatch ) ; if ( dataNormalization ) dataNormalization transform ( merge ) ; merge save ( File ( rootSaveDir format (datasetbin numsSaved ) ) ) ; } } }<CODESPLIT>Generate a balanced dataset minibatch fileset .
private static boolean isunixtimeleap ( double unixTime ) { gps = unix ; gpsleaps ( gps ) ; return isleap ( gpsTime ) ; }<CODESPLIT>Test to see if a unixtime second is a leap second
public static void setSunXMLHeaders ( Marshaller aMarshaller final String sXMLHeaders ) {PropertyName SUNXMLHEADERS ;Property (MarshallerPropertyNameXMLHeaders ) ; }<CODESPLIT>Set the Sun specific XML header string .
private void sendKeepAliveBridgeMessage ( int appId, String bridgeId, String token, final CallStatsHttp2Client httpClient ) { apiTS System ( ) ; BridgeKeepAliveMessage message BridgeKeepAliveMessage ( bridgeId apiTS ) ; requestMessage toJson ( message ) ; httpClient. sendBridgeAlive ( keepAliveEventUrl, token, requestMessageString, new CallStatsHttp2ResponseListener ( ) { public void onResponse ( Response response ) {Status code ( ) ; BridgeResponse keepAliveResponse ; body ( ) string ( ) ; keepAliveResponse gson fromJson (String BridgeKeepAliveResponse ) ; } ) e ( ) ; new RuntimeException ( e ) ; } ( Json ) (Json Syntax Exception + ( ), ) ; e ( ) ; new RuntimeException ( e ) ; } httpClientDised ( ) ; ( CallStatsResponse RESPONSESTATUSSUCCESS ) keepAliveStatusListener onSuccess ( ) ; } ( CallStatsResponse INVALIDAUTHENTICTOKEN ) stopKeepAliveSender ( ) ; keepAliveStatusListener onKeepAliveError ( CallStatsErrors AUTH keepAliveResponse getMsg ( ) ) ; } httpClientDised ( ) ; } } public void onFailure ( Exception e ) { (Response exception + ( ) ) ; httpClientDised ( ) ; } } ) ; }<CODESPLIT>Send keep alive bridge message .
public StreamingOutput getResource ( final String resourceName, final long nodeId, final Map < QueryParameter, String queryParams ) throws JaxRxException { final StreamingOutput sOutput = new StreamingOutput ( ) { void write ( final OutputStream output ) throws IOException, JaxRxException { revision queryParams ( QueryParameter REVISION ) ; wrap queryParams ( QueryParameter WR ) ; doNodeId queryParams ( QueryParameter OUTPUT ) ; wrap ( wrap )? : wrap ( Y ) ; nodeid ( doNodeId )? : doNodeId ( Y ) ; rev revision? : ( revision ) ; serialize ( resourceName nodeId rev node output wrapResult ) ; } } ; return sOutput ; }<CODESPLIT>This method is responsible to deliver the whole XML resource addressed by a unique node id .
public static ManagedEntity [ ] createManagedEntities ( ServerConnection sc, ManagedObjectReference [ ] mors ) { ( mors ) return new ManagedEntity [ 0 ] ; } ManagedEntity mes ManagedEntity mors ; ( ; < mors ; ) mes createExactManagedEntity ( sc, mors ) ; } return mes ; }<CODESPLIT>Given a ServerConnection and an array of MORs return an array of MEs
public static Function < String, String > createStringTemplateSource ( I_CmsFormatterBean formatter, Supplier < CmsXmlContent > contentSupplier ) { return key -> ; ( formatter ) formatter getAttributes ( ) ( key ) ; } ( ) CmsXmlContent content contentSupplier ( ) ; ( content ) content getHandler ( ) getParameter ( key ) ; } } return ; } ; }<CODESPLIT>Helper method to create a string template source for a given formatter and content .
private static final ByteBuffer createReadWriteMessage ( final byte opCode final int logicalBlockAddress, final short transferLength ) { ByteBufferdb ByteBuffer allocate (CDB ) ;db put ( opCode ) ; cdb position (BLOCK ) ;db ( logicalBlock ) ;db position ( TRANSFER ) ;db put ( transfer ) ;db rewind ( ) ; return cdb ; }<CODESPLIT>Creates the Command Descriptor Block for a given Operation Message .
public long read ( ByteBuffer [ dsts int offset int length ) throws IOException { fillApp ( ) ; ( ; } ByteBuffers move ( appRead, dst, offset, length ) ; }<CODESPLIT>Reads ByteBuffer from peer . Starts handshaking if needed .
public static void setInt ( MemorySegment [ ] segments int offset int value ) { (Segment ( segments offset 4 ) ) segments ( offset value ) ; } setIntMultiSegments ( segments offset value ) ; } }<CODESPLIT>set int from segments .
public Optional User getOptionalUser ( username ) ( Optional ( getUser ( username ) ) ) ; } GitLabApiException gl ( GitLabApi createOptionalFromException ( glae ) ) ; } }<CODESPLIT>Lookup a user by username and return an Optional instance .
protected void registerRateLimiterComponent ( ) { componentPropName = GatewayConfigProperties COMPONENTPREFIX + IRateLimiterComponent class getSimpleName ( ) ; setConfigProperty ( componentPropName, ESRateLimiterComponent class getName ( ) ) ; setConfigProperty ( componentPropName +clienttype,jest ) ;Property ( component +protocol, "${apimanesprotocol ) ;Property ( component +host, "${apimaneshost ) ;Property ( component +", "${apimanes ) ;Property ( component +username", "${apimanesusername ) ;Property ( component +password", "${apimanespassword ) ; }<CODESPLIT>The rate limiter component .
public Point3d getCoordinatesFromGridPoint ( int gridPoint ) { dimCounter = ; Point3d point = Point3d (,, ) ; ( z = ; z < grid. ; z ) ( = ; < grid. ; ) ( = ; < grid. ; x ) if ( dimCounter gridPoint ) { point x = minx + latticeConstant x ; point y = min + latticeConstant y ; point z = min + latticeConstant z ; return point ; } dimCounter ; } } } return point ; }<CODESPLIT>Method calculates coordinates from a given grid array position .
public void setColor ( final Color COLOR ) { ( color ) = COLOR ; } color ( COLOR ) ; } }<CODESPLIT>Defines the color that will be used to colorize the section in a clock .
public void releaseEvent ( EventId eventId ) throws Exception { Lock V eventWrapper shared getEvent ( eventId ) ; (Wrapper ) (Wrapper release ( ) ) shared removeEvent ( eventId ) ; } shared upsertEvent ( eventId eventWrapper ) ; } } }<CODESPLIT>Decreases the reference counter for the given event so that it can be removed once the reference counter reaches 0 .
public String toSql ( boolean showParameters ) { sql ; ( forPaginator ) sql = metaModel getDialect ( ) formSelect (,, fullQuery, orderBy, limit, offset ) ; } sql fullQuery? fullQuery : metaModel getDial ( ) formSelect ( metaModel getTableName ( ) subQuery orderBy limit offset ) ; } ( showParameters ) ( sql ) ( parameters ) ; join (, params, ) ; sql = toString ( ) ; } return sql ; }<CODESPLIT>Use to see what SQL will be sent to the database .
private Source getSourceFromUriResolver ( StylesheetHandler handler ) throws TransformerException { Source ; TransformerImpl processor handlerStylesheetProcessor ( ) ; URIResolver uri processor getURIResolver ( ) ; ( uri href getHref ( ) ; base handler getBaseIdentifier ( ) ; uri resolve ( href base ) ; } s ; }<CODESPLIT>Get the Source object for the included or imported stylesheet module obtained from the user s URIResolver if there is no user provided URIResolver null is returned .
public String getTitle ( ) { ( Journal featOkTst ( ( Journal ) jcasType ) casFeattitle ) jcasType jcas throwFeatMissing (titledejulielabtypesJournal ) ; return jcasType. ll_cas. ll_StringValue ( addr, ( ( Journal_Type ) jcasType ). casFeatCode_title ) ; }<CODESPLIT>getter for title - gets Full journal title C
public static Val of ( Object o ) { ( Val ) Cast as ( o ) ; } Val ( o ) ; }<CODESPLIT>Convenience method for creating a Convertible Object
protected void addContextTerms ( SparseDoubleVector meaning, Queue < String > words, int distance ) { ( term words ) ( term ( IteratorFactory EMPTYTOKEN ) ) dimension basis ( term ) ; ( dimension ) ; meaning ( dimension weight weight ( distance, windowSize ) ) ; distance ; } } }<CODESPLIT>Adds a feature for each word in the context that has a valid dimension . Feature are scored based on the context word s distance from the focus word .
public ArrayList < View > getViews ( ) { ( commandLogging ) d ( config commandLoggingTaggetViews ) ; } return viewFetcher. getViews ( null, ) ; } ) ( ) ; return null ; } }<CODESPLIT>Returns an ArrayList of all the View objects located in the focused Activity or Dialog .
private < E WeightedEdge SparseDoubleVector getVertexWeightVector ( WeightedGraph < E g int vertex ) { ( keepWeightVectors ) SparseDoubleVector weight vertexWeightVector ( vertex ) ; ( weightVec ) ( weight vertexWeightVector ( vertex ) ; ( weightVec ) weightVec computeWeightVector ( vertex ) ; vertexWeightVector ( vertex weightVec ) ; } } } weightVec ; } computeWeightVector ( g vertex ) ; }<CODESPLIT>Returns the normalized weight vector for the specified row to be used in edge comparisons . The weight vector is normalized by the number of edges from the row with positive weights and includes a weight for the row to itself which reflects the similarity of the keystone nod .
static int fillRows ( Row [ ] rows, TypeDescription schema, VectorizedRowBatch batch, int [ ] selectedFields ) { rows min ( ( ) batch count ( ) rows ) ; List < TypeDescription > fieldTypes schema getChildren ( ) ; ( field ; field < selectedFields ; field ) orc = selectedFields field ; readField ( rows field fieldTypes (c ) batch cols [c ] rowsToRead ) ; } return rowsToRead ; }<CODESPLIT>Fills an ORC batch into an array of Row .
public List ICalProperty getProperties ( T component ICalProperty > ( component getProperties ( ) values ( ) ) ;<CODESPLIT>Gets the properties to marshal . Child classes can override this for better control over which properties are marshalled .
public static double computeTauAndDivide ( final int j, final int numRows, final double [ ] u, final double max ) { tau = ; ( ; < numRows ; ) = u /= max ; tau ; } tau = sqrt ( tau ) ; ( u j ) tau = tau ; return tau ; }<CODESPLIT>Normalizes elements in u by dividing by max and computes the norm2 of the normalized array u . Adjust the sign of the returned value depending on the size of the first element in u . Normalization is done to avoid overflow .
public Epic getEpic ( String epicKey, Map < String, Epic > epicMap ) { url featureSettings getJiraBaseUrl ( ) + ( featureSettings getJiraBaseUrl ( ) ( )? : ) + format ( EPICREST epKey ) ; ResponseEntityEntity makeRestCall ( url ) ; responseBodyEntity getBody ( ) ; JSONObject issue ( JSONObject ) parser parse ( responseBody ) ; ( issue ) return null ; } return saveEpic ( issue, epicMap, ) ; } ParseException ) (Parser exception when parsing teams pe ) ; } Hygia ) (Error calling JIRA API ) ; } return null ; }<CODESPLIT>Get Epic using Jira API
public Serializable getLayoutConstraints ( WComponent child ) { PanelModel model getComponentModel ( ) ; ( model layoutConstraints model layoutConstraints ( child ) ; } ; }<CODESPLIT>Retrieves the layout constraints for the given component if they have been set .
public Map < String, Set < String > > getReverseMap ( ) { Set < Map Entry <, Set < > > > entries map ( ) ; Map < Set < > > rMap < Set < > > ( entries ( ) ) ; ( Map < Set < me entries ) k me getKey ( ) ; Set < > transList me ( ) ; ( trans transList ) Set < > entry rMap ( trans ) ; ( ) Set < > LinkedHashSet < > ( 6 ) ; toAdd add ( k ) ; rMap put ( trans, toAdd ) ; } entry add ( k ) ; } } } return rMap ; }<CODESPLIT>Returns a reversed map of the current map .
public Credential setRefreshToken ( String refreshToken ) { lock lock ( ) ; { if ( refreshToken ) Preconditions checkArgument ( jsonFactory transport clientAuthentication tokenServerEncodedUrlPlease use the Builder and callJsonFactoryTransport setClientAuthentication + andServerUrlsetTokenServerEncodedUrl ) ; } this refreshToken = refreshToken ; } { lock unlock ( ) ; } return this ; }<CODESPLIT>Sets the refresh token .
public void makeCurrent ( EGLSurface eglSurface ) { ( mEGLDisplay EGL14 EGLDISPLAY ) d ( TAG makeCurrent wo display ) ; } ( EGL14MakeCurrent ( mEGLDisplaySurfaceSurface mEGLContext ) ) new RuntimeException ( "eglMakeCurrent" ) ; } }<CODESPLIT>Makes our EGL context current using the supplied surface for both draw and read .
public static T T navigateSafe ( T defaultValue Object source Object... paths ) navigateOrDefault ( defaultValue source paths ) ; }<CODESPLIT>Use navigateOrDefault which is a much better name .
public void clearCache ( CommerceWarehouseItem commerceWarehouseItem ) { entityCache removeResult ( CommerceWarehouseItemModelImpl ENTITYCACHEENABLED CommerceWarehouseItemImpl commerceWarehouseItem getPrimaryKey ( ) ) ; finderCache clearCache ( FINDERCLASSNAMEIN ) ; finderCache clearCache ( FINDERCLASSNAMELISTIN ) ; clearUniqueFindersCache ( ( CommerceWarehouseItemModelImpl ) commerceWarehouseItem ) ; }<CODESPLIT>Clears the cache for the commerce warehouse item .
private void process ( String input, String output ) throws MPXJException, IOException { MPPReader reader MPPReader ( ) ; mproject reader read ( input ) ; varDataFileName ; projectDirName ; mppFileType Number ( mproject getProjectProperties ( ) getMFileType ( ) ) ; ( mp ) projectDirName = ;Data =FixDeFix ; ; } projectDirName = ;Data =VarData ; ; } projectDirName = ;Data =VarData ; ; } projectDirName = ;Data =VarData ; ; } : new IllegalArgumentException ( "Unsupported file type " + mp ) ; } } FileInputStream FileInputStream ( input ) ; POIFSFileSystem fs POIFSFileSystem ( ) ; close ( ) ; DirectoryEntry root fs getRoot ( ) ; mprojectDir ( DirectoryEntry ) root getEntry ( projectDirName ) ; Map < > replacements < > ( ) ; ( Task task mprojectTasks ( ) ) mapText ( task getName ( ) replacements ) ; } processReplacements ( ( ( DirectoryEntry ) mprojectDir getEntry (TBkTask ) ) varDataFileName replacements ) ; replacements clear ( ) ; ( Resource resource mproject getResources ( ) ) mapText ( resource getName ( ) replacements ) ; mapText ( resource getInitial ( ) replacements ) ; } processReplacements ( ( DirectoryEntry ) mprojectDir getEntry (TBkRsc ) varDataFileName replacements ) ; replacements clear ( ) ; ProjectProperties properties mproject getProjectProperties ( ) ; mapText ( properties getProjectTitle ( ) replacements ) ; processReplacements ( mprojectDirProps replacements ) ; replacements clear ( ) ; mapText ( properties getProjectTitle ( ) replacements ) ; mapText ( properties getSubject ( ) replacements ) ; mapText ( propertiesAuthor ( ) replacements ) ; mapText ( properties getKeywords ( ) replacements ) ; mapText ( propertiesComments ( ) replacements ) ; processReplacements ( rootSummaryInformation replacements ) ; replacements clear ( ) ; mapText ( properties getManager ( ) replacements ) ; mapText ( properties ( ) replacements ) ; mapText ( properties getCategory ( ) replacements ) ; processReplacements ( rootDocumentSummaryInformation replacements ) ; os ( output ) ; fs writeFilesystem ( os ) ; os flush ( ) ; os close ( ) ; fs close ( ) ; }<CODESPLIT>Process an MPP file to make it anonymous .
public void setRollbackOnly ( ) { = TraceComponent isAnyTracingEnabled ( ) ; ( tc ( ) ) Tr entry ( tc,setRollbackOnly, this ) ; } LocalTransactionCoordinator lCoord = getLocalCoord ( ) ; ( lCoord ) lCoordRollbackOnly ( ) ; }ServiceRollbackOnly ( ) ; } ( e ) { (, CLASS_ +setRollbackOnly,, this ) ; throw new IllegalStateException ( "No active transaction" ) ; } } ( tc ( ) ) Tr exit ( tc,setRollbackOnly ) ; } }<CODESPLIT>Marks the current local or global transaction to be rolled back
private static boolean analyse404Response ( final String content ) { ( content ( "\"reason\":missing\"" ) ) return true ; } (Design document error content ) ; return ; }<CODESPLIT>Analyses the content of a 404 response to see if it is legible for retry .
private ListenableFuture < > writeBlocksToTargets ( Collection < DBBPool. BBContainer > outputBuffers, int [ ] serialized ) { ( mtableTasks size ( ) serialized ) ; ( outputBuffers size ( ) serialized ) ;enableFuture? > > writeFutures <enableFuture <? > > ( outputBuffers ( ) ) ; Iterator DBBPool BBContainer container outputBuffers iterator ( ) ; serializedIndex ; ( SnapshotTableTask task mtableTasks ) DBBPool BBContainer container container ( ) ; ByteBuffer buf container ( ) ; limit ( serialized serializedIndex + task mtarget getHeaderSize ( ) ) ; position ( ) ; Callable DBBPool BBContainer valueForTarget Callables returning ( container ) ; ( task mfilters ) ( SnapshotDataFilter filter task mfilters ) valueForTarget filter filter ( valueForTarget ) ; } }enableFuture <? > writeFuture task mtarget write ( valueTarget mtableId ) ; ( writeFuture ) writeFutures add ( writeFuture ) ; } } return F. allAsList ( writeFutures ) ; }<CODESPLIT>Finalize the output buffers and write them to the corresponding data targets
private boolean isTerminal ( IAtom atom Map < IAtom Integer atomToIndex ) { graph atom get ( atom ) length ; }<CODESPLIT>Is the atom terminal having only one connection .
private Handler < AsyncResult < Void > > createUndeployHandler ( final Message < JsonObject > message ) { return new Handler < AsyncResult < Void > > ( ) public void handle ( AsyncResult < Void > result ) { ( ( ) ) message reply ( JsonObject ( ) (statuserror ) ( ( ) getMessage ( ) ) ) ; } message reply ( JsonObject ( ) (status ) ) ; } } } ; }<CODESPLIT>Creates a platform undeploy handler .
public PhotoAllContext getAllContexts ( String photoId ) throws FlickrException { PhotoSetList < PhotoSet >List PhotoSetList < PhotoSet > ( ) ; PoolList < Pool > poolList PoolList < Pool > ( ) ; PhotoAllContext allContext PhotoAllContext ( ) ; Map < Object > parameters < Object > ( ) ; parameters put (method, METHODGETALLCONTEXTS ) ; parameters put (photoid, photoId ) ; response = transport ( transport getPath ( ) parameters shared ) ; ( response ( ) ) new FlickrException ( response ( ), response ( ) ) ; } Collection < Element > photosElement response getPayloadCollection ( ) ; ( Element photosElement ) (TagName ( ) (set ) ) PhotoSet pset PhotoSet ( ) ; pset setTitle ( setElement (title ) ) ; psetSecret ( setElement ( ) ) ; pset setId ( setElement (id ) ) ; pset setF ( setElement ( ) ) ; psetPrimary ( setElement ( ) ) ; psetServer ( setElement (server ) ) ; pset setViewCount ( Integer ( setElement (view_count ) ) ) ; psetCommentCount ( Integer ( setElement getAttribute (comment_count ) ) ) ; pset setCountPhoto ( Integer ( setElement getAttribute (count_photo ) ) ) ; pset setCountVideo ( Integer ( setElement getAttribute (count_video ) ) ) ; setList add ( pset ) ; allContextPhotoSetList (List ) ; } (TagName ( ) (pool ) ) Pool pool Pool ( ) ; pool setTitle ( setElement getAttribute (title ) ) ; pool setId ( setElement getAttribute (id ) ) ; pool setUrl ( setElement getAttribute (url ) ) ; pool setIconServer ( setElement getAttribute (iconserver ) ) ; pool setIconF ( setElement getAttribute (icon ) ) ; poolMemberCount ( Integer ( setElement getAttribute ( ) ) ) ; poolPoolCount ( Integer ( setElement getAttribute (pool_count ) ) ) ; poolList add ( pool ) ; allContextPoolList ( poolList ) ; } } return allContext ; }<CODESPLIT>Returns all visble sets and pools the photo belongs to .
public Map < String, Object > getFieldData ( Map < String, Object > properties ) { Map < Object > propReturn ; ( properties ) propReturn Hashtable < Object > ( ) ; ( ; ; ) strFieldNumber DBParams FIELD + Integer toString ( ) ; strFieldName ( ) properties ( strFieldNumber ) ; ( strFieldName ) ; Record record this getMainRecord ( ) ; ( strFieldName ( '.' ) ) record this getRecord ( strFieldName (, strFieldName ( '.' ) ) ) ; strFieldName strFieldName substring ( strFieldName ( '.' ) + ) ; } BaseField field ; ( record ) field = record getField ( strFieldName ) ; ( field ) propReturn put ( strFieldNumber, field getData ( ) ) ; } } return propReturn ; }<CODESPLIT>GetFieldData Method .
protected void connect ( InetAddress address int port ) throws Socket { BlockGuard getThreadPolicy ( ) onNetwork ( ) ; connect ( address ) ; connected ; connected ; connected ; }<CODESPLIT>Connects a datagram socket to a remote destination . This associates the remote address with the local socket so that datagrams may only be sent to this destination and received from this destination .
private char getEscaped ( ) { pos ; if ( pos ) { throw new IllegalStateException ( "Unexpected end of DN " + dn ) ; } ( chars [ pos ) '"' '\\' ',' '=' '<' '>' '#' : case : case '*' : case '%' : case '_' : return chars pos ; default : return getUTF8 ( ) ; } }<CODESPLIT>returns escaped char
private static String cutOffValidationMatchersPrefix ( String expression ) { ( expression ( Citrus VALIDMATCH ) expression ( Citrus VALIDMATCH ) ) return expression substring ( Citrus VALIDATIONMATCHERPREFIX length ( ), expression length ( ) Citrus VALIDATIONMATCHER_SUFFIX length ( ) ) ; } return expression ; }<CODESPLIT>Cut off validation matchers prefix and suffix .
public SortedSet < TypeElement > implementingClasses ( TypeElement typeElement ) { SortedSet < TypeElement get ( implementingClasses, typeElement ) ; SortedSet < TypeElement intf allSubClasses ( typeElement, ) ; Iterator < TypeElement subInterfaces intf iterator ( ) ; ( sub ( ) ) Iterator < TypeElement implementingClasses implementingClasses ( subInterfaces ( ) ) iterator ( ) ; ( implementingClasses ( ) ) TypeElement c implementingClasses ( ) ; ( contains ( ) ) add ( c ) ; } } } return result ; }<CODESPLIT>Return the set of classes which implement the interface passed .
public void add ( ValidationResult validation ) { validation correct ; ( validate ) ; errors ( validation errors ) ; warnings ( validation warnings ) ; }<CODESPLIT>Adds a validation result to this .
public static String toMetaFieldInfoString ( Object obj ) { buf = ( 100 ) ; MetaFieldInfo fields = toMetaFieldInfoArray ( obj, null, ) ; ( ; < fields ; ) MetaFieldInfo field = fields ; buf ( field name ) ; buf ( "=" ) ; if ( field actualValue field actualValue getClass ( ) ( String ) ) { buf ( '"' ) ; buf ( field value ) ; buf ( '"' ) ; } { buf ( field value ) ; } if ( + fields ) buf append ( "," ) ; } return buf. toString ( ) ; }<CODESPLIT>Creates a string for an object based on the MetaField annotations .
public String getArrayClassName ( Class clazz ) { ( clazz isArray ( getArrayClassName ( clazz getComponentType ( ) ) + ; } clazz getName ( ) ; }<CODESPLIT>Formats the class name with trailing square brackets .
synchronized void addBlock ( Block block ( isInitialized ( ) ) return ; } BlockScanInfo blockMap ( block ) ; ( info ) (Adding already existing block + block ) ; delBlockInfo ( ) ; } BlockScanInfo ( block ) ;ScanTime getNewBlockScanTime ( ) ;BlockInfo ( ) ; adjustThrott ( ) ; }<CODESPLIT>Adds block to list of blocks
public String getTile ( int x, int y ) { ( ( getArray ( ) ) ( getArray ( ) ) ( x ) ( ) ) new IllegalArgumentException ( ) ; } return image x ] y ] ; }<CODESPLIT>Gets a tile of the XPM Image .
public JBBPDslBuilder BitArray ( final String name final String bitLenExpression final String sizeExpression ) { Item item Item ( Bin BITARRAY ) ; item bitExpression assertExpression ( bitExpression ) ; itemExpression assertExpressionChars (Expression ) ; addItem ( item ) ; this ; }<CODESPLIT>Add named bit array where each bit length is calculated through expression .
public static Object indexOf ( String strPattern, String strInput, int offset, boolean caseSensitive, boolean matchAll ) throws MalformedPatternException { PatternMatcherInput input PatternMatcherInput ( strInput ) ; PerMatcher PerMatcher ( ) ; compileOptions caseSensitive? : PerCompiler CASEINSENS ;Options SINGLELINEMASK ; ( offset ) offset = ; Pattern pattern getPattern ( strPattern, compileOptions ) ; ( offset strInput ( ) ) input setCurrentOffset ( offset ) ; ( offset strInput ( ) ) Array matches ArrayImpl ( ) ; ( contains ( input pattern ) ) matchMatch ( ) beginOffset ( ) + ; ( matchAll ) return new Double ( match ) ; } matchesEL ( match ) ; } ( matches size ( ) ) return matches ; } } return 0 ; }<CODESPLIT>return index of the first occurence of the pattern in input text
private Object checkRegisteredServicesByLdapFilter ( String filter ) throws InvalidSyntaxException { ServiceReference references getBundle ( ) getServiceReferences ( ( ) filter ) ; ( ( references ) ) return null ; } ( references ) return getBundleContext ( ). getService ( references ] ) ; } new ( " services registered filter " + filter ) ; }<CODESPLIT>Checks the OSGi ServiceRegistry if a service matching the given filter is present .
public void postEvent ( DEvent event ) { ( _tevent ) _tevent postEvent ( event ) ; } ( _om ) _omgr postEvent ( event ) ; } (Dropping event non longer managed object,oid, getO ( ),class, getClass ( ) getName ( ),event, event ) ; } }<CODESPLIT>Posts the specified event either to our dobject manager or to the compound event for which we are currently transacting .
public static Identity createOverlayManagerGroup ( String name ) { ExtendedIdentifiers createExtendedIdentifier ( IfmapStrings IMETADATANSURI IfmapStrings IMETADATAPREFIXoverlaymanagergroup, name ) ; }<CODESPLIT>Create a overlay - manager - group identifier that is an extended identity identifier .
public static DoubleMatrix cholesky ( DoubleMatrix A ) { DoubleMatrix A dup ( ) ; info NativeBlas dpotrf (U A rows result data A rows ) ; ( info ) new LapArgumentException ( "DP", - info ) ; } ( info ) new LapPosException ( "DP", "Minor " + info + " negative Matrix positive definite." ) ; } clearLower ( ) ; return result ; }<CODESPLIT>Compute Cholesky decomposition of A
public static boolean isCaller ( final String className, final String methodName ) { Throwable throwable Throwable ( ) ; StackTraceElement stackElements throwable getStackTrace ( ) ; ( stackElements ) log ( Level WARNEmpty call stack ) ; return false ; } matchAllMethod "*" ( methodName ) ; ( ; stackElements ; ) ( stackElements getClassName ( ) ( className ) ) return matchAllMethod? true : stackElements [ i ]. getMethodName ( ). equals ( methodName ) ; } } return false ; }<CODESPLIT>Checks the current method is whether invoked by a caller specified by the given class name and method name .
public InputStream setFlag ( name value ) throws { executeCommand (setflag name value ) ; }<CODESPLIT>set JVM command line flag
public Q addFlag ( Position position String prefix Expression < expr ) { Expression flag = Expressions template ( expr ( ) expr ) ; return queryMixin addFlag ( QueryFlag ( position, flag ) ) ; }<CODESPLIT>Add the given prefix and expression as a general query flag
static ConnectionInfo newConnectionInfo ( Channel c ) { SocketChannel channel = ( SocketChannel ) ; host channel local ( ) ; remoteAddress getRemote ( channel ) ; scheme channel pipeline ( ) ( Ssl )https :http ; return ConnectionInfo ( hostAddress, remoteAddress, scheme ) ; }<CODESPLIT>Retrieve the connection information from the current connection directly
public PDPDomain getPDPDomain ( String pdpDomainName ) throws IOException { SortedSet > domainRanges ; ( serializedCache ) ( serializedCache ( pdpDomainName ) ) domain serializedCache ( pdp ) ; } }RequestDomainRanges checkDomainRanges ( domainRanges ) ; (RequestDomainRanges ) URL u URL ( server +getPDPDomainpdpId + pdpDomainName ) ; (Fetching u ) ; InputStream URLConnectionTools getInputStream ( u ) ; xml JFatCatClient convertStream ( ) ; domainRanges XML getDomainRangesFromXML ( ) ; ( domainRanges ) cache ( pdpDomainName domainRanges ) ; } } ) ( generating PDP request URL +DomainName, ) ; new IllegalArgumentException ( " PDP name " + pdDomainName, ) ; } pdbId ; ResidueRange > ranges ResidueRange > ( ) ; ( domainRange domainRanges ) SubstructureIdentifier strId SubstructureIdentifier ( domainRange ) ; ( pdbId ) pdbId strucId getPdbId ( ) ; } ( pdbId (Id getPdbId ( ) ) ) new RuntimeException ( "Don know take union of domains from multiple PDB IDs ) ; } ranges ( strucId getResidueRanges ( ) ) ; } return new PDPDomain ( pdpDomainName, ranges ) ; }<CODESPLIT>Get a StructureIdentifier representing the specified PDP domain .
public Context getContext ( ) { ( searchView ) return searchView getContext ( ) ; } ( supportView ) return supportView getContext ( ) ; } new (SEARCHVIEW ) ; }<CODESPLIT>Returns the context the view is running in through which it can access the current theme resources etc .
private boolean isMacroCycle ( IRing ring, IRingSet rs ) { ( ring getAtomCount ( ) 8 ) return ; ( IBond bond ring bonds ( ) ) ; ( IAtomContainer other rs atomContainers ( ) ) ( ring other ) ; ( other contains ( bond ) ) ; ; } } ( ) return ; } return false ; }<CODESPLIT>Check if a ring in a ring set is a macro cycle . We define this as a ring with > = 10 atom and has at least one bond that isn t contained in any other rings .
public < T > T datastoreToJava ( Entity entity ) { ( entity ) return null ; } T ( T ) persistentClass ( ) ; populate ( entity ) ; return ; } ) new RuntimeException ( e ) ; } ( ) new RuntimeException ( e ) ; } }<CODESPLIT>Convert a value from Google representation to a Java value
private void updateCacheState ( Map < String Object props ) { getAuthentication ( ) ; ( cache authCacheService activate ( ) ; } authCacheService deactivate ( ) ; } }<CODESPLIT>Based on the configuration properties the auth cache should either be active or not .
public static QuerySnapshot withChanges ( Query query Timestamp readTime final DocumentSet documentSet final List < DocumentChange documentChanges ) { QuerySnapshot ( query, readTime ) QueryDocumentSnapshot documents ; List < QueryDocumentSnapshot getDocuments ( ) { ( documents ) ( ( documents ) documents document ( ) ; } } } unmodifiableList ( documents ) ; } List < DocumentChange getDocumentChanges ( ) { unmodifiableList ( documentChanges ) ; } int size ( ) { documentSet size ( ) ; } boolean equals ( Object o ) { ( ) ; } ( getClass ( ) getClass ( ) ) ; } QuerySnapshot ( QuerySnapshot ) ; Objects equals ( query, that query ) Objects equals ( this size ( ), that size ( ) ) Objects equals ( this getDocumentChanges ( ), that getDocumentChanges ( ) ) Objects equals ( this getDocument ( ), that getDocument ( ) ) ; } int hashCode ( ) { Objects hash ( query, this getDocumentChanges ( ), this getDocument ( ) ) ; } } ; }<CODESPLIT>Creates a new QuerySnapshot representing a snapshot of a Query with changed documents .
private boolean readSend ( InH3 hIn, OutboxAmp outbox, HeadersAmp headers ) throws IOException { MethodRefHamp methodHamp ; methodH readMethod ( hIn ) ; } ( ) { ( Level FINER, ( ), ) ; skipArgs ( hIn ) ; return true ; } MethodRefAmp method methodH getMethod ( ) ; ClassLoader loader methodH getClassLoader ( ) ; Thread thread Thread currentThread ( ) ; thread setContextClassLoader ( loader ) ; Object args readArgs ( methodHamp h ) ; ( ( _logLevel ) ) ( _logLevel, this + send-r + method getName ( ) + ( args ) + {to + method + + headers + ) ; } SendMessageN sendMessage SendMessageN ( outbox headers method serviceRef ( ) method method ( ) args ) ; timeout 1000L ; sendMessage offer ( timeout ) ; } ( ) { fine ( ( ) ) ; ( ( ) ) ( Level, ( ), ) ; } } return true ; }<CODESPLIT>The send message is a on - way call to a service .
private String getRemoteFileName ( UploadFile file ) { ( file ( PARAMREMOTEPATH ) ( ) ) return file. getName ( service ) ; } ( file ( PARAMREMOTEPATH ) ( ) ) file ( PARAMREMOTEPATH ) ( ) ; return tmp tmp. length - 1 ] ; } return file. getProperty ( PARAM_REMOTE_PATH ) ; }<CODESPLIT>Checks if the remote file path contains also the remote file name . If it s not specified the name of the local file will be used .
public void initializeBufferMetrics ( Task task ) { MetricGroup buffers addGroup ( ) ; buffers gauge (inputQueue InputBuffersGauge ( task ) ) ; buffers gauge (outputQueue OutputBuffersGauge ( task ) ) ; buffers gauge (PoolUsage InputPoolUsageGauge ( task ) ) ; buffers gauge (PoolUsage OutputPoolUsageGauge ( task ) ) ; }<CODESPLIT>Initialize Buffer Metrics for a task .
public void doubleClick ( String fileName ) throws QTasteException { Region ( this rect )Click ( fileName ) ; } ) new QTaste ( ( ), ) ; } }<CODESPLIT>Simulates a double click on the specified image of the area .
public void setDestinationSSECustomerKey ( SSECustomerKey sseKey ) { ( sseKey this sseAwsKeyManagementParams ) new ( SSECustomerKey SSEAwsKeyParams set time ) ; } this destinationSSECustomerKey = sseKey ; }<CODESPLIT>Sets the optional customer - provided server - side encryption key to use to encrypt the destination object being copied .
public void onFailure ( Throwable t ) { Toast makeText ( this ( ) ) show ( ) ; }<CODESPLIT>show any error messages posted to the bus .
private void paintDropLines ( SeaGlassContext context, Graphics g ) { JTable DropLocation loc table getDropLocation ( ) ; ( loc ) return ; } Color color ( Color ) style ( contextTabledropLineColor ) ; Color shortColor ( Color ) style ( contextTabledropLineShortColor ) ; ( color shortColor ) return ; } Rectangle rect ; rect getHDropLineRect ( loc ) ; ( ) x rect x ; w rect width ; ( color ) extendRect ( rect, ) ; g setColor ( color ) ; g fillRect ( rect x, rect y, rect width, rect ) ; } ( locInsertColumn ( ) shortColor ) g setColor ( shortColor ) ; g fillRect ( x, rect y, w, rect ) ; } } rect getVDropLineRect ( loc ) ; ( ) rect ; h rect ; ( color ) extendRect ( rect, ) ; g setColor ( color ) ; g fillRect ( rect x, rect y, rect width, rect ) ; } ( locInsertRow ( ) shortColor ) g setColor ( shortColor ) ; g fillRect ( rect x, y, rect width, h ) ; } } }<CODESPLIT>Paint the drop lines if any .
public DatalogProgram createDatalog ( SWRLRule rule ) { rule accept ( ) ; (Supported ( Supported Translation + errors ) ; clear ( ) ; } DatalogProgram datalog getDatalogProgram ( ) ;Rule ( facts ) ; dp ; }<CODESPLIT>Translate the swrl_rule Return a datalog program containing the supported datalog facts
protected String inflateAuthnRequest ( final byte [ ] decodedBytes ) { val infl Compression inflate ( ) ; ( ( infl ) ) infl ; } Compression decodeByteArrayToString ( decodedBytes ) ; }<CODESPLIT>Inflate authn request string .
public static FrameworkProjectConfig create ( String name File propertyFile final Properties properties final IFilesystemFramework filesystemFramework ) { ( property ( ) ) generateProjectProperties ( property properties ) ; } create ( name, propertyFile, filesystemFramework ) ; }<CODESPLIT>Create and generate file with the given properties if not null
static synchronized void clearLogContext ( ) { LogContext embeddedLogContext HolderCONTEXT ; Configurator configurator embeddedLogContext ( ) detach ( Configurator ATTACHMENTKEY ) ; ( configurator PropertyConfigurator ) LogContextConfiguration logContextConfiguration ( ( PropertyConfigurator ) configurator ) getLogContextConfiguration ( ) ; clearLogContext (ContextConfiguration ) ; } ( configurator LogContextConfiguration ) clearLogContext ( ( LogContextConfiguration ) ) ; } < > loggerNames list ( embeddedLogContextNames ( ) ) ; ( name loggerNames ) Logger logger embeddedLogContextIfExists ( name ) ; ( ) Handler handlers logger clearHandlers ( ) ; ( handlers ) ( Handler handler handlers ) handler close ( ) ; } } setFilter ( null ) ; setUseParentFilters ( ) ; setUseParentHandlers ( ) ; setLevel ( Level INFO ) ; } } } }<CODESPLIT>Attempts to clear the global log context used for embedded servers .
public RestApiResponse execute ( long timeout ) Blocking blockSingle ( delegate execute ( ) timeout timeUnit ) ; }<CODESPLIT>Executes the API request in a synchronous fashion using the given timeout .
public InputStream getInputStream ( HttpServletRequest request, MutableObject < byte [ ] > sourceMapResult ) throws IOException { byte bytes = this bytes ; byte sourceMap = this sourceMap ; filename this filename ; InputStream ; ( bytes ) ( bytes ) ; ( sourceMapResult sourceMapSize ) sourceMapResult setValue ( sourceMap ) ; } } ( filename ) ICacheManager cmgr ( ( IAggregator ) request getAttribute ( IAggregator AGGREQATTRNAME ) ) getCacheManager ( ) ; File file File ( cmgr getCacheDir ( ) filename ) ; ( sourceMapSize ) result FileInputStream ( file ) ; } CacheData data ; ObjectInputStream ObjectInputStream ( FileInputStream ( file ) ) ; data ( CacheData ) readObject ( ) ; } ( ClassNotFoundException ) { new IOException ( e ( ), e ) ; } closeQuietly ( ) ; } bytes = data bytes ; sourceMap = data sourceMap ; ( sourceMapResult ) sourceMapResult setValue ( sourceMap ) ; } result ( bytes ) ; } } new IOException ( ) ; } return result ; }<CODESPLIT>Return an input stream to the layer . Has side effect of setting the appropriate Content - Type Content - Length and Content - Encoding headers in the response .
public void cacheIncludeAndIgnore ( WebElement table ) { (IgnoreByMatches ( ) )IgnoreMatches ( WebElement > ( ) ) ; (IgnoreRowsMatching ( ) ) getIgnoreMatches ( ) ( table findElements ( ) ) ; } } ( getIncludeByMatches ( ) )IncludeMatches ( WebElement > ( ) ) ; ( getIncludeOnlyRowsMatching ( ) ) getIncludeMatches ( ) ( table findElements ( ) ) ; } } }<CODESPLIT>Does the table comparison
public < E List < InlineDiffChunk < E inline ( List < E previous List < E next ) { setError ( ) ; this inlineDiffDisplayer display ( this diffManager diff ( previous, next, ) ) ; } Diff setError ( ) ; ; } }<CODESPLIT>Builds an in - line diff between two versions of a list of elements .
public static CompletableFuture < MessageSet > getMessagesAroundUntil ( TextChannel channel, Predicate < Message > condition, long around ) { CompletableFuture Message > future CompletableFuture > ( ) ; channel getApi ( )ThreadPool ( )ExecutorService ( ) submit ( ( ) Message > messages > ( ) ; Optional Message untilMessage getMessagesAroundAsStream ( channel around ) peek ( messages ) filter ( condition ) ( ) ; future complete ( MessageSetImpl ( untilMessage map ( message messages ) ( ( ) ) ) ) ; } ) future complete ( ) ; } } ) ; return future ; }<CODESPLIT>Gets messages in the given channel around a given message in any channel until one that meets the given condition is found . If no message matches the condition an empty set is returned . The given message will be part of the result in addition to the messages around if it was sent in the given channel and is matched against the condition and will abort retrieval . Half of the messages will be older than the given message and half of the messages will be newer . If there aren t enough older or newer messages the halves will not be same - sized . It s also not guaranteed to be perfectly balanced .
public static boolean findSipApplicationAnnotation ( InputStream stream ) { byte rawClass ; rawClass byte stream available ( ) ; stream read ( rawClassBytes ) ; one contains ( rawClass SIPAPPLICATIONBYTES ) ; two contains ( rawClass ANNOTATIONBYTES ) ; ( one two ) ; } ( ) { } return false ; }<CODESPLIT>Determine if this stream contains SipApplication annotations
protected Map < String, Object > buildJobDataMap ( final JmxCommand jmxCommand, final Object [ ] params ) throws MBeanException { Map < > job < > ( ) ; ind ; ( JmxOption option JmxOptions getOptions ( ) ) option process ( jobDataMap valueOf ( params ind ) ) ; } ( Argument arg this remoteProgram getArguments ( ) ) arg setValueUsingParser ( String ( ind ) ) ; } } ( ) new MBean ( e ) ; } return jobDataMap ; }<CODESPLIT>Initialize the JobDataMap with the Program arguments
private void V ( StringBuilder buf ) { Token t getNextToken ( ) ; ( t TokenType VALUE ) new IllegalStateException ( " token " + t ) ; } buf ( t ( ) ) ; t getNextToken ( ) ; ( t TokenType EOL ) return ; } ( t TokenType TRAINGBACKSLASH ) Vopt ( buf ) ; } }<CODESPLIT>Vopt = EOL V
public void addHeader ( String sName String sValue ) { ( sValueaddHeader ( sName sValue ) ; }<CODESPLIT>Add the passed header as is .
public static N Number Number max ( List N numberList ) ( numberList DoubleStream max ) ; }<CODESPLIT>Max number .
public int getChaincodeActionResponseStatus ( ) throws InvalidArgumentException { (Return ) return statusReturnCode ; } ProposalResponsePayloadDeserializer proposalResponsePayloadDeserializer getProposalResponsePayloadDeserializer ( ) ; statusReturnCode proposalPayloadDeserializer getExtension ( )Status ( ) ; return statusReturnCode ; } ) ; } ) new InvalidArgumentException ( ) ; } }<CODESPLIT>getChaincodeActionResponseStatus returns the what chaincode executions set as the return status .
public void generate ( Queue Pair Env AttrContext JCClassDecl queue ) { generate ( queue ) ; }<CODESPLIT>Generates the source or class file for a list of classes . The decision to generate a source file or a class file is based upon the compiler s options . Generation stops if an error occurs while writing files .
public static EnhancedMimeType create ( final String primary final String sub final Charset encoding final String version final Map < String String parameters ) { EnhancedMimeType ( primary, sub, encoding, version, parameters ) ; } MimeType new ( create versioned mime type + primary + + sub, ) ; } }<CODESPLIT>Creates an instance with all data and exceptions wrapped to runtime exceptions .
public static long toLongWithDefault ( Object value long defaultValue ) {NullableLong ( ) ;? ( ) : defaultValue ; }<CODESPLIT>Converts value into integer or returns default when conversion is not possible .
public void setIsolation ( String iso ) throws JspTagException { ( TRANSACTIONREADCOMMIT ( iso ) ) isolation = Connection TRANSACTIONREADCOMMIT ; } ( TRANSACTIONREADUNCOMMIT ( iso ) ) isolation = Connection TRANSACTIONREADUNCOMMIT ; } ( TRANSACTIONREPEATABLEREAD ( iso ) ) isolation = Connection TRANSACTIONREPEATABLEREAD ; } ( TRANSACTIONSERIALIZABLE ( iso ) ) isolation = Connection TRANSACTIONSERABLE ; } throw new JspTagException ( Resources. getMessage ( "TRANSACTION_INVALID_OL" ) ) ; } }<CODESPLIT>Setter method for the transaction isolation level .
public void traverse ( Node root ) { initTraversal ( root ) ;Node = root ; pushScope ( root ) ; traverseBranch ( root ) ; popScope ( ) ; } ) ( ) ; } }<CODESPLIT>Traverses a parse tree recursively .
public CollectionRequest < Tag findByWorkspace ( String workspace ) { path (workspaces/%tags workspace ) ; CollectionRequest < Tag > ( this, Tag, path,GET ) ; }<CODESPLIT>Returns the compact tag records for all tags in the workspace .
public Rule CriteriaFindQuery ( Sequence ( peek ( )CliQuery ( ) Json ( JsonObject ( ) ) peek ( )Operation ( FIND ) peek ( )Criteria ( match ( ) ) ) ;<CODESPLIT>A find query only given as criterion . Leave it to MongoDB s own parser to handle it .
private E unlinkLast ( Node < E > l ) { E element l item ; Node < E > prev l prev ; l item ; l prev ; last = prev ; ( prev ) = ; prev = ; size ; modCount ; return element ; }<CODESPLIT>Unlinks non - null last node l .
private static void setupSimpleSecurityProperties ( Hashtable < String Object env, String userDn, char [ ] ) { env put ( Context SECURITYAUTHENTICsimple ) ; env put ( Context SECURITYPRIP userDn ) ; put ( Context SECURITYCREDENTIALS ( ) ) ; }<CODESPLIT>Sets the environment properties needed for a simple username + password authenticated jndi connection .
public Team createTeam ( name String tag ) { client sendRpcWait ( SERVICEcreateTeam name tag ) ; }<CODESPLIT>Create a new ranked team with the specified name and tag
private static void checkFilePattern ( String s ) throws ProblemException { Pattern p ; ( File separatorChar '\\' ) p Pattern compile ( "\\+" ) ; } ( File separatorChar '/' ) p Pattern compile ( "\\+" ) ; } new ProblemException ( "This platform uses unsupported " + File separatorChar + " as file separator character add support for!" ) ; } m = p ( s ) ; ( m matches ( ) ) new ProblemException ( "The string \"" + s + a proper file name." ) ; } }<CODESPLIT>Verify that a source file name is valid .
public void close ( ) throws Exception { ( TransactionType ShardingTransactionManager transactionManagerMap ( ) ) entry ( ) close ( ) ; } }<CODESPLIT>Close sharding transaction managers .
protected static String getBar ( long percentage ) { = ( ) ; append ( percentage ) ; append ( "% [" ) ; ( i = ; i < 100 ; i ) if ( percentage 100 i percentage ) { append ( "=" ) ; } if ( i percentage ) { append ( ">" ) ; } { append ( ) ; } }. append ( ) ; return. toString ( ) ; }<CODESPLIT>Generates the progress bar for the given percentage
private void resolve ( T element, List < T > result ) { T dependencies blocked ( element ) ; ( dependencies ) ( T dependency dependencies ) resolve ( dependency ) ; } blocked remove ( element ) ; ( element ) ; } }<CODESPLIT>Resolves an element .
public B camundaOut ( String source String target ) { Camund modelInstance ( Camund ) ;undSource ( source ) ;undTarget ( target ) ; addExtensionElement ( param ) ; return myself ; }<CODESPLIT>Sets a camunda out parameter to pass a variable from a sub process instance to the super process instance
Node createArgumentsReference ( ) { Node IR name (arguments ) ; (AddingTypes ( ) )JS ( argumentsSupplier ( ) ) ; } return result ; }<CODESPLIT>Creates a reference to arguments with the type specified in externs or unknown if the externs for it weren t included .
public Date toDate ( String dateString ) { Date date = ; DateFormat = SimpleDateFormat (yyyy ) ; date = df parse ( dateString ) ; } ( ParseException ) { System ( fillInStackTrace ( ) ) ; } return date ; }<CODESPLIT>Takes a String and converts it to a Date
public cusolverRfSetNumericProperties ( cusolverRfHandle handle zero boost checkResult ( cusolverRNumericPropertiesNative ( handle zero boost ) ) ;<CODESPLIT>CUSOLVERRF set and get numeric properties
public quoteIfString ( Object obj obj? quote ( ( ) obj ) : obj ;<CODESPLIT>Turn the given Object into a String with single quotes if it is a String ; keeping the Object as - is else .
public Deferred < Object > deleteUidAsync ( final String type, final String name ) { UniqueIdType uidtype UniqueId stringToUniqueIdType ( type ) ; ( uidtype ) MET metrics deleteAsync ( ) ; TAGK tag deleteAsync ( ) ; TAGV tagvalues deleteAsync ( ) ; : throw IllegalArgumentException (Unrecognized UID type + uidtype ) ; } }<CODESPLIT>Attempts to delete the given UID name mapping from the storage table as well as the local cache .
public boolean scrollDownList ( int index ) { ( commandLogging ) ( config commandLoggingTagscrollDownList + index + ) ; } sc scrollList ( waiter waitForAndGetView ( index, ListView ), Sc DOWN, ) ; }<CODESPLIT>Scrolls down a ListView matching the specified index .
protected void makeAnnotationTypeElementDoc ( MethodSymbol meth, TreePath treePath ) { AnnotationElementDocImpl ( AnnotationElementDocImpl ) method ( meth ) ; ( ) ( treePath )TreePath ( treePath ) ; } AnnotationElementDocImpl ( this meth treePath ) ; methodMap put ( meth ) ; } }<CODESPLIT>Create the AnnotationTypeElementDoc for a MethodSymbol . Should be called only on symbols representing annotation type elements .
public Object call ( String method Object... arguments ) throws PickleException PyroException IOException { internalcall ( method arguments ) ; }<CODESPLIT>Call a method on the remote Pyro object this proxy is for .
public static String formatAsPercentage ( int value, int total ) { average :F ; return PERCENT_FORMATTER format ( average ) ; }<CODESPLIT>Returns value converted to percentage format .
public static T Geometry JTSGeometryExpression T translate ( Expression T expr float del float deltay ) { geometryOperation ( expr getType ( ) SpatialOps TRAN expr ConstantImpl create ( deltax ) ConstantImpl create ( delay ) ) ; }<CODESPLIT>Translates the geometry to a new location using the numeric parameters as offsets .
private static byte [ ] requestWebContent ( String url ) throws TVRageException { HttpGet httpGet HttpGet ( url ) ; httpGet addHeader (acceptapplicationxml ) ; DigestedResponse response DigestedResponseReader requestContent ( httpClient httpGet CHARSET ) ; ( ( ) 500 ) new TVRException ( ApiExceptionType HTTP3, url ) ; } ( response ( ) ) new TVRException ( ApiExceptionType HTTP, url ) ; } return response. getContent ( ). getBytes ( DEFAULT_CHARSET ) ; } ( ) new TVRException ( ApiExceptionType MAPPINGFAILED, UNTOPARSE, url, ) ; } }<CODESPLIT>Get content from URL in byte array
private static boolean isNumeric ( String value ) { ( char value toCharArray ( ) ) ( isDigit ( ) ) return ; } } return ; }<CODESPLIT>Returns a boolean indicating whether the given string value is numeric .
@ RequestMapping ( method = GET, value = "/foo" ) public Map < String, String > getFoo ( ) { > > ( ) ;Obj put (foobar ) ; return fooObj ; }<CODESPLIT>Controller to just support pinging .
protected static void fireArrayStartEvent ( JsonConfig jsonConfig ) { ( json isEventTriggerEnabled ( ) ) ( Iterator listenersConfig getJsonEventListeners ( ) ( ) ; listeners ( ) ; ) JsonEventListener listener ( JsonEventListener ) listeners ( ) ; listener onArrayStart ( ) ; } ) ( ) ; } } } }<CODESPLIT>Fires a start of array event .
public static E Exception Runnable sneaked ( SneakyRunnable E runnable ) { ( ) ( ) SneakyRunnable RuntimeException castedRunnable ( SneakyRunnable RuntimeException ) ; castedRunnable run ( ) ; } ; }<CODESPLIT>Sneaky throws a Runnable lambda .
public static Domain update ( final BandwidthClient client final String id final Map < String Object params ) throws AppPlatformException, ParseException, IOException, Exception { ( client id ) ; domainsUri client getUserResourceInstanceUri ( Band DOMAINSURI id ) ; RestResponse client post ( domainsUri ) ; JSONObject toJSONObject ( client ( domainsUri ) ) ; return Domain ( client, jsonObject ) ; }<CODESPLIT>Convenience method to return a Domain .
public static Stream < String > getResourceTypes ( final Event event ) { ( event modape jcr api observation Event ) modeshape jcr api observation Event modeEvent ( modeshape jcr api observation Event ) event ; Stream NodeType > types Stream ( ) ; ( NodeType type modeEvent getMixinNodeTypes ( ) ) types add ( type ) ; } types add ( modeEvent getPrimaryNodeType ( ) ) ; return types. build ( ). map ( NodeType :: getName ) ; } RepositoryException ) new RepositoryRuntimeException ( ) ; } } return empty ( ) ; }<CODESPLIT>Get the RDF Types of the resource corresponding to this JCR Event
private void processDefaultHeader ( ParserContext context ) { ( context getFileLines ( ) ( hasHeaderSeparator ( ) ) } processHeaderLine ( getDocumentModel ( ) ) ; } }<CODESPLIT>Process the header of the file .
public Connection getConnection ( String url String username String password ) throws SQLException { aliveConnection ( ) ; ( alive createConnection ( username password ) ; } connection ; }<CODESPLIT>Retrieves the connection object . If the connection doesnt exist or is dead it will attempt to create a new connection .
protected static final StringBuilder renderPad ( final StringBuilder builder, final int pad, final boolean newLine ) { renderNewLine (, ) ; ( ; pad ; ) ( ) ; } return builder ; }<CODESPLIT>Render some leading spaces onto a line of html .
public OvhAsyncTaskArray < OvhLine > eligibility_lines_active_POST ( OvhCity city, String contactName, OvhStreet street, String streetNumber ) throws IOException { qPath "/xdslelibilitylinesactive ; StringBuilder path ( qPath ) ; < > o < > ( ) ; ( ocity city ) ; ( ocontactName contactName ) ; ( ostreet, street ) ; ( o,streetNumber, streetNumber ) ; exec ( qPathPOST ( ) o ) ; return convertTo (, t5 ) ; }<CODESPLIT>Get the active lines at given address
private static String evaluateExpressionStack ( Deque String operators Deque < String values ) { ( operators ( values push ( ( operators pop ( ) values pop ( ) values pop ( ) ) ) ; } replaceIntegerStringByBooleanRepresentation ( values pop ( ) ) ; }<CODESPLIT>This method takes stacks of operators and values and evaluates possible expressions This is done by popping one operator and two values applying the operator to the values and pushing the result back onto the value stack
public int write ( byte [ ] buffer, int offset, int length, boolean isEnd ) throws IOException { ; requestExpireTime _requestExpireTime ; ( requestExpireTime requestExpireTime CurrentTime currentTime ( ) ) close ( ) ; new ClientDisconnectException ( L l ( request write exp addressRemote ( ) CurrentTime currentTime ( ) requestExpireTime ) ) ; } ( _writeLock ) { CurrentTime getCurrentTimeActual ( ) ; expires _socketTimeout + ; writeNative ( _socketFd buffer offset ) ; } ( result JStream TIMEOUTEXN getCurrent ( ) expires ) ; } (End ) closeWrite ( ) ; } return result ; }<CODESPLIT>Writes to the socket .
public void setAmbientLight ( float r, float g, float b ) { ambient g 255 } ; normalize ( ambient ) ; gl glEnable ( GL GLLIGHTING ) ; gl glEnable ( GL GLLIGHT ) ; gl glLightfv ( GL GLLIGHT GL GLAMENT, ambient, ) ; }<CODESPLIT>Sets the RGB value of the ambientLight
BigInteger setMultiChoiceCount ( ) { ( fields ) ( int = ; fields ; ) multiChoiceCount = multiChoiceCount multiply ( fields setMultiChoiceCount ( ) ) ; return multiChoiceCount ;<CODESPLIT>Set the multiChoiceCount for this tuple
public void delete ( forceDelete ) throws APIException { client delete ( getUrl ( ) +force + forceDelete ) ; HttpClient ( ) ; }<CODESPLIT>Creates this directory vi the Algorithmia Data API
protected void addNameToApplicationMap ( String name ) { appName getApplication ( ) ; ( appName ) ; ConcurrentLinkedQueue list applicationMap ( appName ) ; ( list ) ConcurrentLinkedQueue > newList ConcurrentLinkedQueue < > ( ) ; list applicationMap putIfAbsent ( appName newList ) ; ( list ) list = ; } list add ( name ) ; }<CODESPLIT>Adds the metric name to an application map . This map is not a complete list of metrics owned by an application produced metrics are managed in the MetricsExtension
public static Envelope getTableEnvelope ( Connection connection, TableLocation location, String geometryField ) throws SQLException { ( geometryField geometryField ( ) ) > geometryFields getGeometryFields ( connection location ) ; ( geometryFields ( ) ) new SQLException ( table + location + contain Geometry field extent " + "cannot computed" ) ; } geometryField geometryFields ( ) ; } ResultSet connection ( ) executeQuery (SELECT STExtent + TableLocation quoteIdentifier ( geometryField ) + + location ) ; ( ( ) ) return ( ( Geometry ) rs. getObject ( 1 ) ). getEnvelopeInternal ( ) ; } new SQLException ( " get table extent empty" ) ; }<CODESPLIT>Merge the bounding box of all geometries inside the provided table .
private void doListGet ( final Message < JsonObject > message ) { name message body ( ) getString (name ) ; ( name ) message reply ( JsonObject ( ) (statuserror ) (messageNo name specified." ) ) ; return ; } Integer index message body ( ) getInteger (index ) ; ( index ) message reply ( JsonObject ( ) (statuserror ) (messageNo index specified." ) ) ; return ; } context. execute ( new Action < Object > ( ) { public Object perform ( ) { return data. getList ( formatKey ( name ) ). get ( index ) ; } }, new Handler < AsyncResult < Object > > ( ) { public void handle ( AsyncResult < Object > result ) { ( result failed ( ) ) message reply ( JsonObject ( ) (statuserror ) (message result cause ( ) getMessage ( ) ) ) ; } message reply ( JsonObject ( ) (status ) putValue (result result result ( ) ) ) ; } } } ) ; }<CODESPLIT>Handles a list get .
public static PlotCanvas plot ( String id, double [ ] data ) { Histogram histogram = Histogram ( data ) ; histogram setID ( id ) ; lowerBound = min ( data ), } ; upperBound = Math max ( data ), } ; freq = histogram. getHist ( ) ; ( i = ; i < freq. ; i ) if ( freq i upperBound ) { upperBound = freq ; } } PlotCanvas canvas = PlotCanvas ( lowerBound, upperBound ) ; canvas getAxis ( ) setGridVisible ( ) ; canvas. add ( histogram ) ; return canvas ; }<CODESPLIT>Create a plot canvas with the histogram plot .
public static Pair < List < Tuple >, List < Tuple > > splitData ( final List < Tuple > trainingData, double proportion ) { ( proportion proportion ) new RuntimeException ( "Pro should between - 1" ) ; } ( proportion ) proportion = proportion ; } < Tuple > smallList < > ( ) ; < Tuple > largeList < > ( ) ; smallListSize ( ) floor ( proportion trainingData ( ) ) ; ct ; Set < Integer > indices < > ( ) ; ( ct smallListSize trainingData size ( ) indices size ( ) ) index ( ) ( random ( ) ( trainingData ( ) ) ) ; ( indices contains ( index ) ) index ( int ) ( random ( ) ( trainingData size ( ) ) ) ; } indices add ( index ) ; ; } smallList addAll ( indices stream ( ) map ( trainingData :: get ) collect ( ( ) ) ) ; IntStream range ( trainingData ( ) ) filter ( x indices ( x ) ) ( largeList add ( trainingData ( ) ) ) ; return new ImmutablePair < > ( smallList, largeList ) ; }<CODESPLIT>Shuffle the data and split by proportion
public static void getScreenShotABGR ( ByteBuffer bgraBuf, BufferedImage out ) { WritableRaster wr = out. getRaster ( ) ; DataBufferByte db = ( DataBufferByte ) wr. getDataBuffer ( ) ; byte cpuArray = db. getData ( ) ; bgraBuf. clear ( ) ; bBuf get ( cpuArray ) ; bgraBuf. clear ( ) ; width = getWidth ( ) ; height = ( ) ; ( = ; < height / 2 ; ) ( = ; < width ; ) inPtr = ( y width + x ) 4 ; outPtr = ( ( height y ) width + x ) 4 ; byte b = cpuArray in + ; byte g = cpuArray in + ; byte = cpuArray in + 2 ; byte a = cpuArray in + 3 ; byte b = cpuArray out + ; byte g = cpuArray out + ; byte = cpuArray out + 2 ; byte a = cpuArray out + 3 ; cpuArray out + = a ; cpuArray out + = b ; cpuArray out + 2 = g ; cpuArray out + 3 = ; cpuArray in + = a ; cpuArray in + = b ; cpuArray in + 2 = g ; cpuArray in + 3 = ; } } }<CODESPLIT>Good format for java swing .
public Pair < int [ ] [ ] [ ], int [ ] > documentToDataAndLabels ( List < IN > document ) { docSize = document size ( ) ; data = docSize windowSize ; labels = docSize ; if ( flags useReverse ) { Collections reverse ( document ) ; } ( ; < docSize ; ) CRFDatum < List < String >, CRFLabel > d = makeDatum ( document, j, featureFactory ) ; List < List < > > features = d asFeatures ( ) ; ( k fSize = features ( ) ; k < fSize ; k ) Collection < > cliqueFeatures = features ( k ) ; data j k = cliqueFeatures size ( ) ; m = ; ( feature cliqueFeatures ) index = featureIndex ( feature ) ; if ( index >= ) { data k m = index ; m ; } { } } if ( m data j k ) { f = m ; System arraycopy ( data j k,, f,, m ) ; data k = f ; } } IN wi = document ( ) ; labels [ ] =Index ( wi ( AnswerAnnotation ) ) ; } if ( flags useReverse ) { Collections reverse ( document ) ; } return new Pair < int [ ] [ ] [ ], int [ ] > ( data, labels ) ; }<CODESPLIT>Convert a document List into arrays storing the data features and labels .
public static synchronized List < Class <? > > locateAll ( final String serviceName ) { ( serviceName ) new IllegalArgumentException ( "serviceName cannot null" ) ; } < Class <? > > classes < Class <? > > ( ) ; ( factories ) < Callable < Class <? > > > l factories ( serviceName ) ; ( l ) ( Callable Class ) classes add ( c call ( ) ) ; } ( ) } } } } return classes ; }<CODESPLIT>Finds all providers for the given service .
String decodeCString ( ByteBuf buffer ) throws IOException { = buffer bytesBefore ( BsonConstants STRINGTERMINATION ) ; if ( ) new IOException (string termination ) ; result = buffer toString ( buffer readerIndex ( ) StandardCharsets UTF ) ; buffer skipBytes ( + ) ; return result ; }<CODESPLIT>default visibility for unit test
public void addCase ( JMFType theCase ) { if ( theCase ) new NullPointerException (Variant case cannot be ) ; JSTypeCase = ( JSType ) theCase ; if ( cases ) cases = new JSType ; JSType oldCases = cases ; cases = JSTypeCases + ; System arraycopy ( oldCases,, cases,, oldCases length ) ; }Case parent = this ;Case siblingPosition = cases ; casesCase siblingPosition =Case ; }<CODESPLIT>Add a case to the variant . Note that every variant must have at least one case .
public String summarizeState ( ) { buf = ( ) ; buf (clipVol ) ( _clipVol ) ; buf ( disabled ) ; = ; ( SoundType soundType _disabledTypes ) if ( ii ) buf ( ) ; } buf ( soundType ) ; } return buf. append ( "]" ). toString ( ) ; }<CODESPLIT>Returns a string summarizing our volume settings and disabled sound types .
private Map < String, String > getCustomMap ( Pattern keyPattern ) { Map < > map < > ( ) ; ( Iterator < Object > props ( ) ( ) ; ( ) ; ) key ( ) it ( ) ; = keyPattern ( key ) ; ( matcher matches ( ) ) id group ( 2 ) ; propertyValue props getProperty ( key ) ; map put ( id, propertyValue ) ; } } return map ; }<CODESPLIT>Returns the map where the key is the 2 group of the pattern and the value is the property value
public long rawUncompress ( long inputAddr long inputSize long destAddr impl rawUncompress ( inputAddr input destAddr ) ; }<CODESPLIT>Zero - copy decompress using memory addresses .
public void write ( byte [ ] b, int off, int len ) { this checkIncreaseArray ( ) ; System ( off this buffer this pos len ) ; ; }<CODESPLIT>Writes a byte array content into the stream
public Operation patchHealthCheck ( ProjectGlobalHealthCheckName healthCheck HealthCheck healthCheckResource List String fieldMask ) { PatchHealthCheckHttpRequest PatchHealthCheckHttpRequest newBuilder ( )HealthCheck ( healthCheck : healthCheck ( ) )HealthCheckResource ( healthCheckResource ) ( field ) ( ) ; patchHealthCheck ( request ) ; }<CODESPLIT>Updates a HealthCheck resource in the specified project using the data included in the request . This method supports PATCH semantics and uses the JSON merge patch format and processing rules .
private void initializeNoxItemMargin ( TypedArray attributes ) { noItemDefaultValue getResources ( ) getDimension ( R dimennoitemmargin ) ; noItemMargin attributes getDimension ( R styleable noitemmargin noItemMarginDefaultValue ) ; noxNoxItemMargin ( noxItemMargin ) ; }<CODESPLIT>Configures the nox item default margin used in NoxConfig Shape and NoxItemCatalog to draw nox item instances during the onDraw execution .
public static OperationResult failed ( long index long eventIndex Throwable error ) Operation ( index eventIndex error ) ; }<CODESPLIT>Returns a failed operation result .
public static InsnList ifIntegersEqual ( InsnList lhs, InsnList rhs, InsnList action ) { Validate ( lhs ) ; Validate ( rhs ) ; Validate ( action ) ; In InList ( ) ; LabelNodeEqualLabelNode LabelNode ( ) ; ( lhs ) ; ( rhs ) ; ( JInsnNode ( IFMPNEEqualLabelNode ) ) ; ( action ) ; (EqualLabelNode ) ; return ; }<CODESPLIT>Compares two integers and performs some action if the integers are equal .
public static FormatOptions of ( int flags, int width, int precision ) { ( checkFlagConsistency ( flags width UNSET ) ) new IllegalArgumentException ( " flags" + Integer ( flags ) ) ; } ( ( width width MAX ) width UNSET ) new IllegalArgumentException ( " width " + width ) ; } ( ( precision precision MAXPRE ) precision UNSET ) new IllegalArgumentException ( " precision " + precision ) ; } return new FormatOptions ( flags, width, precision ) ; }<CODESPLIT>Creates a options instance with the given values .
public void tripleClick ( Coordinates where ) { Point getPoint ( whereiple click ) ; exec mouseAction ( p x p OperaMouseKeys LEFT ) ; }<CODESPLIT>Triple click is an Opera specific way of selecting a sentence .
private void initializeNoxItemPlaceholder ( TypedArray attributes ) { Drawable placeholder attributes getDrawable ( R noitemplaceholder ) ; ( placeholder ) placeholder getContext ( ) getResources ( ) getDrawable ( R drawable ic ) ; } noPlaceholder ( placeholder ) ; }<CODESPLIT>Configures the placeholder used if there is no another placeholder configured in the NoxItem instances during the onDraw execution .
public void pruneInvalidOptional ( DependencyExplorerOutput output InvalidKeys invalidKeys ) { DependencyGraph Graph prunedGraph DependencyGraph Graphuner ( getGraph ( ) ) ; ( Key invalidKeysInvalidOptionalKeys ( prunedGraph remove ( key ) ; removeBinding ( key ) ; }Graph ( prunedGraph update ( ) ) ; }<CODESPLIT>Prune all of the invalid optional keys from the graph . After this method all of the keys remaining in the graph are resolvable .
private PersistentResourceXMLDescription getSimpleMapperParser ( ) { ( version ( Version ) ) return simpleMapperParser_1_0 ; } ( version ( Version ) ) return simpleMapperParser_1_1 ; } return simpleMapperParser ; }<CODESPLIT>1 . 0 version of parser is different at simple mapperParser
public String getAbsoluteTemplateURI ( String templateName, boolean includeExtension ) { FastStringWriter buf = FastStringWriter ( ) ; = templateName ( templateName ( ) ) ; if ( ( SLASH ) ) buf ( SLASH ) ; = ( SLASH ) ; buf ( substring (, i ) ) ; buf ( SLASHUNDR ) ; buf ( substring ( i +, ( ) ) ) ; } buf ( SLASHUNDR ) ; buf ( templateName substring (, templateName ( ) ) ) ; } if ( includeExtension ) buf ( EXTENSION ) ; } uri = buf toString ( ) ; buf close ( ) ; return uri ; }<CODESPLIT>Used to resolve template names that are not relative to a controller .
protected void scanResourcePaths ( String startPath ) throws IOException, SAXException { Set < > dirList context getResourcePaths ( startPath ) ; ( dirList ) ( path dirList ) ( path ( "/WEBINFclasses ) ) } ( path ( "/WEBINFlib ) ) } ( path endsWith ( "/" ) ) scanResourcePaths ( path ) ; } ( path ( "/WEBINFtags ) ) ( path endsWith ( "/implicittld ) ) parseT ( path ) ; } } ( path endsWith ( TEXT ) ) parseT ( path ) ; } } } }<CODESPLIT>Scan web application resources for TLDs recursively .
protected duringDrag ( SVGPoint startPoint SVGPoint dragPoint Event evt inside ) { ( listener listener duringDrag ( startPoint dragPoint evt, inside ) ; } ; }<CODESPLIT>Method called during drags .
private PGPKeyRingGenerator createKeyRingGenerator ( String userId, String password, int keySize ) { trace (createKeyRingGeneratorString String int ) ; trace (User ID Password Key Size userId password?not :******** key ) ; PGPKeyRingGenerator generator ; (Creating RSA key pair generator ) ; RSAKeyPairGenerator generator RSAKeyPairGenerator ( ) ; generator init ( RSAKeyGenerationParameters ( BigInteger valueOf (100 ) getSecureRandom ( ) key 12 ) ) ; (Generating Signing Key Pair ) ; BcPKeyPair signingKeyPair BcPKeyPair ( PGPPublicKey RSASIGN generator generateKeyPair ( ) Date ( ) ) ; (Generating Encyption Key Pair ) ; BcPKeyPair encryptionKeyPair BcPKeyPair ( PGPPublicKey RSACRYPT generator generateKeyPair ( ) Date ( ) ) ; (Generating Signature Key Properties ) ; PGPSignatureSubpacketGenerator signatureSubpacketGenerator PGPSignatureSubpacketGenerator ( ) ; signatureSubGenerator setKeyFlags (, KeyFlagsDATA | KeyFlags CERTIFY ) ; signatureSubGenerator setPreferred (, getPreferredEncryption ( ) ) ; signatureSubGenerator setPreferredHash (, getPreferredHashing ( ) ) ; signatureSubGenerator setPreferredCompression (, getPreferredCompression ( ) ) ; (Generating Encyption Key Properties ) ; PGPSignatureSubpacketGenerator encryptionSubpacketGenerator PGPSignatureSubpacketGenerator ( ) ; encryptionSubGenerator setKeyFlags (, KeyFlags ENCRYPTCOMMS | KeyFlags ENCRYPT_STORAGE ) ; (Creating PGP Key Ring Generator ) ; generator PGPKeyRingGenerator ( PGPPublicKey RSASIGN signingKeyPair userId BcPDigestCalculatorProvider ( ) ( HashAlgorithmTags SHA ) signatureSubpacketGenerator generate ( ) BcPContentSignerBuilder ( PGPPublicKey RSASIGN HashAlgorithmTags SHA256 ) BcPSecretKeyEncryptBuilder (EncryptionAlgorithm ( ) ) build ( password ( ) ) ) ; generator addSubKey ( encryptionKeyPair, encryptionSubpacketGenerator generate ( ), ) ; } ( PGP ) { error ( "{}", e getMessage ( ) ) ; generator ; } return generator ; }<CODESPLIT>creates and initializes a PGP Key Ring Generator
public static Date getDateFromString ( final String dateString, final String pattern ) { SimpleDateFormat build ( pattern ) ; return df parse ( dateString ) ; } ParseException ) new Date ( String format ( parse with pattern, dateString, pattern ), ) ; } }<CODESPLIT>Get data from data string using the given pattern and the default date format symbols for the default locale .
public Object remove ( Object key ) { ( _cacheL2 ) ( _cacheL ( key ) _cacheL ( key ) ) return null ; } ; Map ; ( _cacheL ) { newMap merge ( _cacheL _cacheL ) ; newMap remove ( key ) ; } _cache = ; _cacheL clear ( ) ; _miss = ; return retval ; } }<CODESPLIT>This operation is very expensive . A full copy of the Map is created
private String getItemType ( Cmdb cmdb ) { itemType = ; subType = cmdb getConfigurationItem ( ) ; type = cmdb getConfigurationItemType ( ) ; hpsmSettings = hpsmSettings getApp ( ) ; hpsmSettingsType = hpsmSettings getAppType ( ) ; typeCheck = ; subTypeCheck = ; if ( "" ( hpsmSettings ) ) { typeCheck = ; } if ( "" ( hpsmSettings ) ) { subTypeCheck = ; } if ( typeCheck subTypeCheck ) { if ( subType subType ( hpsmSettings getApp ( ) ) ) { itemType = APPTYPE ; } if ( subType subType ( hpsmSettingsComp ( ) ) ) { itemType = COMPTYPE ; } if ( subType subType ( hpsmSettings getEnv ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } if ( typeCheck subTypeCheck ) { if ( type type ( hpsmSettings getApp ( ) ) ) { itemType = APPTYPE ; } if ( type type ( hpsmSettingsComp ( ) ) ) { itemType = COMPTYPE ; } if ( type type ( hpsmSettings getEnv ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } { if ( subType subType ( hpsmSettings getApp ( ) ) type type ( hpsmSettings getApp ( ) ) ) { itemType = APPTYPE ; } if ( subType subType ( hpsmSettingsComp ( ) ) type type ( hpsmSettingsComp ( ) ) ) { itemType = COMPTYPE ; } if ( subType subType ( hpsmSettings getEnv ( ) ) type type ( hpsmSettings getEnv ( ) ) ) { itemType = ENVIRONMENTTYPE ; } } return itemType ; }<CODESPLIT>Returns the type of the configuration item .
public void readXML ( final List < String > _tags, final Map < String, String > _attributes, final String _text ) throws SAXException, EFapsException { ( _tags ( ) ) value _tags ( ) ; (uuid ( value ) ) this uuid = _text ; } (fileapplication ( value ) ) this fileApplication = _text ; } (definition ( value ) ) this definitions add (Definition ( ) ) ; } } (definition ( _tags ( ) ) ) AbstractDefinition curDef this definitions ( this definitions ( ) ) ; curDef readXML ( _tags subList (, _tags size ( ) ), _attributes, _text ) ; } new SAXException ( "Unknown XML Tag " +tags + " for " + this installFile ) ; } }<CODESPLIT>Read event for given tags path with attributes and text .
public String getSQLUpdate ( boolean bUseCurrentValues ) { strRecordset this getBaseRecord ( ) makeTableNames ( ) ; KeyArea keyArea = this getBaseRecord ( ) getKeyArea ( ) ; bUseCurrentKeyValues bUseCurrentValues? : keyArea isNull ( DBConstants TEMPKEY ) ;QueryRecord this getBaseRecord ( )QueryRecord ( ) ; sFilter keyArea addSelectParams ( "=" DBConstants TEMPKEYQueryRecord bUseCurrentKeyValues ) ; ( sFilter ( ) ) sFilter = WHERE + sFilter ; strSetValues this getBaseRecord ( ) getSQLFields ( DBConstants SQLUPDATETYPE bUseCurrentValues ) ; ( strSetValues ( ) ) return ; strRecordset =UPDATE + strRecordset + SET + strSetValues +Filter ; return strRecordset ; }<CODESPLIT>Get the SQL Update string . UPDATE table SET field1 = value1 field2 = value2 WHERE key = value
public static synchronized void verify ( Object... objects ) { ( Object mock objects ) ( mock Class ) verifyClass ( ( Class ) mock ) ; } EasyMockMethodInvocationControl invocationControl ( EasyMockMethodInvocationControl ) MockRepositoryMethodInvocationControl ( mock ) ; ( invocationControl ) invocationControl verify ( ) ; } ( isNiceReplayVerifyMode ( )EasyMock ( mock ) ) } easymock EasyMock verify ( mock ) ; } ) new RuntimeException ( mock + " mock object", e ) ; } } } } } }<CODESPLIT>Switches the mocks or classes to verify mode . Note that you must use this method when using PowerMock!
public void mapTileRequestFailed ( final MapTileRequestState pState ) { (TileNotFoundImage ) putTileIntoCache (State getMapTile ( )TileNotFoundImage ExBitmapDrawable ) ; ( Handler handler mTileRequestCompleteHandlers ) ( handler ) handler sendEmptyMessage ( MAPTILESUCCESSID ) ; } } } ( Handler handler mTileRequestCompleteHandlers ) ( handler ) handler sendEmptyMessage ( MAPTILEFAILID ) ; } } } ( Configuration getInstance ( )TileProviders ( ) ) Log d ( IMapView,MapTileProviderBasemapTileRequest + MapTileIndex ( pState getMapTile ( ) ) ) ; } }<CODESPLIT>Called by implementation class methods indicating that they have failed to retrieve the requested map tile . a MAPTILE_FAIL_ID message is sent .
static void validateFactoryAndClass ( FieldDefinition fd, int factoryId, int classId, String fullPath ) { ( factoryId fd getFactoryId ( ) ) new IllegalArgumentException ( factoryId + fd getFactoryId ( ) + Current + factoryId + path + fullPath ) ; } ( classId fd getClassId ( ) ) new IllegalArgumentException ( classId + fd getClassId ( ) + Current + classId + path + fullPath ) ; } }<CODESPLIT>Validates if the given factoryId and classId match the ones from the fieldDefinition
public static String getLabelFor ( InputComponent <, > input, boolean addColon ) { label input getLabel ( ) ; ( label ) label input getName ( ) ; } ( label ( COLON ) ) label ; } return label ; }<CODESPLIT>Returns the label for this component
protected View inflatePlaceholderView ( View convertView int height ) { View viewView ; ( ( view PlaceholderView ) ) view PlaceView ( ( ) ) ; } view setMinimum ( ) ; view ; }<CODESPLIT>Inflates an invisible placeholder view with a specific height .
public void stopService ( ) throws Exception { ( c,stopService,Stopping LdapServer ) ; this server stop ( ) ; ( c,stopService,Stopping DirectoryService ) ; service shutdown ( ) ; ( c,stopService,Ldap stopped ) ; }<CODESPLIT>Stop the LdapServer and the Directory service . Use for JUnit teardown . If the service is not stopped then future instances with the same name cannot clean up the file directory .
public void setCacheMinutes ( int iMinutes ) { (Minutes )Minutes = DEFAULTCACHEDMIN ; cacheMinutes =Minutes ; (Minutes ) ( timerCache ) timerCache cancel ( ) ; timerCache ; this stopCache ( ) ; } } ( timerCache ) timerCache cancel ( ) ; } this startCache ( ) ; timerTask DBTimerTask ( ) ; timerCache java util Timer ( ) ; timerCache schedule ( timerTask cacheMinutes 1000 ) ; } }<CODESPLIT>This will set this database to start caching records until they haven t been used for iMinutes minutes .
protected void propagateOnEnter ( GVRPickedObject hit ) { GVRSceneObject hitObject hit getHitObject ( ) ; GVREventManager eventManager getGVRContext ( ) getEventManager ( ) ; ( mEvent ( Event SENDTOUCHEVENTS ) ) ( mEvent ( Event SENDTOS ) ) eventManager sendEvent ( this, ITouchEvents,onEnter, hitObject, hit ) ; } ( mEvent ( Event SENDTOHITOBJECT ) ) eventManager sendEvent ( hitObject, ITouchEvents,onEnter, hitObject, hit ) ; } ( mEvent ( Event SENDTOSCENE ) ( mScene ) ) eventManager sendEvent ( mScene, ITouchEvents,onEnter, hitObject, hit ) ; } } ( mEvent ( Event SENDPIEVENTS ) ) ( mEvent contains ( Event SENDTOS ) ) eventManager sendEvent ( this, IPickEvents,onEnter, hitObject, hit ) ; } ( mEvent contains ( Event SENDTOHITOBJECT ) ) eventManager sendEvent ( hitObject, IPickEvents,onEnter, hitObject, hit ) ; } ( mEvent contains ( Event SENDTOSCENE ) ( mScene ) ) eventManager sendEvent ( mScene, IPickEvents,onEnter, hitObject, hit ) ; } } }<CODESPLIT>Propagate onEnter events to listeners
public java Future GetSendQuotaResult getSendQuotaAsync ( com... AsyncHandler GetSendQuotaRequest GetSendQuotaResult asyncHandlerendQuotaAsync ( GetSendQuotaRequest ( ) asyncHandler ) ;<CODESPLIT>Simplified method form for invoking the GetSendQuota operation with an AsyncHandler .
public short shortValue ( ) throws OtpErlangRangeException { ( ) ; short ( short ) ; ( ) new OtpErlangRange ( "Value large short " + val ) ; } return i ; }<CODESPLIT>Get this number as a short .
private MjdbcSQLException translateSQLStatePrefix ( String reason, String SQLState, int vendorCode, SQLException cause ) { MjdbcSQLException result = ; sqlState = getSqlState ( cause ) ; sqlStatePrefix = ; ( sqlState sqlState ( ) >= 2 ) sqlStatePrefix = sqlState substring (, 2 ) ; ( SpringExceptionHandler SQLSTATEPREFIXBADSQLGRAMMAR contains ( sqlStatePrefix ) ) result = BadSqlGrammarException ( reason SQLState vendorCode ) ; } ( SpringExceptionHandler SQLSTATEPREFIXDATAINGRVIOL contains ( sqlStatePrefix ) ) result = DataIntegrity ( reason SQLState vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXDATAACCESSRESOURCE contains ( sqlStatePrefix ) ) result = DataAccessResourceFailureException ( reason SQLState vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXTRANSIENTDATAACCESSRESOURCEEXCEPTION contains ( sqlStatePrefix ) ) result = TransientDataAccess ( reason SQLState vendorCode ) ; } if ( SpringExceptionHandler SQLSTATEPREFIXCONCUR contains ( sqlStatePrefix ) ) result = ConcurrencyFailureException ( reason SQLState vendorCode ) ; } } return result ; }<CODESPLIT>Checks SQL state and tries to convert it into Spring SQL Exception . This implementation is vendor free .
public boolean matches ( String name ) { ( name ) return pattern equals ( "" ) ; } ( ) return all equals ( name ) ; } ( middle ) return name. contains ( middle ) ; } ( name ( ) ) return ; } return end == null name. endsWith ( end ) ; }<CODESPLIT>Checks if Simon name matches this pattern .
public static nslimitselector get ( nitro_service service String selectorname ) throws Exception {slimitselectorslimitselector ( ) ; ( selector ) ; nslimitselector ( nslimitselector )resource ( service ) ; ; }<CODESPLIT>Use this API to fetch nslimitselector resource of given name .
public static int solveQuad ( double [ ] eqn, double [ ] res ) { a = eq 2 ; b = eq ; c = eq ; rc = ; if ( af ) if ( bf ) return - 1 ; } res rc = c b ; } = b b 4 a c ; if ( df ) { return 0 ; } d = sqrt ( d ) ; res rc = ( b + d ) ( a 2f ) ; if ( df ) { res rc = ( b d ) ( a 2f ) ; } } return fixRoots ( res, rc ) ; }<CODESPLIT>Solves quadratic equation
public Set < Term > getAllTerms ( ) { Set < Term > < Term > ( ) ; ( StatementGroup statementGroups ) ( final Statement getAllStatements ( ) ) addAll ( getAllTerms ( ) ) ; } } return ; }<CODESPLIT>Returns the set of all terms contained within the document .
public void cancelCopy ( CopyOperationImpl op ) throws SQLException { (Lock ( op ) ) new PSQLException ( GT ( "Tried cancel an inactive copy operation" ), PSQLState OBJECTINSTATE ) ; } SQLException error ; errors ; ( op CopyIn ) ( this ) { log ( Level FINEST,FE => CopyFail ) ; byte msg Utils encodeUTF (Copy cancel requested ) ; pgStream sendChar ( ) ; pgStream sendInteger4 ( 5 + msg ) ; pgStream send ( msg ) ; pgStream sendChar ( ) ; pgStream flush ( ) ; processCopyResults ( op, ) ; } ( SQLException ) { errors ; ( error ) SQLException = se ; SQLException next ; ( ( getNextException ( ) ) ) = next ; } setNext ( error ) ; } error = se ; } } (Lock ( op ) ) ; } } ( op CopyOut ) sendQueryCancel ( ) ; } } ( ) { new PSQLException ( GT ( "Database connection failed canceling copy operation" ), PSQLState CONNECTION, ) ; } ( this ) { (Lock ( op ) ) ( op ) ; } } } ( op CopyIn ) ( errors ) new PSQLException ( GT ( "Missing expected response copy cancel request" ), PSQLState COMMUNIC ) ; } ( errors ) new PSQLException ( GT ( "Got error responses to single copy cancel request, valueOf ( errors ) ), PSQLState COMMUN, error ) ; } } }<CODESPLIT>Finishes a copy operation and unlocks connection discarding any exchanged data .
public com google ads adwords. axis. v201809. o. AttributeType getRequestedAttributeTypes ( requestedAttributeTypes ;<CODESPLIT>Gets the requestedAttributeTypes value for this TargetingIdeaSelector .
public void setRange ( Annotation v ) { ( OntRelationMention featOkTst ( ( OntRelationMention ) jcasType ) casFeatrange ) jcasType jcas throwFeatMissing (rangedejulielabjulestypesOntRelationMention ) ; jcasType llcas llset ( addr, ( ( OntRelationMentionType ) jcasType ) casFeatCoderange, jcasType llcas llgetFSRef ( v ) ) ; }<CODESPLIT>setter for range - sets
public List < com. ibm. wsspi. security. wim. model. RolePlayer getRelatedRolePlayer ( ) { ( relatedRolePlayer ) relatedRolePlayer ibmsspi security model RolePlayer ( ) ; } this relatedRolePlayer ; }<CODESPLIT>Gets the value of the relatedRolePlayer property .
public JCExpression getUnderlyingBinding ( Un un ( unifier )? : unifier getBinding ( UIdent Key ( identifier ( ) ) ) ;<CODESPLIT>Gets the binding of the underlying identifier in the unifier .
public void clearCache ( ) { entityCache clearCache ( CommercePriceEntryImpl ) ; finderCache clearCache ( FINDERCLASSNAMEENTITY ) ; finderCache clearCache ( FINDERCLASSNAMELISTWITHINATION ) ; finderCache clearCache ( FINDERCLASSNAMELISTWITHOUTINATION ) ; }<CODESPLIT>Clears the cache for all commerce price entries .
private int computeCapacity ( int initial ) { ( initial MINIMUM ) return MINIMUM_CAPACITY ; } ( initial MAXIMUM ) return MAXIMUM_CAPACITY ; } capacity ; ( capacity initial capacity ; } return capacity ; }<CODESPLIT>Compute capacity given initial capacity .
public V get ( K k long timeout TimeUnit unit ) throws { await ( k timeout ) ; cache ( k ) ; }<CODESPLIT>Retrieve the value associated with the given key blocking as long as necessary up to the specified maximum .
public static void setupClasspath ( final Path distributedClassPath, final Path intermediateClassPath, final Job job ) throws IOException { classpathProperty System getProperty (druidhadoopinternalclasspath ) ; ( classpathProperty ) classpathProperty System getProperty (javaclasspath ) ; } jarFiles classpathProperty split ( File pathSeparator ) ; Configuration conf job getConfiguration ( ) ; FileSystem fs distributedClassPath getFileSystem ( conf ) ; ( fs LocalFileSystem ) return ; } ( jarFilePath jarFiles ) File jarFile File ( jarFilePath ) ; ( jarFile getName ( ) (jar ) ) Retry retry ( ( ) (Snapshot ( jarFile ) ) addSnapshotJarClassPath ( jarFile intermediateClassPath fs job ) ; } addJarClassPath ( jarFile distributedClassPath intermediateClassPath fs job ) ; } return true ; }RetryPredicate ( ), NUMRETRIES ) ; } ( ) new RuntimeException ( e ) ; } } } }<CODESPLIT>Uploads jar files to hdfs and configures the classpath . Snapshot jar files are uploaded to intermediateClasspath and not shared across multiple jobs . Non - Snapshot jar files are uploaded to a distributedClasspath and shared across multiple jobs .
public void eval ( String javascript ) throws WidgetException { WebElement element = findElement ( ) ; WebDriver wd = getGUIDriver ( )WrappedDriver ( ) ; ( ( JavascriptExecutor ) wd ) executeScript ( javascript, element ) ; } ( ) { time System ( ) + 2000 ; ; ( System ( ) time ) ( ( JavascriptExecutor ) wd ) executeScript ( javascript, element ) ; ; } ( ) { Thread sleep ( 500 ) ; } ( InterruptedException ) { } = ; } } ( ) new RuntimeException ( e ) ; } } }<CODESPLIT>Executes JavaScript code on the current element in the current frame or window .
public long addWrapField ( long instant int amount ) { set ( instant FieldWrappedValue ( ( instant ) amount iDivisor ) ) ; }<CODESPLIT>Add the specified amount to the specified time instant wrapping around within the remainder range if necessary . The amount added may be negative .
protected synchronized SendRequest makeUnsignedChannelContract ( Coin valueToMe ) { Transaction tx Transaction ( wallet getParams ( ) ) ; ( getTotal ( subtract ( valueToMe ( Coin txOutput ( getTotal ( ) ( valueToMe ) LegacyKey ( wallet getParams ( ) getClientKey ( ) ) ) ; } txInput ( contract getOutput ( ) ) ; SendRequest forTx ( tx ) ; }<CODESPLIT>Create a payment transaction with valueToMe going back to us
public static String getUserNameFromToken ( String authToken ) { ( authToken ) ; } authToken split ( TOKENSEPARATOR ) ] ; }<CODESPLIT>Extracts the user name from token .
protected Class < > resolveProxyClass ( String [ ] interfaceNames ) throws ClassNotFoundException { ClassLoader proxyClassLoader = classLoader ; Class? > interfaces Class interfaceNames ; Class? > nonPublicInterface ; ( ; interfaceNames ; ) Class? > intf loadClass ( interfaceNames ) ; ( isPublic ( intf ( ) ) ) ClassLoader classLoader getClassLoader ( intf ) ; ( nonPublicInterface ) ( classLoader proxyClassLoader ) new IllegalAccess ( nonPublicInterface + " " + intf + " declared non-public in class loaders" ) ; } } nonPublicInterface = intf ; proxyClassLoader = classLoader ; } } interfaces = intf ; } return Proxy. getProxyClass ( proxyClassLoader, interfaces ) ; } ( ) new ClassNotFoundException ( null, ) ; } }<CODESPLIT>Delegates class loading to the specified class loader .
public static double [ ] rowSums ( double [ ] [ ] data ) { double x = double data ; ( = ; <. ; i ) x i = sum ( data i ) ; } return x ; }<CODESPLIT>Returns the row sums for a matrix .
protected void rehash ( int newCapacity ) { oldCapacity = table ; oldTable = table ; oldValues = values ; byte oldState = state ;Table = newCapacity ; newValues = newCapacity ; byte newState = byte newCapacity ; this lowWaterMark = chooseLowWaterMark ( newCapacity, this minLoadFactor ) ; this highWaterMark = chooseHighWaterMark ( newCapacity, this. maxLoadFactor ) ; this table =Table ; this values = newValues ; this state = newState ; this freeEntries = newCapacity this distinct ; ( i = oldCapacity ; i > ; ) if ( i FULL ) { element = oldTable i ; index =Insertion ( element ) ;Table index = element ; newValues index = oldValues ; newState index = FULL ; } } }<CODESPLIT>Rehashes the contents of the receiver into a new table with a smaller or larger capacity . This method is called automatically when the number of keys in the receiver exceeds the high water mark or falls below the low water mark .
public void add ( HpackHeaderField header ) { headerSize header ( ) ; ( headerSize capacity ) clear ( ) ; return ; } ( capacity headerSize ) remove ( ) ; }packHeader head = header ; size size ( ) ; ( head hpackHeaderFields ) head = ; } }<CODESPLIT>Add the header field to the dynamic table . Entries are evicted from the dynamic table until the size of the table and the new header field is less than or equal to the table s capacity . If the size of the new entry is larger than the table s capacity the dynamic table will be cleared .
private void fired ( Direction initial ) { ( LauncherListener listener listenersLauncher ) listener notifyFired ( ) ; } ( LaunchableConfig launchableConfig launchables ) Media media Med create ( launchableConfig getMedia ( ) ) ; Featurable featurable create ( media ) ; Launchable launchable featurable getFeature ( Launchable ) ; ( launchable getDelay ( ) ) delayed ( DelayLaunch ( launchableConfig initial featurable launchable ) ) ; } launch ( launchableConfig initial featurable launchable ) ; } } LionEngine ) featurable getFeature ( Identifiable ) destroy ( ) ; ; } } }<CODESPLIT>Called when fire is performed .
public static void init ( InvocationManager invmgr, RootDObjectManager omgr ) {vm = invmgr ; = ; inv register ( TimeBase ( ) TimeBaseMarshaller GLOBALGROUP ) ; }<CODESPLIT>Registers the time provider with the appropriate managers . Called by the presents server at startup .
static UfsJournalFile createLogFile ( URI location long start long end ) UJournalFile ( location start ) ; }<CODESPLIT>Creates a journal log file .
protected Object writeReplace ( ) throws java. io. ObjectStreamException { return new CertificateRep ( type, getEncoded ( ) ) ; } CertificateException ) new java NotSerializable (javasecuritycertCertificate + type + + ( ) ) ; } }<CODESPLIT>Replace the Certificate to be serialized .
private static Throwable extractThrowable ( Object [ ] arguments ) { arguments length? : extractThrowable ( arguments arguments length ) ; }<CODESPLIT>Returns a throwable if the last argument is one .
public static List < Map < IBond, IBond > > makeBondMapsOfAtomMaps ( IAtomContainer ac1, IAtomContainer ac2, List < Map < IAtom, IAtom > > mappings ) { IBond IBond bondMaps IBond IBond ( ) ; ( IAtom IAtom mapping mappings ) bondMaps ( makeBondMapAtomMap ( mapping ) ) ; } return bondMaps ; }<CODESPLIT>Returns bond maps between source and target molecules based on the atoms
public LongConstant addLong ( long value ) { LongConstantByValue ( value ) ; ( ) ;Constant ( this _entries ( ) value ) ; addConstant ( ) ; addConstant ( ) ; return entry ; }<CODESPLIT>Adds a long constant .
public GeoPackage getOrOpen ( name File file getOrOpen ( name file ) ; }<CODESPLIT>Get the cached GeoPackage or open and cache the GeoPackage file
public static int extractVersionFromSchemaName ( String clz_name ) { clz (V ) ; ( idx ) ; return Integer. valueOf ( clz_name. substring ( idx + 1 ) ) ; } ( ) return - 1 ; } }<CODESPLIT>Extract the version number from the schema class name . Returns - 1 if there s no version number at the end of the classname .
private void drawShape ( Canvas canvas Paint paint Path path ShapeAppearanceModel shapeAppearanceModel RectF bounds ) { ( shapeAppearanceModelRoundRect ( ) corner shapeAppearanceModel getTopCorner ( ) getCor ( ) ; canvas drawRound ( bounds corner corner paint ) ; } canvas draw ( path paint ) ; } }<CODESPLIT>Draw the path or try to draw a round rect if possible .
public AnalyzerJob getAnalyzerJob ( final String descriptorName, final String analyzerName, final String analyzerInputName ) { < AnJob > candidates < > ( _jobs ) ; candidates =Candidates ( candidates o actualDescriptor getDescriptor ( ) getDisplayName ( ) ; return descriptorName. equals ( actualDescriptorName ) ; } ) ; ( analyzer ) candidates =Candidates ( candidates o actualAnalyzer getName ( ) ; return analyzerName. equals ( actualAnalyzerName ) ; } ) ; } ( analyzerInput ) candidates =Candidates ( candidates o InputColumn <? > inputColumn getIdentifyInputColumn ( ) ; ( inputColumn ) return ; } return analyzerInputName. equals ( inputColumn. getName ( ) ) ; } ) ; } ( candidates ( ) ) ( AnalyzerJob candidates choose from ) ; return null ; } ( candidates ( ) ) (Multiple AnalyzerJob candidates choose from picking first ) ; } return candidates. iterator ( ). next ( ) ; }<CODESPLIT>Gets the best candidate analyzer job based on search criteria offered in parameters .
public removeExecutedTradeCallback ( BitfinexExecutedTradeSymbol tradeSymbol BiConsumer BitfinexExecutedTradeSymbol BitfinexExecutedTrade callback Bitfinex traCallbacks removeCallback ( tradeSymbol callback ) ;<CODESPLIT>Remove a executed trade callback
public HealthDto doPrimaryHealthCheck ( ) { HealthDependency primaryHealthDependencies healthDependencies values ( ( filter ( HealthDependencyPrimary ) ( ( ) ) ; checkHealth ( primaryHealthDependencies ) ; }<CODESPLIT>Performs the Primary Health Check .
public static appfwxmlerrorpage get ( nitro_service service ) throws Exception { appfwxmlpage appfwxmlpage ( ) ; appfwxmlerrorpage ( appfwxmlerrorpage )resources ( service ) ; ] ; }<CODESPLIT>Use this API to fetch all the appfwxmlerrorpage resources that are configured on netscaler .
private void setupClient ( AbstractHttpClient client ) { this. client. addResponseInterceptor ( new HttpResponseInterceptor ( ) { void process ( HttpResponse response HttpContext context ) throws HttpException IOException { HeaderHeader (Location ) ; ( header context setAttribute (Location header ( ; } } ) ; }<CODESPLIT>This method is used to capture Location headers after HttpClient redirect handling .
private void quickSelect ( List < P > points, int splitAxis, int medianNum ) { numPoints = points size ( ) ; ( numPoints ) = numPoints ; indexes = numPoints ; } ( ; < numPoints ; ) [ ] = distance valueAt ( points ( ) splitAxis ) ; } QuickSelect selectIndex (, medianNum, numPoints, indexes ) ; }<CODESPLIT>Uses quick - select to find the median value
public void writeHtml ( JspWriter pOut, String pHtml ) throws IOException { parser = ( pHtml>& ) ; ( parser ( ) ) token = parser ( ) ; ( token ( "<" ) ) pOut print ( "&lt ) ; } ( token ( ) ) pOut print ( "& ) ; } if ( token ( "&" ) ) pOut print ( "&amp ) ; } pOut print ( token ) ; } } }<CODESPLIT>writeHtml ensures that the text being outputted appears as it was entered . This prevents users from hacking the system by entering html or jsp code into an entry form where that value will be displayed later in the site .
protected String getNodeName ( Node node ) { node getLocalName ( ) ;? node getNodeName ( ) : ; }<CODESPLIT>Returns the node name . First tries local name . If this is null returns instead the full node name .
public void setExpiryDate ( IntRange ( from = to = ) int month IntRange ( from = to = 9999 ) int year ) {ExpiryEditText setText ( DateInput ( month year ) ) ; }<CODESPLIT>Set the expiration date . Method invokes completion listener and changes focus to the CVC field if a valid date is entered .
protected void writeApplyDdl ( DdlWrite write ) { scriptInfoApplyD ( drop dependencies write applyDropDependencies ( ) ( ) + + apply changes + write apply ( ) ( ) + write applyForeignKeys ( ) ( ) + write applyHistoryView ( ) ( ) + write applyHistoryTrigger ( ) ( ) ) ; }<CODESPLIT>Write the Apply DDL buffers to the writer .
protected static final boolean classEquals ( Class clz1, Class clz2 ) { ( clz clz ) new ( ) ; } return clz == clz clz getName ( ) equals ( clz getName ( ) ) ; }<CODESPLIT>Compares if two classes are equal or their class names are equal .
public void addSharedFunction ( ISource source ) { fileName source ( ( source ) ( ) ; doAddSharedFunction ( source fileName ) ; }<CODESPLIT>Add shared function by ISource
public setCommercePriceListService ( com liferay commerce. price. list. service. CommercePriceListService commercePriceListService commercePriceList commercePriceList ;<CODESPLIT>Sets the commerce price list remote service .
public static HtmlTree MAIN ( ) { HtmlTree html HtmlTree ( HtmlTag MAIN ; htmlRole ( Role MAIN ; htmltree ; }<CODESPLIT>Generates a MAIN tag with role attribute .
public static cachepolicylabelstats get ( nitro_service service String labelname ) throws Exception { cachepolicylabelstats cachepolicylabelstats ( ) ;label ( label ) ; cachepolicylabelstats ( cachepolicylabelstats ) obj statresource ( service ) ; ; }<CODESPLIT>Use this API to fetch statistics of cachepolicylabel_stats resource of given name .
protected void saveBroker ( File mapfile, HashMapIDBroker broker ) throws RuntimeException { ( broker isModified ( ) ) return ; } ( ( mapfile ) ) ; broker writeTo ( ) ; close ( ) ; } ( ) new RuntimeException ( " store component ID mapmapfile + mapfile +, ) ; } }<CODESPLIT>Stores a persistent representation of the supplied hashmap ID broker in the specified file .
public void update ( Collection T values ) Data jdbcTemplate. execute ( ConnectionCallback Object ( ) Object doInConnection ( Connection connection ) SQLException Data crud update ( connection values ) ; ; } } ) ; }<CODESPLIT>update the objects .
public static MutableInt fromExternal ( IntSupplier s IntConsumer c ) MutableInt ( ) getAsInt ( ) s getAsInt ( ) ; } Integer get ( ) getAsInt ( ) ; } MutableInt set ( value ) accept ( ; this ; } } ; }<CODESPLIT>Construct a MutableInt that gets and sets an external value using the provided Supplier and Consumer
public void configure ( Config config ) { (Reloading configuration ) ; this configWrite ( ) ; this config = config ; processAppPackages ( config ) ; } this configWrite ( ) ; } }<CODESPLIT>Replace the configuration of this instance directly .
protected void addPropertiesStart ( String type ) { putProperty ( Host name ( ) Ip getHost ( ) ) ; putProperty ( name ( ) type ) ; putProperty ( name ( ) Start name ( ) ) ; }<CODESPLIT>Add properties to properties map on transaction start
public List < SequenceListType. Sequence getSequence ( ) { ( sequence ) sequence SequenceListType Sequence ( ) ; } return this sequence ; }<CODESPLIT>Gets the value of the sequence property .
public MapBuilder addNumber ( String fieldName boolean include Supplier < Number supplier ) { ( include ) Number supplier ( ) ; ( ) map put ( getFieldName ( fieldName ) ) ; } } this ; }<CODESPLIT>Adds the number value to the provided map under the provided field name if it should be included . The supplier is only invoked if the field is to be included .
public void disconnectCardOneConsumer ( ) { if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr entry ( tc,disconnectCardOneConsumer ) ; Object clonedConsumerPoints = ; synchronized ( consumerPoints ) { clonedConsumerPoints = consumerPoints toArray ( ) ; } Simit e = Simit ( (CONSUMERCARDINALITYLIMITREACHED, Object getDestName ( ), getLocalisationUuid ( ) ( ) }, null ) ) ; ( e,comsibprocessorimplRemoteConsumerDispatcherdisconnectCardOneConsumer,21, this ) ; SibTr exception ( tc, e ) ; ( i = ; i < clonedConsumerPoints. ; i ) DispatchableKey ck = ( DispatchableKey ) clonedConsumerPoints ; ck notifyConsumerPointAboutException ( e ) ; } if ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) SibTr ( tc,disconnectCardOneConsumer ) ; }<CODESPLIT>The disconnectCardOneConsumer method is invoked by the Anycast Input Handler to notify it that the current cardinality - one consumer must be disconnected . This can happen when this RME becomes unreachable and the DME allows a consumer in a separate RME to connect . As soon as this RME becomes reachable again the DME sends ControlCardinalityInfo to trigger this consumer s disconnection .
public boolean isAdministrator ( AuthContext ctx ) { ctx getUsername ( ) ctx getUsername ( ) ( adminName ) ctx getPassword ( ) ctx getPassword ( ) ( adminPass ) ; }<CODESPLIT>Check if the given credentials allow administrative access
protected void init ( ) { ( settings autostart ( ) ) settingsRunner ( ) ; config (Using runner + runner getClass ( ) getSimpleName ( ) ) ; } settings ( OperaDefaults SERVER ) ; } createScopeServices ( ) ; ( runner ) runner startOpera ( ) ; } services init ( ) ; debugger servicesDebugger ( ) ; debuggerDriver ( this ) ; windowManager services getWindowManager ( ) ; exec servicesExec ( ) ; core services getCore ( ) ; cookieManager services getCookieManager ( ) ; mouse OperaMouse ( this ) ; keyboard OperaKeyboard ( this ) ; servicesConsoleLogger ( ) onConsoleMessage ( ConsoleMessageConverter ( logs ) ) ; settingsProduct ( ( ) getProduct ( ) ) ; ( ( ) getUserAgent ( ) (Min ) ) preferences OperaScopePreferences ( services getPre ( ) ) ; preferences ( ) (User Prefs,Ignore Un Pop, ) ; ( ( ) getProduct ( ) ( M ) ) preferences ( ) (User Prefs,Allow Autofocus Form Element, ) ; } } proxy OperaProxy ( this ) ; proxy parse ( settings getProxy ( ) ) ; }<CODESPLIT>Initialize required Scope services .
public static String calculateMD5 ( String string ) { byte hash ; hash = MessageDigest getInstance (MD5 ) digest ( string getBytes (UTF ) ) ; } ( NoSuchAlgorithmException ) { new RuntimeException ( "Huh MD5 should supported, e ) ; } ( UnsupportedEncodingException e ) { new RuntimeException ( "Huh UTF-8 should supported, e ) ; } hex ( hash 2 ) ; ( byte b hash ) ( b & ) ; (10 ) hex append ( ) ; hex ( Integer toHexString ( i ) ) ; } return hex. toString ( ) ; }<CODESPLIT>Calculate the MD5 of a given String
protected static File findRawDir ( File dir ) { ( ; dir 20 ; ) File rawDir findResRawDir ( dir ) ; ( raw ) return rawDir ; } dir dir getParentFile ( ) ; } return null ; }<CODESPLIT>Look for the resource - directory in the current directory or the directories above . Then look for the raw - directory underneath the resource - directory .
public Object resolveVariable ( String pName ) throws ELException { ELEL ( ) ; ctxELResolver ( ) getValue ( ctx, pName ) ; }<CODESPLIT>LIDB4147 - 9 Begin - modified for JSP 2 . 1
protected DependantValue createPrimaryKeyValue ( InFlightMetadataCollector mappings, PersistentProperty property, Collection collection, Map <, > persistentClasses ) { KeyValue keyValue ; Depend key ; propertyRef collection getReferencePropertyName ( ) ; ( propertyRef ) keyValue collection getOwner ( ) getIdentifier ( ) ; } keyValue ( KeyValue ) collection getOwner ( ) ( propertyRef ) ( ) ; } ( ( ) ) (GrailsDomainBinder creating dependant key value table + keyValue getTable ( ) getName ( ) + ) ; key Dependant ( metadataBuilding collection getCollectionTable ( ) keyValue ) ; key ( ) ; key ( ) ; keyUpdate ( ) ; return key ; }<CODESPLIT>Creates the DependentValue object that forms a primary key reference for the collection .
protected AVariableExp getVarExp ( ILexNameToken name PDefinition vardef PType type ) AVariableExp getVarExp ( ) ; ( ; var ; }<CODESPLIT>Generate Var Exp with everything!
public static boolean isNullOrWhiteSpace ( String arg ) { ( ( arg ) arg ( ) ( ) ) return ; } return ; }<CODESPLIT>Determines whether the parameter string is null empty or whitespace .
public BlockInfo queryBlockByNumber ( long blockNumber Proposal queryBlockNumber ( getShuffPeers ( EnumSet ( PeerRole LEDQUERY ) ) blockNumber ) ; }<CODESPLIT>query this channel for a Block by the blockNumber . The request is retried on all peers till successful
 (" ) static Getter getGetter ( Class type name )GettersAsMap ( type ) ( name ) ; }<CODESPLIT>Search getter for given class and property name .
public static String decodeLZToString ( byte [ ] data String dictionary ) { String ( decodeLZ ( data ),UTF8 ) ; } ) new ( ) ; } }<CODESPLIT>Decode lz to string string .
public AirlineUpdateTemplateBuilder addAirlineUpdateTemplate ( introMessage locale pnrNumber UpdateType updateType AirlineFlightUpdateTemplateBuilder ( introMessage locale pnNumber update ) ; }<CODESPLIT>Adds an Airline Flight Update Template to the response .
private void addModulesArgument ( final String argument, final List < String > arguments, final Module [ ] modules, final String aditionalpath, final String role ) throws MojoExecutionException { buf = ( ) ; ( adpath ) arguments add ( argument ) ; buf ( aditionalpath ) ; } ( modules modules ) ( arguments contains ( argument ) ) arguments add ( argument ) ; } ( ; < modules ; ) Module module = modules ; Artifact artifact = ; ( ) Set < Artifact > allArtifacts = projectArtifacts ( ) ; ( Artifact art allArtifacts ) ( art getGroupId ( ) ( module getGroupId ( ) ) art getArtifactId ( ) ( module getArtifactId ( ) ) defaultString ( module getClassifier ( ) ) ( defaultString ( art getClassifier ( ) ) ) defaultString ( module getType ( ),jar ) ( defaultString ( art getType ( ) ) ) ) artifact = art ; ; } } ( artifact ) throw new MojoExecutionException ( "The artifact " + module toString ( ) + " referenced in aspectj plugin as " + role + found project dependencies" ) ; } ( buf ( ) ) buf ( File pathSeparatorChar ) ; } buf ( artifact getFile ( ) getPath ( ) ) ; } } ( buf ( ) ) pathString = buf toString ( ) ; arguments add ( pathString ) ; getLog ( ) (Adding + argument + + pathString ) ; } }<CODESPLIT>Finds all artifacts in the weavemodule property and adds them to the ajc options .
public static String extractAeroGearSenderInformation ( HttpServletRequest request ) { client getHeader (aogearsender ) ; ( hasValue ( client ) client ; } request getHeader (useragent ) ; }<CODESPLIT>Reads the aerogear - sender header to check if an AeroGear Sender client was used . If the header value is NULL the value of the standard user - agent header is returned
public Flux < ServiceMessage requestMany ( ServiceMessage request Class < responseType, Address address ) { return Flux defer ( ( ) -> ( addressMany address parameter required ) ; ( transporttransport required ) ; return transport create ( address ) requestStream ( request ) map ( message -> ServiceMessageCodec decodeData ( message, responseType ) ) map ( this ::Error ) ; } ) ; }<CODESPLIT>Given an address issues request to remote service which returns stream of service messages back .
public void incrementalRestore ( File incrementalBackupFile ) throws FileNotFoundException, IOException, ClassNotFoundException, RepositoryException { ObjectInputStream ois ; ois ObjectInputStream (File fileInputStream ( incrementalBackupFile ) ) ; ( ) TransactionChangesLog changesLog readExternal ( ois ) ; changesLog setSystem ( Constants JCRCORERESTOREWORKSPACEINITIALIZSYSTEMID ) ; ChangesLogIterator cli changesLog getLogIterator ( ) ; (Log ( ) ) ( cliLog ( ) getEvent ( ) ExtendedEvent LOCK ) cli removeLog ( ) ; } } saveChangesLog ( changesLog ) ; } } ( ) ( ( ) ) trace (An exception + ( ) ) ; } } }<CODESPLIT>Perform incremental restore operation .
public Key < Integer start ( ) { Key object Key ( ) ; consumers. put ( object new Consumer < Integer ( ) { ; void consume ( ByteBuffer buffer ) { remaining ( ) ; } Integer finish ( ) { count ; } } ) ; object ; }<CODESPLIT>Initializes a byte counter on this channel .
public static boolean isElementPresent ( String locator ) { entering ( locator ) ; flag ; flag HtmlElement locateElement ( locator ) ; } NoSuchElementException ) } exiting ( flag ) ; return flag ; }<CODESPLIT>Checks if the provided element is present on the page based on the locator provided
public static void main ( String args [ ] ) throws Exception { buffer (The lazy fox ) ; Thread t1 = new Thread ( ) { public void run ( ) { synchronized ( buffer ) { buffer delete (, 4 ) ; buffer ( in middle ) ; System (Middle ) ; Thread sleep ( 4 ) ; } ( ) { } buffer ( of fall ) ; System (Fall ) ; } } } ; Thread t2 = new Thread ( ) { public void run ( ) { Thread sleep ( 1000 ) ; } ( ) { } buffer ( jump over fence ) ; System (F ) ; } } ; t start ( ) ; t start ( ) ; t join ( ) ; t join ( ) ; System ( buffer ) ; }<CODESPLIT>We have more input since wait started
protected double interpolate ( double boundA, double boundB ) { alphaNew ; ( isNaN ( gp ) ) alphaNew SearchInterpolate quadratic ( f g st fp st ) ; } alphaNew SearchInterpolate cubic ( f g st fp gp st ) ; ( isNaN ( alphaNew ) ) alphaNew = SearchInterpol quadratic ( fprev gprev stprev fp stp ) ; } u ; ( boundA boundB ) = bound ; u = boundB ; } = boundB ; u = boundA ; } ( alphaNew ) alphaNew = ; ( alphaNew u ) alphaNew = u ; return alphaNew ; }<CODESPLIT>Use either quadratic of cubic interpolation to guess the minimum .
private List < SemanticError > check ( DataType dataType ) {er (Checking semantic constraints on datatype + dataType name ) ; < SemanticError > errors < SemanticError > ( ) ; Set < > constructorNames < > ( ) ; ( Constructor constructor dataType constructors ) (Checking semantic constraints on constructor + constructor name + in datatype + dataType name ) ; ( dataType constructors ( ) dataType name ( constructor name ) ) (Constructor with name as data type + dataType name + ) ; errors add ( _ConstructorDataTypeConflict ( dataType name ) ) ; } ( constructorNames ( constructor name ) ) (Two constructors with same name + constructor name + in data type + dataType name + ) ; errors add ( _DuplicateConstructor ( dataType name, constructor name ) ) ; } constructorNames add ( constructor name ) ; } errors addAll ( check ( dataType, constructor ) ) ; } return errors ; }<CODESPLIT>Checks a data type for duplicate constructor names or constructors having the same name as the data type
 ( } ) protected void registerDependency ( List additionalList, GrailsPlugin plugin ) { ( addedNames ( plugin getName ( ) ) ) addedNames ( plugin getName ( ) ) ; additionalList ( plugin ) ;PluginDependencies ( additionalList plugin ) ; } }<CODESPLIT>Adds a plugin to the additional if this hasn t happened already
private JsonNode executeRequest ( HttpPost request ) throws IOException, GroovesharkException { httpClient execute ( request ) ; (Logging )Request ( request, response ) ; }Payload CharStreams ( ( response getEntity ( ) getContent ( ) Char ) ) ; return jsonMapper. readTree ( new StringReader ( responsePayload ) ) ; } ( JsonProcessingException ) new Groark Server ( " parse response received data valid JSON " + responsePayload ) ; } }<CODESPLIT>Boilerplate to send the request and parse the response payload as JSON .
public Map < String, T > parseMap ( JsonParser jsonParser ) throws IOException { T > map T > ( ) ; ( json nextToken ( ) ENDOBJECT ) key jsonParser getText ( ) ; jsonParser ( ) ; ( jsonParser getCurrentToken ( ) JsonToken VALUENULL ) map put ( key ) ; } map put ( key parse ( jsonParser ) ) ; } } return map ; }<CODESPLIT>Parse a map of objects from a JsonParser .
public DateFuncSup subtract ( DateSeperator d ) { date ( date ( ( ) ; this ; }<CODESPLIT>subtract date on supported date
private double radicalInverse ( long i ) { digit = ( ) base ; radical = digit ; inverse = ; ( ) inverse digit ( double ) ( i base ) ; digit radical ; /= base ; } return inverse ; }<CODESPLIT>Compute the radical inverse of i .
public static String getTempDir ( ) { ( FileUtil class ) { ( TEMPDIR ) tmpDir System getProperty (javaiotmpdir ) ; ( StringUtil ( tmpDir ) ) ( new File ( "/temp ) exists ( ) ) tmpDir =temp ; } tmpDir = ; } } TEMPDIR = tmpDir ; } } return TEMP_DIR ; }<CODESPLIT>Gets the default temp directory for the system .
public static < Accumulator Value Accumulator reduce ( List < Value list Accumulator init ReduceClosure < Accumulator Value f ) { Acc init ; ( Value value list accumulator f eval ( accumulator ) ; } accumulator ; }<CODESPLIT>Applies a binary function between each element of the given list .
protected ProcessOutput executeProcess ( FaxJob faxJob String command FaxActionType faxActionType ) { ( command ) thisUnsupported ( ) ; } updatedCommand command ; (WindowsCommandPrefix ) buffer ( updatedCommand ( ) this windowsCommandPrefix ( ) ) ; buffer ( this windowsCommandPrefix ) ; buffer ( ) ; buffer ( updatedCommand ) ; updatedCommand buffer ( ) ; } ProcessOutput processOutput ProcessExecutor executeProcess ( this updatedCommand ) ; this validateProcessOutput ( processOutput fax ) ; this updateFaxJob ( faxJob processOutput fax ) ; return processOutput ; }<CODESPLIT>Executes the process and returns the output .
public ModelNode getConnector ( String name ) throws Exception { Address address Address root ( ) ( SUBSYSTEM SUBSYSTEMWEB CONNECT ) ; readResource ( address ) ; }<CODESPLIT>Returns the connector node with all its attributes . Will be null if it doesn t exist .
int match ( CharsetDetector det, int [ ] commonChars ) { (unused ) int singleCount = ;ByteCharCount = ; commonCharCount = ; badCharCount = ; totalCharCount = ; confidence = ; iteratedChar iter = iteratedChar ( ) ; detectBlock : ( reset ( ) ; nextChar ( det ) ; ) totalCount ; ( iter error ) badCount ; } cv = iter charValue &L ; ( cv ) singleByteCount ; } doubleByteCount ; ( commonChars ) ( binarySearch ( commonChars, ( int ) cv ) >= )Count ; } } } } ( badCharCount >= 2 badCharCount 5 >= doubleByteCharCount ) detectBlock ; } } ( doubleByteCharCount 10 badCharCount ) if ( doubleByteCharCount totalCharCount 10 ) confidence = ; } confidence = 10 ; } detectBlock ; } if ( doubleByteCharCount 20 badCharCount ) confidence = ; detectBlock ; } if ( commonChars ) confidence = 30 +Count badCount ; if ( confidence 100 ) confidence = 100 ; } } maxVal = log ( ( float )ByteCharCount 4 ) ; scale = 90 maxVal ; confidence = ( int ) ( log ( commonCharCount + ) scaleFactor + 10 ) ; confidence = min ( confidence, 100 ) ; } } return confidence ; }<CODESPLIT>Test the match of this charset with the input text data which is obtained via the CharsetDetector object .
public static void extract ( DMatrix src int srcY0, int srcY1, int srcX0, int srcX1, DMatrix dst ) { ( ( ReshapeMatrix ) dst ) ( src src srcX srcX ) ; extract ( src src src srcX srcX dst ) ; }<CODESPLIT>Extract where the destination is reshaped to match the extracted region
public void resizeEip ( ResizeEipRequest request ) { ( request getNewBandwidthMps ( )newBandwidthMps ) ; checkString ( request getEip ( )ip be empty ) ; ( ( request getClientToken ( ) ) ) request setClientToken ( generateClientToken ( ) ) ; } InternalRequest internalRequest this createRequest ( request Http PUT request getEip ( ) ) ; internalRequest addParameter (resize ) ; internalRequest addParameter ( CLIENTTOKENIDENTIFY request getClientToken ( ) ) ; fillPayload ( internalRequest request ) ; invokeHttpClient ( internalRequest AbstractBceResponse ) ; }<CODESPLIT>Resizing eip The Prepaid eip can not be downgrade . This is an asynchronous interface .
private void useNextAddressAsNewContactSeedBroker ( ) { (ContactSeedBrokerIndex seedBrokerAddresses )ContactSeedBrokerIndex = ; } URLContactUrl Net getCorrectHostname ( seedBrokerAddressesContactSeedBrokerIndex ) ; this consumer SimpleConsumer (ContactUrl getHost ( )ContactUrl ( ) so bufferSize dummyClientId ) ; }<CODESPLIT>Re - establish broker connection using the next available seed broker address .
private String unescape ( String value ) { result ( ) ; ( ; < value ( ) ; ) char c = value charAt ( i ) ; ( c ESCAPEPREFIX ) codeString value ( + + 3 ) ; code Integer ( codeString 16 ) ; ( code reservedChars reservedChars code code ) result ( reservedChars code ) ; i 2 ; } throw new ServiceLocationException ( "Unknown escaped character " + ESCAPE_PREFIX + codeString + " at position " + ( i + 1 ) + " of " + value, SError PARSE_ ) ; } } result ( c ) ; } } return result. toString ( ) ; }<CODESPLIT>Unescapes the scope string following RFC 2608 6 . 4 . 1
protected HashMap readFile ( HashMap brMap ) throws IOException { ( ) ; < > expArr < > ( ) ; <, HashMap files readObvData (Map ) ; ArrayList HashMap >vData ; HashMapv ; HashMap expData ; ( ex files ( ) ) obvData ( ) files (name ) ( obv ) ; ( obvSub obvData ) expData ( ) ; obv ( ) ; copyItem ( expData files (name )exname ) ; copyItem ( expData files (name )crid ) ; copyItem ( expData files (name )local_name ) ; expData put ( jsonKey, obv ) ; obv put ( obvFileKey obvSub ( obv ) ) ; expArr add ( expData ) ; } } idNames ( ) ; idNames add (trno ) ; removeIndex ( expArr, idNames ) ; put (experiments, expArr ) ; return ; }<CODESPLIT>DSSAT TFile Data input method for Controller using
public static FixedStringSearchInterpolator createInterpolator ( MojoParameters params String filter ) { delimiters extractDelimit ( filter ) ; ( delimiters FixedStringSearchInterpolator create ( ) ; } DockerAssemblyConfigurationSourceSource DockerAssemblyConfigurationSource ( ) ; AssemblyInterpolator fullInterpolator ( params getProject ( ), DefaultAssemblyReader createProjectInterpolator ( params getProject ( ) )ExpressionMarkers ( delimiters, delimiters ), configSource )ExpressionMarkers ( delimiters, delimiters ) ; }<CODESPLIT>Create an interpolator for the given maven parameters and filter configuration .
public static boolean isPartitionCleanupInProgress ( ZooKeeper zk ) throws KeeperException, InterruptedException { < > children zk getChildren ( VoltZK leadersinit ) ; < ZK ChildrenCallback > childrenCallbacks Lists ( ) ; ( child children ) ZK ChildrenCallback callback ZK ChildrenCallback ( ) ; zk getChildren ( ZK joinZKPath ( VoltZK leadersinit child ),, callback, ) ; childrenCallbacks add ( callback ) ; } ( ZK ChildrenCallback callback childrenCallbacks ) ( callback ( ) ( ) ) return true ; } } return false ; }<CODESPLIT>Checks if the cluster suffered an aborted join or node shutdown and is still in the process of cleaning up .
private byte [ ] unifyLData ( final CEMI ldata, final boolean emptySrc, final List < Integer > types ) { byte data ; ( ldata CEMILDataEx ) CEMDataEx ext ( ( CEMDataEx ) ldata ) ; < AddInfo > additionalInfo ext additionalInfo ( ) ; synchronized ( additionalInfo ) { ( final Iterator < AddInfo additionalInfo ( ) ; ( ) ; ) AddInfo info ( ) ; ( types contains ( info getType ( ) ) ) (remove L-Data additional, ) ; i remove ( ) ; } } } } data = ldata toByteArray ( ) ; data = ; data + data + = ; ( emptySrc ) data + data + 3 = ; data + data + 4 = ; } return data ; }<CODESPLIT>additional info . types provides the list of add . info types we want to keep everything else is removed
public static < T extends Number > int [ ] asArray ( final T... array ) { b = array ; ( = ; i < b. ; i ) b i = array i intValue ( ) ; } return b ; }<CODESPLIT>Convert any number class to array of integer .
synchronized void setActiveChunkHandle ( SegmentHandle handle ) { checkArgument ( handle handle isReadOnly ( )Active SegmentChunk handle cannot readonly." ) ; SegmentChunk last = lastChunk ( ) ; checkState (Cannot an Active SegmentChunk handle are no SegmentChunks." ) ; checkArgument ( handle handle getSegment ( ) ( getName ( ) )Active SegmentChunk handle must for the SegmentChunk." ) ; this activeChunkHandle = handle ; }<CODESPLIT>Sets the Active SegmentChunk handle .
public String getEmptyValue ( ) { ( Timex3Interval featOkTst ( ( Timex3Interval ) jcasType ) casFeatempty ) jcasType jcas throwFeatMissing (emptydeunutypesheideltimeTimex3Interval ) ; return jcasType ll_cas ll_StringValue ( addr, ( ( Timex3Interval_Type ) jcasType ). casFeatCode_emptyValue ) ; }<CODESPLIT>getter for emptyValue - gets
public static AccountInfo adaptAccountInfo ( BitstampBalance bitstampBalance, String userName ) { < Balance >alances < > ( ) ; ( knowchange bitstamp dto account BitstampBalance bitstampBalance getBalances ( ) ) Balance xchangeBalance Balance ( Currency ( getCurrency ( ) ( ) ) getBalance ( ) b getAvailable ( ) bReserved ( ) b getBalance ( ) subtract ( b getAvailable ( ) ) subtract ( bReserved ( ) ) ) ; b add ( xchangeBalance ) ; } return new AccountInfo ( userName, bitstampBalance. getF ( ), new Wallet ( b ) ) ; }<CODESPLIT>Adapts a BitstampBalance to an AccountInfo
public void afterConnectionClosed ( WebSocketSession session, CloseStatus status ) { (WebSocket closed Close Status session status ( ) ) ; }<CODESPLIT>Invoked after the web socket connection is closed . You can override this method in the child classes .
public static String trimLastPathSection ( String path ) { sections = path split ( "/" ) ; newPath = ( "/" ) ; ( = ; < sections ; ) newPath append ( sections i ) append ( "/" ) ; } return newPath. toString ( ) ; }<CODESPLIT>Removes the last part of a file path .
public static Style red ( ) { Style style Style ( ) ; style color PaletteolidColor ( Palette MATERIAL ) ; style ; }<CODESPLIT>Default material red transparent style for SuperToasts .
public ManagedObjectContext createContext ( ) { Bean T bean ; EjbDescriptor T ejbDescriptor getEjbDescriptor ( ) ; ( ejbDescriptorMessageDr ( ) ) bean getBean ( ) ; } WManager beanManager getBeanManager ( ) ; WCreational T creation beanManager createCreational ( bean ) ; ManagedObject managedObject CManagedObjectState ( ) ; return managedObjectContext ; }<CODESPLIT>This version creates a ManagedObjectContext which contains a CreationalContext for an EJB .
public void deleteOperation ( String name ) {Operation DeleteOperation newBuilder ( ) ( ) ( ) ; deleteOperation ( request ) ; }<CODESPLIT>Deletes a long - running operation . This method indicates that the client is no longer interested in the operation result . It does not cancel the operation . If the server doesn t support this method it returns google . rpc . Code . UNIMPLEMENTED .
public boolean isMember ( int x ) { check ( currentState BitsState UNKNOWN ) ; x && x < ( bits length word ) && ( bits x word & ( ( x & word ) ) ) ; }<CODESPLIT>Is x an element of this set?
publicRegistration addSearchFinishHandler ( SearchFinishEvent SearchFinishHandler handler addHandler ( handler SearchFinishEvent ) ;<CODESPLIT>This handler will be triggered when search is finish
public void setForeignBusSendAllowed ( boolean sendAllowed ) { ( TraceComponent ( ) tc ( ) ) SibTr ( tcsetForeignBusSendAllowed Boolean valueOf ( sendAllowed ) ) ; } _sendAllowedOnTargetForeignBus Boolean valueOf ( sendAllowed ) ; ( aliasesTargetThisDest ) ( aliasesDest ) Iterator aliasesThatTargetThisDest iterator ( ) ; ( ( ) ) AbstractAliasDestinationHandler abstractAliasDestinationHandler ( AbstractAliasDestinationHandler ) ( ) ; abstractAliasDestinationHandlerForeignBusSend ( send ) ; } } } ( TraceComponent ( ) tc ( ) ) SibTr ( tcsetForeignBusSendAllowed ) ; } }<CODESPLIT>Set the Foreign Bus Level sendAllowed flag
public void processingInstruction ( String target String data ) throws SAXException { ( documentHandler documentHandler processing ( data ; }<CODESPLIT>Adapt a SAX2 processing instruction event .
public static Integer getFileSizeOnFTPServer ( String hostName, Integer port, String userName, String password, String filePath ) { Integer result ; replyString executeCommandFTPServer ( hostName port userName passwordSIZE filePath ) ; ( replyString replyString contains ( ) ) new RuntimeException ( String format ( "Unable to get size of file Got [% reply from FTP server.", filePath, replyString ) ) ; } result = Integer valueOf ( replyString split ( ) replaceAll ( "[, ) ) ; } return result ; }<CODESPLIT>Get size of the FTP file .
public static base_responses enable ( nitro_service client, String trapname [ ] ) throws Exception { baseresponses result = ; if ( trapname trapname ) { snmpalarm enableresources = snmpalarm trapname ; ( = ; < trapname ; ) enableresources i = snmpalarm ( ) ; enableresources trapname = trapname ; } result = performbulkrequest ( client, enableresources,enable ) ; } return result ; }<CODESPLIT>Use this API to enable snmpalarm resources of given names .
public void ordered ( Consumer T action ) { TopSorter T sorter TopSorter ( ) ; sorter ordered ( action ) ; }<CODESPLIT>Traverse this graph and performs the given action in topological order
public static SeqServerGroup parse ( String asg ) { d as ( '-' ) ; d asg ( '-' d + ) ; dN asg ( '-' ) ; (NSequence ( asgN ) ) dN asg ( ) ; } return new SeqServerGroup ( asg, d1, d2, dN ) ; }<CODESPLIT>Create a new instance of a server group object by parsing the group name .
private static int getMapCount ( int srcCount, int numNodes ) {Maps ( ) ( src OPMAP ) ;Maps min ( numMaps numNodesMAPNODE ) ; return Math. max ( numMaps, 1 ) ; }<CODESPLIT>Calculate how many maps to run .
protected void channelRead0 ( ChannelHandlerContext ctx, FullBinaryMemcacheResponse msg ) throws Exception { ( msg getStatus ( ) ) SUCCESS originalPromiseSuccess ( ) ; ctx pipeline ( ) remove ( this ) ; ctx fireChannelActive ( ) ; ; ACCESS originalPromiseFailure ( AuthenticationException (Authentication on Select Bucket ) ) ; ; NOT originalPromiseFailure ( AuthenticationException (Bucket on Select Bucket ) ) ; ; : originalPromiseFailure ( AuthenticationException (Unhandled select bucket status + msg getStatus ( ) ) ) ; } }<CODESPLIT>Handles incoming Select bucket responses .
private DiceNotationExpression unwrap ( DiceNotationExpression expression ) { DNotationExpression ; ( expression ExpressionWrapper ) ( ( ExpressionWrapper ) expression )WrappedExpression ( ) ; } expression ; } ; }<CODESPLIT>Removes the expression wrappers used to temporally prune the nodes .
public static float [ ] checkArrayElementsInRange ( float [ ] value, float lower, float upper, String valueName ) { checkNotNull ( value, valueName + must not be ) ; ( ; < value ; ) v value ; ( Float isNaN ( v ) ) new IllegalArgumentException ( valueName + "[" + i + NaN" ) ; } ( v lower ) new IllegalArgumentException ( String format (d out of range offf ( low, valueName, i, lower, upper ) ) ; } ( v upper ) new IllegalArgumentException ( String format (d out of range of [%ff ( high, valueName, i, lower, upper ) ) ; } } return value ; }<CODESPLIT>Ensures that all elements in the argument floating point array are within the inclusive range
public static void copy ( InputStream inputStream OutputStream outputStream ) copy ( inputStream outputStream ; }<CODESPLIT>Writes the content provided by the given source input stream into the given destination output stream .
private static Collection < Tuple > getTuples ( List < VarDef > varDefs, int varStart, int varEnd, int tupleSize ) { Collection < Tuple > tuples < Tuple > ( ) ; ( var ; var ; ) VarDef nextVar varDefs ( ) ; Iterator < VarValueDef valuesVar getValidValues ( ) ; ( values ( ) ) new IllegalStateException ( "Can't complete tuples -- no valid values defined for var + nextVar ) ; } Collection < Tuple > subTuples tuple? : getTuples ( varDefs + var + tuple ) ; ( subTuples ) ( values ( ) ) tuples add ( Tuple ( VarBindingDef (Var values ( ) ) ) ) ; } } ( subTuples ( ) ) ( values ( ) ) VarBindingDefBinding VarBindingDef (Var values ( ) ) ; ( Tuple subTuple subTuples ) TupleTuple Tuple (Binding ) addAll ( subTuple ) ; ( nextTupleCompatible ( ) ) tuples add (Tuple ) ; } } } } } return tuples ; }<CODESPLIT>Returns all valid tuples of values for the given input variables .
public V get ( K key ) { hash = hash ( key ) ; slot = ( hash ) ; ( < K V > table slot ; null ; next ) if ( entry hashCode hash entry key ( key ) ) { return entry. value ; } } return null ; }<CODESPLIT>Looks up the value mapped under the given key . Returns null if no value is mapped under this key .
public validSecondFactor ( String secret String number ) { ( secret Required SECRET ( ) ) ; ( number Required TOTP ( ) ) ; Totp verifiedTotp ( secret, number ) ; }<CODESPLIT>Checks if a given number for 2FA is valid for the given secret
protected void updateOutgoingEdgesStateDL ( int currS, int currL, int prevS, int prevL, Emissions emission ) { updateOutgoingEdges ( curr currL States DLSL States DL Transitions tDLin em ) ; updateOutgoingEdges ( currS currL States DLSL States S Transitions tSDL em ) ; }<CODESPLIT>Enumerates the possible transitions into state DL .
public void setPrefix ( String key, String prefix ) { fieldname ( key ) ; PdfObject get ( fieldname ) ; ( o ) new ( a value before adding a prefix ) ; PdfDictionary dict PdfDictionary ( COLLECTIONSUBITEM ) ; dict put ( PdfName D ) ; dict put ( P Pdf ( prefix PdfObject TEXTUNICODE ) ) ; put ( fieldname dict ) ; }<CODESPLIT>Adds a prefix for the Collection item . You can only use this method after you have set the value of the item .
protected AbstractExpression replaceExpressionsWithPve ( AbstractExpression expr ) { assert ( expr ) ; ( expr TupleValueExpression ) param ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpressionve ParameterValueExpression ( param expr ) ; mparameterTveMap put ( param expr ) ; return pve ; } ( expr AggregateExpression ) param ParameterizationInfo getNextParamIndex ( ) ; ParameterValueExpressionve ParameterValueExpression ( param expr ) ; < TupleValueExpression > Expression getTupleValueExpressions ( expr ) ; assert ( mparentStmt ) ; ( TupleValueExpressionve ) origIdveStmtId ( ) ; ( mstmtId origId mparentStmt mstmtId origId ) new Pl ( "Subqueries do support aggregation of parent statement columns" ) ; } } mparameterTveMap put ( param expr ) ; return pve ; } ( expr getLeft ( ) ) exprLeft ( replaceExpressionsP ( expr getLeft ( ) ) ) ; } ( expr getRight ( ) ) expr ( replaceExpressionsP ( expr ( ) ) ) ; } ( expr getArgs ( ) ) < AbstractExpression >Args < > ( ) ; ( AbstractExpression argument expr getArgs ( ) )Args ( replaceExpressionsPve ( argument ) ) ; } exprArgs (Args ) ; } return expr ; }<CODESPLIT>Helper method to replace all TVEs and aggregated expressions with the corresponding PVEs . The original expressions are placed into the map to be propagated to the EE . The key to the map is the parameter index .
private static boolean addCallback ( String applicationId, DelayedCallback callback ) { ; DelayCallback > list BACKLOG ( applicationId ) ; ( list ) list DelayCallback > ( ) ; BACKLOG put ( applicationId, list ) ; ; } list add ( callback ) ; return isFirst ; }<CODESPLIT>Add a delayed callback for the given application id . Returns whether this is the first request for the application id .
public static byte [ ] gunzipBytes ( byte [ ] compressedBytes ) throws IOException { ( ( ) ( compressed ) ) ; Infl dos Infl ( ) ; dos write ( compressedBytes ) ; dos close ( ) ; return. toByteArray ( ) ; }<CODESPLIT>to avoid linking all that jazz into the client code
public TupleValueExpression getOutputExpression ( int index ) { SchemaColumn schema getSchemaColumn ( index ) ; TupleExpressionve TupleExpression ( getTableAlias ( getTableAlias ( schema getColumnAlias ( schema getColumnAlias ( ) ) ;ve ; }<CODESPLIT>Produce a tuple value expression for a column produced by this subquery
