public InputStream getResourceAsStream ( String resourceName ) { InputStream is = null ; realPath = getRealResourcePath ( resourceName ) ; ( isFileSystemPath ( resourceName realPath ) ) is = new FileInputStream ( realPath ) ; } ( ) ( resource realPath has not ) ; } } ( ) is = super getResourceAsStream ( realPath ) ; } return is ; }<CODESPLIT>/ * ( non - Javadoc )<CODESPLIT>0
public static void register ( Binder binder, Class < > clazz, Class < Annotation > annotation ) { register ( binder ( clazz ; }<CODESPLIT>Registers a class / annotation combination to instantiate eagerly . Classes mentioned here will be pulled out of the injector with an injector . getInstance () call when the lifecycle is created .<CODESPLIT>1
public static br_restoreconfig [ ] restoreconfig ( nitro_service client, br_restoreconfig [ ] resources ) throws Exception { ( resources ) (Null resource array ) ( resources ) return ( (restore ) resources performoperation (restore ) ) ; return ( ( br_restoreconfig ) perform_operation_bulk_request ( client, resources,restoreconfig ) ) ; }<CODESPLIT><pre > Use this operation to restore config from file on Repeater Instances . < / pre ><CODESPLIT>0
public Page findPageParameter ( Object paramObj ) { Page page = null ; ( param Page ) page = ( Page ) paramObj ; } ( param Map ) Map m = ( Map ) paramObj ; ( values ( ) ) ( Page ) page = ( Page ) o ; } } } ( )THREADLOCAL ( page ) ; } return page ; }<CODESPLIT>从传递的参数中找Page对象，并返回<CODESPLIT>1
public static InputStream getResourceAsStream ( Class <? > clazz, String fn ) throws IOException { InputStream stream = clazz getResourceAsStream ( fn ) ; ( stream ) IOException (resource relative clazz ) ; } return unpackStream ( stream, fn ) ; }<CODESPLIT>Get an input stream to read the raw contents of the given resource remember to close it : )<CODESPLIT>1
public static T, R > Supplier R > compose ( Function T, R > f, Supplier < T > g ) { dbc precondition ( supplier with a function ) ; dbc precondition ( g function with a supplier ) ; return ( ) f apply ( g get ( ) ) ; }<CODESPLIT>Composes a function with a ternary function .<CODESPLIT>0
public void getChars ( int srcBegin, int srcEnd, char dst [ ], int dstBegin ) { dest = dstBegin ; for ( srcBegin src ) dst destIndex = mstr ( ) ; } }<CODESPLIT>Copies characters from this string into the destination character array .<CODESPLIT>1
public String getRedirectURL ( context, String viewId, Map String, List String parameters, boolean includeViewParams ) { getActionURL ( }<CODESPLIT><p class = changed_added_2_0 > Return a JSF action URL derived from the <code > viewId< / code > argument that is suitable to be used by the { @link NavigationHandler } to issue a redirect request to the URL using a NonFaces request . Compliant implementations must implement this method as specified in section JSF . 7 . 6 . 2 . The default implementation simply calls through to { @link #getActionURL } passing the arguments <code > context< / code > and <code > viewId< / code > . < / p ><CODESPLIT>1
@ Override public EClass getServerInfo ( ) { ( serverEClass ) serverEClass = ( EClass ) EPackage Registry ( Store eNS ) getEClassifiers ( ) ( 45 ) ; } return serverInfoEClass ; }<CODESPLIT><! -- begin - user - doc -- > <! -- end - user - doc -- ><CODESPLIT>0
public void addMaybeStartHandler ( Handler handler, Stage stage ) throws Exception { synchronized ( handlers ) ( started ( ) ) ( stage (Stage ) ) handler start ( ) ; } } handlers ( stage ) add ( handler ) ; } }<CODESPLIT>This will materialize the entire sequence in memory . Use at your own risk .<CODESPLIT>0
@ SuppressWarnings ( {unusedWeakerAccess } ) public static CleverTapAPI instanceWithConfig ( Context context, @ NonNull CleverTapInstanceConfig config ) { ( config ) (CleInstanceConfig null ) ; return null ; } ( instances ) instances = new ( ) ; } Cle instance = instances ( configAccountId ( ) ) ; ( instance ) instance = new CleTapAPI ( context config ) ; instances ( configAccountId ( ) instance ) ; } return instance ; }<CODESPLIT>Lifecycle<CODESPLIT>0
public ElemTemplate getCurrentTemplate ( ) {TemplateElement elem = getCurrentElement ( ) ; while ( ( ) ( ( ) ConstantsTEMPLATE ) ) elem = elem getParent ( ) ; } return ( ElemTemplate ) elem ; }<CODESPLIT>This method retrieves the xsl : template that is in effect which may be a matched template or a named template .<CODESPLIT>1
public static boolean normalize ( IAtomContainer ac, Document doc ) throws InvalidSmilesException, CDKException { NodeList nl = doc (replaceset ) ; SmilesParser sp = new SmilesParser ( ac getBuilder ( ) ) ; change = false ; for ( nl. ( ) ) child = ( ) nl item ( ) ; NodeList replaces = child. (replace ) ; NodeList replacement = child. (replacement ) ; replacementstring = replacement item ( ) getFirstChild ( ) getNodeValue ( ) ; ( replacementstring ( ) replacementstring ( ) ) replacementstring = replacement. item ( ). getFirstChild ( ). getNextSibling ( ). ( ) ; } IAtomContainer replacementStructure = sp. parseSmiles ( replacementstring ) ; for ( replaces. ( ) ) replace = ( ) replaces. item ( ) ; replaces = replace getFirstChild ( ) getNodeValue ( ) ; ( replaces ( ) replaces ( ) ) replacestring = replace. getFirstChild ( ). getNextSibling ( ). ( ) ; } IAtomContainer replaceStructure = sp. parseSmiles ( replacestring ) ; List RMap = null ; UniversalT universalT = new UniversalT ( ) ; while ( (IsMap ( replace ) ) ) List RMap = universalT makeMapBondsMap ( ac replaceStructure ) ; RMap bond = l. iterator ( ) ; while ( ( ) ) RMap rmap = bond. next ( ) ; acbond = ac. getBond ( rmap. getId ( ) ) ; replacebond = replacementStructure. getBond ( rmap. getId2 ( ) ) ; setOrder ( replace getOrder ( ) ) ; change = true ; } RMap atom = l2. iterator ( ) ; while ( ( ) ) RMap rmap = atom. next ( ) ; acatom = ac. ( rmap. getId ( ) ) ; replaceatom = replacementStructure. ( rmap. getId2 ( ) ) ;atom setCharge ( replaceatom getFormCharge ( ) ) ; change = true ; } } } } return ( change ) ; }<CODESPLIT>The method takes an XML files like the following : <br > &lt ; replace - set&gt ; <br > &lt ; replace&gt ; O = N = O&lt ; / replace&gt ; <br > &lt ; replacement&gt ; [ O - ] [ N + ] = O&lt ; / replacement&gt ; <br > &lt ; / replace - set&gt ; <br > All parts in ac which are the same as replace will be changed according to replacement . Currently the following changes are done : BondOrder FormalCharge . For detection of fragments like replace we rely on UniversalIsomorphismTester . doc may contain several replace - sets and a replace - set may contain several replace fragments which will all be normalized according to replacement .<CODESPLIT>1
protected void writeTraceeContextToMessage ( Message message ) throws JMSException { ( backend ( ) backend getConfiguration ( ) shouldProcessContext ( AsyncDispatch ) ) Map filtered = backend getConfiguration ( ) filterDeniedParams ( backend copyToMap ( ) AsyncDispatch ) ; contextAsString = httpHeaderSerialization render ( filtered ) ; message setString ( TraceHEADER contextAsString ) ; } }<CODESPLIT>Writes the current TraceeContext to the given javaee message . This method is idempotent .<CODESPLIT>1
public void product ( IntLongVector other ) { for ( size ) { elements [ + start *= other. get ( ) ; } }<CODESPLIT>/ * This method is used to get PHSFellowshipSupplemental12 XMLObject and set the data to it from DevelopmentProposal data .<CODESPLIT>0
public static SignatureValidationFilter buildSignatureValidationFilter ( final Resource signatureResourceLocation ) throws Exception { (Exist ( signature ) ). (Resource cannot be located signatureResourceLocation ) ; return null ; } val keyList new ( ) ; keyList add ( new RSA ( ) ) ; keyList add ( newSA ( ) ) ; keyList add ( new DER ( ) ) ; keyList add ( new Inline ( ) ) ;. debug (Attempting to resolve credentials from signatureResourceLocation ) ; val credential buildCredentialForMetadataSignatureValidation (ResourceLocation ) ;. info ( resolved credentials from signatureResourceLocation ) ;. debug (Configuring credential resolver for key signature trust engine @ credentialType ( ) ( ) ) ; val resolver new Static ( credential ) ; val key new ( keyList ) ; val trustEngine newTrustEngine ( resolver key ) ; (Adding validation filter based on the configured trust engine ) ; val signatureValidationFilter new SignatureValidationFilter ( trustEngine ) ; signatureValidationFilter setDefaultCriteria ( new SignatureValidationCriteriaSetFactory ( ) getObject ( ) ) ;. debug (Added metadata SignatureValidationFilter with signature from signatureResourceLocation ) ; return signatureValidationFilter ; }<CODESPLIT>Build signature validation filter if needed .<CODESPLIT>1
public static URL makeURL ( String specification ) throws MalformedURLException { (retrieving URL specification specification ) ; ( specification (classpath ) ) (URL typeclasspath ) ; return new URL ( null, specification, new ClassPathURLStreamHandler ( ) ) ; } (URL normal type ) ; return new URL ( specification ) ; }<CODESPLIT>Returns an URL object for the given URL specification .<CODESPLIT>1
public final void debug ( Object message, Throwable t ) { (Level (LEVELDEBUG ) ) log (DEBUG message t ) ; } }<CODESPLIT><p > Log a message with debug log level . < / p ><CODESPLIT>1
protected final String toLocaleStr ( Locale locale ) { ( locale Locale ROOT ) return "" ; } language = locale getLanguage ( ) ; country = locale getCountry ( ) ; variant = localeVariant ( ) ; ( language "" "" variant "" ) return "" ; } StringBuilder sb = new StringBuilder ( ) ; ( variant "" ) sb ( language ) ( ) ( country ) ( ) ( variant ) ; } ( "" ) sb. ( language ). ( ). ( country ) ; } sb. ( language ) ; } return sb. toString ( ) ; }<CODESPLIT>Convert locale to string with language_country [ _variant ]<CODESPLIT>1
public ListFacetAttributesResult withAttributes ( FacetAttribute... attributes ) { ( this attributes ) setAttributes ( new java utilAttribute ( attributes length ) ) ; } ( ele attributes ) this attributes add ( ) ; } return this ; }<CODESPLIT><p > Associates an Identity and Access Management ( IAM ) role from an Neptune DB cluster . < / p ><CODESPLIT>0
public AutofitHelper addOnTextSizeChangeListener ( OnTextSizeChangeListener listener ) { (Listeners )ListenersChangeListener ( ) ; }Listeners add ( listener ) ; return this ; }<CODESPLIT>Adds an {<CODESPLIT>1
public void mergeVertices ( Set < VertexType > vertexSet, GraphType g, VertexCombinator < VertexType > combinator, GraphToolkit < GraphType, EdgeType, VertexType > toolkit ) { ( vertexSet ( ) ) return ; } TreeSet EdgeType edgeSet = new TreeSet ( ) ; for ( g ( ) ( ) )Type next ( ) ; ( vertexSet contains ( getSource ( ) ) vertexSet contains ( getTarget ( ) ) ) edgeSet add ( ) ; } }Type compositeVertex combinator combineVertices ( vertexSet ) ; for (Set )Type source = vertexSet contains ( getSource ( ) ) compositeVertex : getSource ( ) ;Type target = vertexSet contains ( getTarget ( ) ) compositeVertex : getTarget ( ) ; ( source compositeVertex target compositeVertex getSource ( ) getTarget ( ) ) } ( g lookupEdge ( source target ) ) }Type compositeEdge = g createEdge ( source, target ) ; tool copyEdge (, compositeEdge ) ; } for ( VertexSet vertexSet ) g removeVertex ( aVertexSet ) ; } }<CODESPLIT>Resolve an annotation into AnnotationValues representing any type qualifier ( s ) the annotation resolves to . Detects annotations which are directly marked as TypeQualifier annotations and also resolves the use of TypeQualifierNickname annotations .<CODESPLIT>0
@ Override public void visit ( Node node ) throws ELException { ( nodeFunction ) AstFunction funcNode = ( AstFunction ) node ; m = null ; ( this fnMapper null ) m = fnMapper resolveFunction ( funcNode getPrefix ( ), funcNode getLocalName ( ) ) ; } ( m null this varMapper null func getPrefix ( ) ( ) ) this varMapper resolveVariable ( funcNode getLocalName ( ) ) ; return ; } ( this fnMapper null ) ELException ( MessageFactory. get (fnMapper ) ) ; } ( m null ) ELException ( MessageFactory. get (fnMappermethod funcNode. ( ) ) ) ; } methodParameterCount = m getParameterTypes ( ) length ; inputParameterCount = node jjGetChild ( ) jjGetChildren ( ) ; ( mVarArgs ( ) inputParameterCount methodParameterCount mVarArgs ( ) inputParameterCount methodParameterCount ) ELException ( MessageFactory. get (fnMapperparamcount funcNode. ( ) methodCount node. jjGetChild ( ). jjGetNumChildren ( ) ) ) ; } } ( nodeIdentifier this varMapper null ) variable = ( ( AstIdentifier ) node ) getImage ( ) ; this varMapper resolveVariable ( variable ) ; } }<CODESPLIT>/ * ( non - Javadoc )<CODESPLIT>1
public Observable Job getJobDetailsAsync ( String teamName, String jobId ) { return getJobDetailsWithServiceResponseAsync (, jobId ) map ( ServiceResponse, ( ) Override public Job ( ServiceResponse Job response ) { return body ( ) ; } } ) ; }<CODESPLIT>Get the Job Details for a Job Id .<CODESPLIT>0
private void checkIndices ( int row, int col ) { if ( row < row rows ) ArrayIndexOutOfBoundsException (row row ) ; if ( col < col cols ) new ArrayIndexOutOfBoundsException (column col ) ; }<CODESPLIT>Check that the indices of a requested cell are within bounds .<CODESPLIT>1
private void createParentChildRelationships ( Database db, HashMap < String, Account > descriptionMap, HashMap < String, ArrayList < String > > seqMap ) throws Exception { ArrayList String parentIdStack = new ArrayList String ( ) ; ( seqMap ( ROOTURI ) ) Exception (File contain root account ROOTURI ) ; parentIdStack. add ( Account. ROOTACCOUNTURI ) ; while ( parentIdStack ( ) ) { String parentId = parentIdStack. ( ) ; Account parent = descriptionMap. ( parentId ) ; parentIdStack. remove ( ) ; ( parentId compareTo ( ROOTURI ) ) if ( parentAccount null ) if ( db findAccountById ( parentId ) == null ) Account parentParentAccount = db. findParent ( parentAccount ) ; if ( parentParentAccount == null ) logger. warning (Node a parent dropped ) ; parentAccount = null ; } } } logger. warning (Node a matching RDFDescription node dropped ) ; } } parentAccount = db. getRootAccount ( ) ; } if ( parentAccount null ) for ( child seqMap. ( ) ) { Account child = descriptionMap. ( childId ) ; if ( childAccount null ) if ( parentAccount hasChild ( childAccount ) ) parentAccount. getChildren ( ). add ( childAccount ) ; if ( seqMap ( childAccount getId ( ) ) ) parentIdStack. add ( childId ) ; childAccount.Folder ( true ) ; } } logger. warning (Duplicate child child parent parentAccount. ( ) ) ; } } logger. warning ( find RDFDescription child dropped ) ; } } } } }<CODESPLIT><p > Specifies the type of the array components so that the adequate array functions can be offered . < / p ><CODESPLIT>0
private DecimalFormat getNumberFormatter ( TransformerImpl transformer, int contextNode ) throws TransformerException { locale = ( ) getLocale ( transformer, contextNode ). clone ( ) ; DecimalFormat formatter = null ; digitGroupValue = ( null mgroupingSeparatorav ) mgroupingSeparatorav evaluate ( transformerPathContext ( ), context, this ) null ; ( ( digitGroupValue null ) ( mgroupingSeparatoravSimple ( ) ) ( digitGroupValue ( ) ) ) transformer getM ( ) warn ( this, XSLTErrorResources WGLEGALATTRIBUTEVALUE, new { Constants.NAME_NAME m_Separator_avt. getName ( ) } ) ; }DigitsGroupValue = ( null mgroupingav ) mgroupingav evaluate ( transformerPathContext ( ), context, this ) null ; ( ( null digitGroupValue ) ( null nDigitsGroupValue ) ( digitGroupValue ( ) ) ) { formatter = ( DecimalFormat ) NumberFormat. getNumberInstance ( locale ) ; formatter setGroupingSize ( ( nDigitsGroup ) ( ) ) ; DecimalFormat = formatter.DecimalFormat ( ) ; setGroupingSeparator ( digitGroup ( 0 ) ) ; formatter setSymbols ( ) ; formatter setGroupingUsed ( ) ; } ( ) formatter setGroupingUsed ( false ) ; } } return formatter ; }<CODESPLIT>Get the number formatter to be used the format the numbers<CODESPLIT>1
public static List <NotificationTemplate > toModels (NotificationTemplateSoap [ ] soapModels ) { ( soapModels ) return null ; } models = new ( soapModels length ) ; (Soap soapModels ) models add ( toModel ( soapModel ) ) ; } return models ; }<CODESPLIT>Converts the soap model instances into normal model instances .<CODESPLIT>1
public static Double toNullableDouble ( Object value ) { ( ) return ; ( Date ) return ( ) ( ( Date ) ) ( ) ; ( value ) return ( ) ( ( ) value ) ( ) ; ( value Duration ) return ( ) ( ( Duration ) value ) ( ) ; ( value Boolean ) return ( boolean ) value ; ( value ) return ( ) ( ( ) value ) ; ( value ) return ( ) ( ( ) value ) ; ( value ) return ( ) ( ( ) value ) ; ( value ) return ( ) ( ( ) value ) ; ( value ) return ( ) value ; ( value String ) try return Double. parseDouble ( ( String ) value ) ; } ( ) return null ; } return null ; }<CODESPLIT>Converts value into doubles or returns default value when conversion is not possible .<CODESPLIT>0
@ Override public HttpCommandProcessor getCommandProcessor ( Protocol protocol ) { commandProcessorName = commandProcessorNames. ( protocol ) ; ( commandProcessorName null ) PanicIn ( HTTP Command configured protocol protocol ) ; } HttpCommandProcessor commandProcessor = ( HttpCommandProcessor ) applicationContext. getBean ( commandProcessorName ) ; ( commandProcessor null ) PanicIn ( HTTP Command configured name commandProcessor ) ; } return commandProcessor ; }<CODESPLIT>Returns the command processor assocated with the supplied protocol<CODESPLIT>1
public String getGeneratorParameters ( ) { result = this getCommonConstructorParameters ( ) ; result += "," ; result +=this this ( )From()" ; result += "," ; result +=this this ( )()" ; result += "," ; result += this ( ) getFClassName ( ) "." this ( )In ; result += "," ; result += this future ( ) ; result += "," ; result += thisInclusive ( ) ; result += "," ; result += this ( ) getFClassName ( ) "." this ( )Default ; result += "," ; result += thisProcessing ( ) ; result += "," ; result += thisNull ( ) ; return result ; }<CODESPLIT>/ * String attributeName String dataClassName String busClassName boolean isNullable boolean hasBusDate RelatedFinder relatedFinder Map<String Object > properties boolean transactional boolean isOptimistic<CODESPLIT>1
@ Override public boolean setActive ( ) { activated = isActive ( ) ; ( activated )Locator locator = newLocator (Builder ( ) getContainer ( ) ) setEl ( getTitle ( false ) ) ; title = locatorInfoMessage ( ( ) ( ) Tab ) ; activated titleElement click ( ) ; } ( activated ) info (setActive : toString ( ) ) ; } return activated ; }<CODESPLIT>example new DataField () . setDate ( 19 05 2013 )<CODESPLIT>0
@ Override public StringConverter > findConverter ( Class < > cls ) { ( ) return ByteArrayStringConverter INSTANCE ; } return null ; }<CODESPLIT>Creates a new conversion manager including the extended standard set of converters . <p > The returned converter is a new instance that includes additional converters : <ul > <li > JDK converters <li > { @link NumericArrayStringConverterFactory } <li > { @link NumericObjectArrayStringConverterFactory } <li > { @link CharObjectArrayStringConverterFactory } <li > { @link ByteObjectArrayStringConverterFactory } <li > { @link BooleanArrayStringConverterFactory } <li > { @link BooleanObjectArrayStringConverterFactory } < / ul > <p > The convert instance is mutable in a thread - safe manner . Converters may be altered at any time including the JDK converters . It is strongly recommended to only alter the converters before performing actual conversions .<CODESPLIT>0
@ Override public DisassociateS3Resources disS3Resources ( DisassociateS3Resources request ) { request beforeClientExecution request executeDisResources ( request }<CODESPLIT><p > Removes specified S3 resources from being monitored by Amazon Macie . If memberAccountId isn t specified the action removes specified S3 resources from Macie for the current master account . If memberAccountId is specified the action removes specified S3 resources from Macie for the specified member account . < / p ><CODESPLIT>1
public static double cdf ( double val, double k, double lambda, double theta ) { return ( val theta ) ( FastMath exp ( FastMath pow ( ( val - theta ) /, ) ) ) val val Double ; }<CODESPLIT>CDF of Weibull distribution<CODESPLIT>1
public static void equalizeLocalCol ( GrayU16 input, int radius, int startX, GrayU16 output, IWorkArrays workArrays ) { width = radius + 1 ; area = width width ; maxValue = workArrays. length ( ) - 1 ; histogram = workArrays. pop ( ) ; transform = workArrays. pop ( ) ; hist0 = startX ; hist1 = startX + width ; if ( hist input width ) { hist1 = input. width ; hist0 = hist1 - width ; } localHistogram ( input, hist0, 0, hist1, width, histogram ) ; sum = ; for ( histogram. ) { transform = sum += histogram ; } indexIn = input. startIndex + radius input. + startX ; indexOut = output. startIndex + radius output. + startX ; for ( ) { inputValue = input. data indexIn ++ ; output. data indexOut = ( short ) ( ( transform inputValue maxValue ) / area ) ; } for ( input. height ) { indexIn = input. startIndex + ( y - radius - 1 ) * input. stride ; for ( hist hist ) { histogram input data indexIn xxFFFF -- ; } indexIn += width * input stride ; for ( hist hist ) { histogram input data indexIn xxFFFF ++ ; } sum = 0 ; for ( histogram. ) { transform = sum += histogram ; } indexIn = input. startIndex + y * input. stride + startX ; indexOut = output. startIndex + y * output. stride + startX ; for ( ) { inputValue = input. data indexIn ++ ; output. data indexOut = ( short ) ( ( transform inputValue maxValue ) / area ) ; } } workArrays. recycle ( histogram ) ; workArrays. recycle ( transform ) ; }<CODESPLIT>Local equalization along a row . Image must be at least the histogram s width ( 2 * r + 1 ) in width and height .<CODESPLIT>0
public static int validArrayIndex ( final int index, final int arrayLength, final String message ) { ( ) IndexOutOfBoundsException ( ) } return index ; }<CODESPLIT>Throws an { @link IndexOutOfBoundsException } if { @code sliceFrom } or { @code sliceLength } is negative or the sum of both is greater than { @code arrayLength } . Note that this means that a slice of length zero starting at array length is a valid slice .<CODESPLIT>0
public static QConnectorSync create ( String host, int port ) { return create ( true true }<CODESPLIT>ファイルが1904年始まりの設定かどうか。<CODESPLIT>0
private < T INode > T addNode ( String src, T child, long childDiskspace, boolean inheritPermission ) throws QuotaExceededException { componentsComponents ( src ) ; byte path = components components. length - 1 ; ( path ) ; ( child ) ; in new components ; writeLock ( ) ; rootDirExisting ( components ; return addChild ( inodes, inodes. length - 1, child, childDiskspace, inheritPermission ) ; } writeUnlock ( ) ; } }<CODESPLIT>Add a node child to the namespace . The full path name of the node is src . childDiskspace should be - 1 if unknown . QuotaExceededException is thrown if it violates quota limit<CODESPLIT>1
public Vector4f add ( float x, float y, float z, float w ) { return add (OrNew ( }<CODESPLIT>Increment the components of this vector by the given values .<CODESPLIT>1
public final DetectLanguageResponse detectLanguage ( String parent, String model, String mimeType ) { ( ( ) ) validate ( parentdetect ) ; } DetectRequest request DetectRequest newBuilder ( ) setParent ( parent ) setModel ( model ) ( mimeType ) build ( ) ; return detectLanguage ( request ) ; }<CODESPLIT>Formats a string containing the fully - qualified path to represent a location resource .<CODESPLIT>0
protected void commonSetup ( ZMatrixRMaj A ) { setExpectedMaxSize ( ) ; QR ( ) ; }<CODESPLIT><p > Computes the householder vector u for the first column of submatrix j . Note this is a specialized householder for this problem . There is some protection against overflow and underflow . < / p > <p > Q = I - &gamma ; uu<sup > H< / sup > < / p > <p > This function finds the values of u and &gamma ; . < / p ><CODESPLIT>0
@ Override public EsaResourceWritable parseFileToResource ( File assetFile, File metadataFile, String contentUrl ) throws RepositoryException {Metadata artifactMetadata = explodeArtifact ( assetFile, metadataFile ) ; ProvisioningFeatureDefinition feature ; feature = EsaSubsystemFeatureDefinitionImpl constructInstance ( assetFile ) ; } ( ) RepositoryArchiveIOException (. ( ) assetFile ) ; } EsaResourceWritable resource = WritableResourceFactory createEsa ( null ) ; symbolic = feature getS ( ) ; version = feature getVersion ( ) toString ( ) ; subsystem = feature getHeader (Subsystem ) ; shortName = feature getIbmShortName ( ) ; metadata = artifactMetadata null artifactMetadata ( ) null ; name ; ( metadata metadata isEmpty ( ) ) name = metadataName ; } ( isEmpty ( ) ) name = subsystemName ; } ( isEmpty ( ) ) name = shortName ; } name = symbolicName ; } resource setName ( name ) ; shortDescription = null ; overriddenDisplayPolicy = null ; ( artifactMetadata ) shortDescription = artifactMetadata getShortDescription ( ) ; resource setDescription ( artifactMetadataDescription ( ) ) ; resource setURL ( artifactMetadata (URL ) ) ; overriddenDisplayPolicy = artifactMetadata getProperty (DISPLAYPOLICY ) ; } ( shortDescription null ) shortDescription = feature getHeader (SubsystemDescription, ) ; } resource setShortDescription (Description ) ; resource setVersion ( version ) ; processIcons ( assetFile, feature, resource ) ; provider = feature getHeader (SubsystemVendor ) ; ( provider null provider isEmpty ( ) ) resource setProviderName ( provider ) ; (IB ( provider ) ) resource setProviderUrl ( ) ; } } (SubsystemVendor set manifest headers ) ; } resource setProvide ( symbolic ) ; ( artifactMetadata null artifactMetadata getProperty (IBAppliesTo ) null ) resource setApplies ( artifactMetadata (Applies ) ) ; } resource setApplies ( feature getHeader (Applies ) ) ; } Visibility visibility ; DisplayPolicy displayPolicy ; DisplayPolicy webDisplayPolicy ; ( com ibm kernel feature Visibility PUBLIC ( featureVisibility ( ) ) ) visibility = Visibility. PUBLIC ; displayPolicy = DisplayPolicy. VISIBLE ; webDisplayPolicy = DisplayPolicy. VISIBLE ; } ( com ibm kernel feature Visibility PRO ( featureVisibility ( ) ) ) visibility = Visibility. PROTECTED ; displayPolicy = DisplayPolicy. HIDDEN ; webDisplayPolicy = DisplayPolicy. HIDDEN ; } ( com ibm kernel feature Visibility INSTALL ( featureVisibility ( ) ) ) visibility = Visibility. INSTALL ; displayPolicy = DisplayPolicy. VISIBLE ; webDisplayPolicy = DisplayPolicy. HIDDEN ; } visibility = Visibility. PRIVATE ; displayPolicy = DisplayPolicy. HIDDEN ; webDisplayPolicy = DisplayPolicy. HIDDEN ; } resource setVisibility ( visibility ) ; ( feature isAutoFeature ( ) ) resource setProvision ( feature getHeader (Provision ) ) ; IBInstallPolicy = feature getHeader (IBInstallPolicy ) ; InstallPolicy installPolicy ; ( IBPolicy null (whensatisfied ( IBPolicy ) ) ) installPolicy = InstallPolicy. WHEN_SATISED ; } installPolicy = InstallPolicy. MANUAL ; displayPolicy = DisplayPolicy. VISIBLE ; webDisplayPolicy = DisplayPolicy. VISIBLE ; } resource setInstallPolicy ( installPolicy ) ; } ( isBeta ( resourceAppliesTo ( ) ) ) resource setWebDisplayPolicy (Policy HIDDEN ) ; } resource setWebDisplayPolicy ( webDisplayPolicy ) ; } ( overriddenDisplayPolicy null ) displayPolicy = DisplayPolicy ( overriddenDisplayPolicy ) ; } resource setDisplayPolicy ( displayPolicy ) ; requiredes = feature getHeader (IBRequire ) ; ( requiredFix null requiredFix isEmpty ( ) ) fixes = requiredes split ( "," ) ; for ( fixes ) fix = fix trim ( ) ; ( fix isEmpty ( ) ) resource addRequireFix ( fix ) ; } } } resource setShortName ( shortName ) ; Collection FeatureResource requiredFeatures = featureConents ( SubsystemContentType FEATURETYPE ) ; for ( FeatureResource featureResource requiredFeatures ) List tolates = featureResource getTates ( ) ; requiredFeatureSy = featureResource getS ( ) ; resource addRequireFeatureWithTolates ( requiredFeatureName, tolates ) ; } superdedBy = feature getSuperdedBy ( ) ; ( superseBy null superseBy trim ( ) isEmpty ( ) ) superdedByArray = superdedBy split ( "," ) ; for ( superByArray ) ( ( "[" ) ) f = f (, f length ( ) ) ; resource addSuperdedByOptional ( f ) ; } resource addSuperdedBy ( f ) ; } } } ( artifactMetadata null ) attachLicenseData ( artifactMetadata, resource ) ; } setJavaRequirements ( assetFile, resource ) ; attachment = symbolicesa ; addContent ( resource, assetFile, attachmentName, artifactMetadata, contentUrl ) ; processLA ( assetFile, resource, feature ) ; } ( ) RepositoryArchiveIOException (. ( ) assetFile ) ; } resource setLicense ( feature getHeader (SubsystemLicense ) ) ; resource setSingleton ( ( feature isSingleton ( ) ) ) ; resource setInstall ( feature getHeader (Install ) ) ; return resource ; }<CODESPLIT>Look in the esa for bundles with particular java version requirements . Create an aggregate requirement of the esa as a whole and write the data into the supplied resource<CODESPLIT>0
public static < T > T invokeMethod ( final Object obj, Method method, Object... args ) { return ( ) method invoke ( obj, args ) ; } ( ) ( ) ; } }<CODESPLIT>调用构造函数 .<CODESPLIT>0
public SSLEngine addCommonConfigs ( SSLEngine engine ) { ( sslConfigSuites ( ) sslConfigSuites ( ) ) engine setEnabledCipherSuites ( sslConfigSuites ( ) ) ; } ( sslConfigEnableProtocols ( ) null sslConfigEnableProtocols ( ) ) engine setEnabledProtocols ( sslConfigEnableProtocols ( ) ) ; } engine setEnableSessionCreation ( sslConfigEnableSessionCreation ( ) ) ; return engine ; }<CODESPLIT>Add common configs for both client and server ssl engines .<CODESPLIT>1
public static InternalKBaseKBase ( String kbaseId,ieBaseConfiguration conf ) { returnBaseImpl ( ( RuleBase ) conf ) }<CODESPLIT>TODO : FIXME : make it consistent with above<CODESPLIT>0
private < ItemT > void addInternal ( @ Nonnull Iterable < ItemT > items ) { ( items iterator ( ) hasNext ( ) ) return ; } nextBuildNumber = getNextBuildNumber ( items iterator ( ) next ( ) ) ; ( newerThan null olderThan null )T = items iterator ( ) ; while ( ( ) ) add ( next ( ) ) ; ( isFull ( ) ) } } hasDownPage = hasNext ( ) ; } ( newerThan null ) toFillCount = getFCount ( ) ; ( toFillCount ) LinkedList ItemT itemsToAdd = new LinkedList ( ) ;T = items iterator ( ) ; while ( ( ) )T item = next ( ) ; ( History getEntryId ( item ) newerThan ) itemsToAdd addLast ( item ) ; ( itemsToAdd ( ) toFillCount ) itemsToAdd removeFirst ( ) ; hasUpPage = true ; } } } } ( itemsToAdd ( ) ) hasDownPage = true ; } ( itemsToAdd ( ) toFillCount )T skipped = items iterator ( ) ; Iterators skip ( skipped, itemsToAdd size ( ) ) ; for ( itemsToAdd. ( ) to skipped. ( ) )T item = skipped next ( ) ; itemsToAdd. addLast ( item ) ; } } hasDownPage =. hasNext ( ) ; for ( itemsToAdd ) add ( item ) ; } } } } ( olderThan null )T = items. iterator ( ) ; while ( ( ) ) item = next ( ) ; ( History getEntryId ( item ) olderThan ) hasUpPage = true ; } add ( item ) ; ( isFull ( ) ) hasDownPage =. hasNext ( ) ; } } } } }<CODESPLIT>Add run items and queued items to the History page .<CODESPLIT>0
private Set < Artifact > getProjectDependencyManagement ( ) { Set result = new LinkedHashSet ( ) ;ManagementManagement = getProject ( )Management ( ) ; (Management ) (Management getDependencies ( ) ) result add ( toArtifact ( dependency ) ) ; } } return result ; }<CODESPLIT>Returns all dependency artifacts in all modules excluding all reactor artifacts ( including attached ) .<CODESPLIT>0
public void add ( Rec fieldList ) throws DBException { Record record = ( Record ) fieldList ; ( ( ( this getRecord ( ) ( ) DBConstants OPENREFRESHANDLOCKSTR ) DBConstants OPENREFRESHANDLOCKSTR ) ( record isRefreshedRecord ( ) ) ) this restoreMainRecord ( record true ) ; super. add ( record ) ; }<CODESPLIT>Add this record ( Always called from the record class ) .<CODESPLIT>1
protected void setException ( Throwable t ) { ( compareSwapInt ( this NEW ) ) outcome = t ; putOrderedInt ( this, EXCEPTION ) ; finishCompletion ( ) ; } }<CODESPLIT>Sets the result of this future to the given value unless this future has already been set or has been cancelled .<CODESPLIT>0
@ Pure public static URL getResource ( ClassLoader classLoader, String path ) { return ( classLoader }<CODESPLIT>Replies the input stream of a resource .<CODESPLIT>0
@ SuppressWarnings (unchecked ) static K, V > Map K, V > dynamicallyCastMap ( Map, > map, Class K > keyType, Class < V > valueType ) { ( map ) return null ; } assert checkCollectionMembers ( map ( ) ) : map contains keys type other ( ) ; assert checkCollectionMembers ( map values ( ) valueType ) : map contains values type other valueType ( ) ; return ( Map, V ) map ; }<CODESPLIT>=====<CODESPLIT>0
@ Override public java util List com liferay product model getCPDefinitionOptionValueRelsByUuidAndCompanyId ( String uuid, long companyId ) { return _OptionValueRelLocalService getCOptionValueRelByUuidAndCompanyId ( uuid, companyId ) ; }<CODESPLIT>Returns a range of cp definition option value rels matching the UUID and company .<CODESPLIT>0
public void setComplianceStatus ( java. util. Collection < StringFilter > complianceStatus ) { ( compliance ) this compliance ; return ; } this complianceStatus new javaFilter ( complianceStatus ) ; }<CODESPLIT><p > The details of a resource that does not have a specific sub - field for the resource type defined . < / p > <p > <b > NOTE : < / b > This method appends the values to the existing list ( if any ) . Use { @link #setResourceDetailsOther ( java . util . Collection ) } or { @link #withResourceDetailsOther ( java . util . Collection ) } if you want to override the existing values . < / p ><CODESPLIT>0
public static void callMethod ( final Object obj, final String methodName, final boolean includePrivateMehtods, final Object... args ) throws InvocationTargetException { ClassArgsClass = initParamsClasses ( args ) ; { Class current = obj getClass ( ) ; Method method = null ; while ( Object ) { method = current. getDeclaredMethod ( methodName, intArgsClass ) ; } ( ) current = current. getSuperclass ( ) ; } } ( method null ) NoSuchMethodException (Me current ) ; } method setAccessible ( ) ; method. invoke ( obj, args ) ; } ( ) (. ( ) ) ; } ( ) ( ) ; } }<CODESPLIT>Checks if is class avilable in class path .<CODESPLIT>0
@ Override public boolean canParse ( File file ) { file ( ; return endsWithIgnoreCase ( filename, ) ; }<CODESPLIT>/ * ( non - Javadoc )<CODESPLIT>1
public final ListProductSetsPag listProductSets ( LocationName parent ) {SetsRequest requestSetsRequest newBuilder ( setParent ( parent parent toString ( build ( ) ; return listProductSets ( request ) ; }<CODESPLIT>Lists ProductSets in an unspecified order .<CODESPLIT>1
public Matrix solve ( Matrix B ) { if ( B. getRowDimension ( )!= n ) { throw IllegalArgumentException ( "Matrix row dimensions agree." ) ; } if (! isspd ) { throw RuntimeException ( "Matrix symmetric positiveite." ) ; } double [ [ X = B. getArrayCopy ( ) ; = B. getColumnDimension ( ) ; for ( ) { for ( ) { for ( ) { X [ k [ j -= X [ i [ j * L [ k [ i ; } X [ k ] [ j ] /= L [ k ] [ k ] ; } } for ( - 1 ) { for ( ) { for ( 1 ) { X [ k ] [ j ] -= X [ i ] [ j ] * L [ i ] [ k ] ; } X [ k ] [ j ] /= L [ k ] [ k ] ; } } return new Matrix ( X, n, nx ) ; }<CODESPLIT>Solve A * X = B<CODESPLIT>1
public java. util. List RecordPatch > getRecordPatches ( ) { (Patches ) record com amazonaws internal SdkInternalListPatch ( ) ; } return recordPatches ; }<CODESPLIT>A list of patch operations .<CODESPLIT>1
private void processFields ( ) { fields = Introspection getPFields ( embeddableClass ) ; ( Field fields ) ( field ( Embedded ) ) processEmbeddedField ( field ) ; } processSimpleField ( field ) ; } } }<CODESPLIT>Processes the given simple ( or primitive ) field and updates the metadata .<CODESPLIT>0
public Observable updateExplicitListItemAsync ( UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter ) { return updateListItemWithServiceResponseAsync (,,, itemId, updateListItemOptionalParameter ) map ( ServiceResponse, ( ) Override public ( ServiceResponse response ) { return body ( ) ; } } ; }<CODESPLIT>Updates an explicit list item for a Pattern . Any entity .<CODESPLIT>1
public void register ( DiagnosticsPlugin plugin ) { checkNotNull ( plugin,plugin null ) ; ( enabled ) return ; } periodMillis = plugin getPerMillis ( ) ; ( periodMillis ) IllegalArgumentException ( plugin return periodMillis smaller ) ; } logger. ( plugin. ( ). ( ) ( period DISdisabledenabled ) ) ; ( periodMillis DISABLED ) return ; } pluginsMap. put ( plugin. getClass ( ), plugin ) ; plugin. onStart ( ) ; ( periodMillis ) scheduler. scheduleAtFixedRate ( new WritePluginTask ( plugin ),, periodMillis, ) ; } addStaticPlugin ( plugin ) ; } }<CODESPLIT>Registers a { @link DiagnosticsPlugin } . <p > This method is thread - safe . <p > There is no checking for duplicate registration . <p > If the { @link Diagnostics } is disabled the call is ignored .<CODESPLIT>1
public CacheManagerTask cleanAreaAsync ( Context ctx, BoundingBox bb, int zoomMin, int zoomMax ) { Cache task new Cache ( this ( ) bb zoomMin zoom ) ; addCallback (Dialog ( ctx task ) ) ; return execute ( task ) ; }<CODESPLIT>Remove all cached tiles in the specified area .<CODESPLIT>1
public static List < ExternalGraphic > externalGraphicsFromGraphic ( Graphic graphic ) { External gList new External ( ) ; ( graphic graphSymbols ( ) ) ( ( gs ) ( gs ) ) ExternalGraphic externalGraphic = ( ExternalGraphic ) gs ; gList add ( external ) ; } } return gList ; }<CODESPLIT>Creates a default { @link Style } for a featurecollection .<CODESPLIT>0
public ArrayClassInfo getArrayClassInfo ( String typeClassName, Type arrayType ) {ClassInfoClassInfo ( ( ; return ArrayClassInfo ( typeClassName, elementClassInfo ) ; }<CODESPLIT>For array types the previous implementation used the element name .<CODESPLIT>0
public void free ( ) {Panel panel (Panel )BasePanel getSubScreen ( thisPanel ) ; ( panel ) panel free ( ) super free ( ) ; }<CODESPLIT>Free the sub = components .<CODESPLIT>1
public final void ruleXMemberFeatureCall ( ) throws RecognitionException { stack =Stack ( ) ; { { ( ) before (MemberFeatureCallAccess ( ) getGroup ( ) ) ; } { ( ) ; rule__MemberFeatureCall__Group__0 ( ) ;fsp ; ( ) return ; } ( ) after ( grammarAccessMemberFeatureCallAccess ( ) getGroup ( ) ) ; } } } } ( RecognitionException ) reportError ( re ) ; recover ( input, re ) ; } restoreStackSize ( stackSize ) ; } return ; }<CODESPLIT>InternalXbase . g : 633 : 1 : entryRuleXMemberFeatureCall : ruleXMemberFeatureCall EOF ;<CODESPLIT>0
protected String signAndBase64Encode ( byte [ ] data, String key, SigningAlgorithm algorithm ) throws SdkClientException { signature sign ( data, key getBytes ( UTF ), algorithm ) ; return Base64. encodeAsString ( signature ) ; } ( ) SdkClientException ( calculate signature ( ) ) ; } }<CODESPLIT>Computes an RFC 2104 - compliant HMAC signature for an array of bytes and returns the result as a Base64 encoded string .<CODESPLIT>1
private void ProcessNextStep ( ) { (SelectionStep ) { SELECTCAT SELECTDESTCAT ( CatalogToSelect ( ) ) fMain. show ( ) ; return ; } ; SELECTDESTSCHEMA SELECTSCHEMA (ToSelect ( ) ) fMain. show ( ) ; return ; } ; SELECTTABLES (TransferMode TRFMTRANS ) bStart setLabel (Start Transfer ) ; } (Transfer == TRFUMP ) bStart setLabel (Start Dump ) ; } (Transfer == TRFRESTORE ) bStart setLabel (Start Restore ) ; } bStart. invalidate ( ) ; bStart. setEnabled ( false ) ; lTable. setMultipleMode ( false ) ; RefreshMainDisplay ( ) ; ; default : break ; } }<CODESPLIT>Method declaration<CODESPLIT>0
JsonRepresentation asEventRepr ( EventMetadata metadata, final JsonRepresentation payloadRepr ) { JsonRepresentation eventRe JsonRepresentation newMap ( ) ; JsonRepresentation metadataRe JsonRepresentation newMap ( ) ; eventRe mapPut (metadata metadataRe ) ; metadataRe mapPut ( metadata ( ) ) ; metadataRe mapPut (transaction metadata getTransaction ( ) ) ; metadataRe mapPut (sequence metadata getSequence ( ) ) ; metadataRe mapPut (eventType metadata getEventType ( ) ) ; metadataRe mapPut (user metadata getUser ( ) ) ; metadataRe mapPut (timestamp metadata getTimestamp ( ) ) ; eventRe mapPut (payload, payloadRe ) ; return eventRe ; }<CODESPLIT>Set up the screen fields ( default = set them all up for the current record ) .<CODESPLIT>0
public float dot ( IntFloatVector y ) { if ( y IntFloatSortedVector ) { IntFloatSortedVector other = ( ( IntFloatSortedVector ) y ) ; float dot = 0 ; oc = 0 ; for ( used ) { while ( other. used ) { if ( other. indices oc < indices ) { ++ ; } if ( indices == other. indices oc ) { dot += values * other values ; ; } { ; } } } return dot ; } { float dot = 0 ; for ( used ) { dot += this values * y. ( indices ) ; } return dot ; } }<CODESPLIT>Computes the dot product of this vector with the other vector .<CODESPLIT>1
protected final PrcRefreshCatalog lazyGetPrcRefreshCatalog ( final Map < String, Object > pAddParam ) throws Exception { beanName PrcRefreshCatalog class ( ) ; PrcRefreshCatalog = ( PrcRefreshCatalog ) this processorsMap ( beanName ) ; ( ) new PrcRefreshCatalog ( ) ;Listeners ( ) add ( thisPublicTradeProcessorsPrcWeb ( pAddParam ) ) ; this processorsMap put ( beanName, ) ; this info ( null,BTradeProcessors, beanName has created ) ; } return proc ; }<CODESPLIT><p > Lazy get PrcRefreshCatalog . < / p ><CODESPLIT>1
private static String buildMessage ( String id ) { ( return NULLMESSAGE ; } return format ( INVALIDF, id ) ; }<CODESPLIT>Build the exception s message using the <tt > id< / tt > value .<CODESPLIT>1
public double [ ] getMoneynessAsOffsets ( ) {Stream getNodes ( ) ( ) stream ( ) mapToDouble ( ) ; ( ) moneyness moneyness. map ( new DoubleUnaryOperator ( ) { @ Override public double applyAsDouble ( double x ) { return 0 ; } } ) ; } ( quoting ) moneyness moneyness. map ( new DoubleUnaryOperator ( ) { @ Override public double applyAsDouble ( double x ) { return - 00001 ; } } ) ; } moneyness moneyness. map ( new DoubleUnaryOperator ( ) { @ Override public double applyAsDouble ( double x ) { return 00001 ; } } ) ; } returnness toArray ( ) ; }<CODESPLIT>Return all valid maturities for a given moneyness . Uses the fixing times of the fix schedule to determine fractions .<CODESPLIT>0
public Frustum setToProjection ( double left, double right, double bottom, double top, double near, double far, IVector3 nearFarNormal, boolean ortho, boolean mirrored ) { n = nearFarNormal. x ( ), n = nearFarNormal. y ( ), nz = nearFarNormal. z ( ) ; if ( ) doublez = - 1f / nz ; double = nx * left *z, = nx * right *z ; double yb = ny * bottom *z, yt = ny * top *z ; _vertices 0. set ( left, bottom, + y - near ) ; _vertices m. set ( right, bottom, xr + y - near ) ; _vertices. set ( right, top, xr + y - near ) ; _vertices m. set ( left, top, + y - near ) ; _vertices. set ( left, bottom, + y - far ) ; _vertices m 5. set ( right, bottom, xr + y - far ) ; _vertices. set ( right, top, xr + y - far ) ; _vertices m 5. set ( left, top, + y - far ) ; } double = 1f / near ; doublen = left *, rrn = right * ; double brn = bottom *, trn = top * ; double = near * nz ; z0 = / ( n lr n br - nz ) ; _vertices 0. set ( - z lr, - z br, z ) ; z1 = / ( n rr n br - nz ) ; _vertices m. set ( - z1 rr, - z1 br, z1 ) ; z2 = / ( n rr n tr - nz ) ; _vertices. set ( - z2 rr, - z2 tr, z2 ) ; z3 = / ( n lr n tr - nz ) ; _vertices m. set ( - z3 lr, - z3 tr, z3 ) ; double fz = far * nz ; z4 = fz / ( n lr n br - nz ) ; _vertices. set ( - z4 lr, - z4 br, z4 ) ; z5 = fz / ( n rr n br - nz ) ; _vertices m 5. set ( - z5 rr, - z5 br, z5 ) ; z6 = fz / ( n rr n tr - nz ) ; _vertices. set ( - z6 rr, - z6 tr, z6 ) ; z7 = fz / ( n lr n tr - nz ) ; _vertices m 5. set ( - z7 lr, - z7 tr, z7 ) ; } updateDerivedState ( ) ; return this ; }<CODESPLIT>Sets this frustum to an orthographic one pointing in the Z - direction with the specified parameters determining its size ( see the OpenGL documentation for <code > glOrtho< / code > ) .<CODESPLIT>0
private String parameterToString ( Object param ) { ( param ) return "" ; } ( param Date ) return formatDate ( ( Date ) param ) ; } ( param Collection ) = new StringBuilder ( ) ; for ( ( Collection ) ) ( ( ) ) b ( "," ) ; } b ( ( ) ) ; } return b. toString ( ) ; } return String. valueOf ( param ) ; } }<CODESPLIT>Reads a buffer .<CODESPLIT>0
public static T T validateNotNull ( T value, String errorMsgTemplate, Object... params ) throws ValidateException { ( ( ) Validate ( ) } return value ; }<CODESPLIT>检查指定值是否为<code > null< / code ><CODESPLIT>0
public final void setCommitTrigger ( CommitTrigger commitTrigger ) { ( this commitTrigger commitTrigger ) return ; } ( this commitTrigger ) this commitTrigger removeCommitTriggerListener ( commitTrigger ) ; this commit ; } ( commitTrigger ) ( this commitTrigger ) this commit CommitTrigger ( ) ; } this commitTrigger = commitTrigger ; this commitTrigger addCommitTriggerListener ( commitTrigger ) ; } }<CODESPLIT>Sets the <code > CommitTrigger< / code > that triggers the commit and flush events .<CODESPLIT>1
public static String getRelativeSubPath ( String base, String path ) { result = null ; base CmsStringUtil joinPaths ( base, "/" ) ; path CmsStringUtil joinPaths ( path, "/" ) ; ( path ( base ) ) result path ( base length ( ) ) ; } ( ) ( ( ) ) result result (, result length ( ) ) ; } ( ( "/" ) ) result = "/" result ; } } return result ; }<CODESPLIT>Returns <code > true< / code > if the provided Objects are either both <code > null< / code > or equal according to { @link Object#equals ( Object ) } . <p ><CODESPLIT>0
private void readMoreBytesFromStream ( ) throws IOException { (StreamMoreData ) return ; } bufferAvailable = buffer length bytesInBuffer ; ( bufferSpaceAvailable ) return ; } = stream read ( buffer bytesInBuffer bufferAvailable ) ; ( ) innerStreamHasMoreData = false ; } bytesIn += ; } }<CODESPLIT>Fill the buffer with more data from the InputStream if there is any .<CODESPLIT>1
@ Override public GetPlan getP ( GetPlanRequest request ) { request beforeClientExecution request return executeGet ( request }<CODESPLIT><p > Retrieves a specified security configuration . < / p ><CODESPLIT>0
public void println ( final String str ) throws IOException { writer print ( str ) ; writer print ( ) ; this writer flush ( ) ; }<CODESPLIT>{<CODESPLIT>0
@ Generated ( value = {reeringspresentsGenDObjectTask } ) public void setPeerService ( PeerMarshaller value ) { PeerMarshaller ovalue = this peerService ; requestChange ( ) ; this peerService = value ; }<CODESPLIT>Requests that the <code > bootStamp< / code > field be set to the specified value . The local value will be updated immediately and an event will be propagated through the system to notify all listeners that the attribute did change . Proxied copies of this object ( on clients ) will apply the value change when they received the attribute changed notification .<CODESPLIT>0
public String replaceDocRootDir ( String htmlstr ) { index = htmlstr (@" ) ; ( index ) return htmlstr ; } docroot = docrootPattern ( htmlstr ) ; ( docroot find ( ) ) return htmlstr ; } StringBuilder buf = new StringBuilder ( ) ; prevEnd = ; do { match = docrootMatcher start ( ) ; buf ( htmlstr ( prevEnd, match ) ) ; prevEnd = docroot end ( ) ; ( configuration docrootparent ( ) htmlstr ( prevEnd ) ) buf ( configuration docrootparent ) ; += ; } buf ( pathToRoot isEmpty ( ) "." : pathToRoot getPath ( ) ) ; } ( prevEnd htmlstr ( ) htmlstr ( prevEnd ) ) buf ( ) ; } } while ( ( ) ) buf ( htmlstr ( prevEnd ) ) ; return buf. toString ( ) ; }<CODESPLIT>Programmatic interface .<CODESPLIT>0
public static List < String > getPropertyNames ( Object obj ) { propertyNames new ( ) ; ( obj ) return propertyNames ; } cycleDetect = new ( ) ; performGetPropertyNames ( obj, null, propertyNames, cycleDetect ) ; return propertyNames ; } }<CODESPLIT>Recursively gets names of all properties implemented in specified object and its subobjects .<CODESPLIT>1
public boolean checkLocks ( boolean exclusive, int depth ) { (Parents ( check ( return true ; } return false ; }<CODESPLIT>checks if a lock of the given exclusivity can be placed only considering children up to depth<CODESPLIT>1
private static void createFactoryInstance ( ) { { Class cls = Class. forName ( MPSELECTOREVALUFACTORYCLASS ) ; instance = ( MPSelectorEvaluatorFactory ) cls. newInstance ( ) ; } ( ) {. (,processorMPSelectorEvaluatorFactorycreateFactoryInstance,100 ) ; throw ( ) ; } }<CODESPLIT>Create the singleton Factory instance .<CODESPLIT>1
public NotificationChain basicSetUniformDistribution ( UniformDistributionTypeUniformDistribution, NotificationChain msgs ) { return ( (Map )ixed ( ) ) basicAdd (ROOTUNIFORMDISTRIBUTION,Uniform, msgs ) }<CODESPLIT><! -- begin - user - doc -- > <! -- end - user - doc -- ><CODESPLIT>1
private EntityManager getEntityManager ( ) { EntityManager em ; ( isActive ( transaction ) ) em ( EntityManager ) transactionSynchronization getResource ( ) ; ( em ) em createEntityManager ( ) ; transactionSynchronization registerSynchronization ( new TxSynchronization ( em ) ) ; transactionSynchronizationRegistryResource ( em ) ; } validateCompatibleSyncTypes ( em ) ; } } em nonTxEm getEntityManager ( ) ; ( em ) em createEntityManager ( ) ; nonEm ( em ) ; } } return em ; }<CODESPLIT>Subscribes to an event dispatcher and starts a watch for a given key .<CODESPLIT>0
public FSArray getItemList ( ) { ( List featOkTst ( ( List ) jcasType ) casFeat ) jcasType jcas throwFeatMissing (ListList ) return ( FSArray ) ( jcasType. ll_cas. ll_getFSForRef ( jcasType. ll_cas. ll_get ( addr, ( ( List_Type ) jcasType ). casFeatCode_itemList ) ) ) ; }<CODESPLIT>setter for itemList - sets contains items of the level 1 . The items of the level 1 could contain further items of next level and so on in order to represent an iterative structure of list items .<CODESPLIT>0
public PushRules createPushRules ( Object projectIdOrPath, PushRules pushRule ) throws GitLabApiException { GitLabApiForm formData = new GitLabApiForm ( ) (dendeletetag pushRule getDDeleteTag ( ) ) (membercheck pushRule getMemberCheck ( ) ) (secrets pushRule getPreSecrets ( ) ) (commitmessageregex, pushRuleCommitMessageRegex ( ) ) (branchnameregex, pushRule getBranchNameRegex ( ) ) (authoremailregex, pushRuleAuthorEmailRegex ( ) ) (filenameregex, pushRule getFileNameRegex ( ) ) (maxfilesize, pushRule getMaxFileSize ( ) ) ; Response response = post ( Response.. CREATED, formData,projects, getProjectIdOrPath ( projectIdOrPath ),push ) ; return ( response. readEntity ( PushRules. class ) ) ; }<CODESPLIT>Adds a push rule to a specified project .<CODESPLIT>1
public static IsoRecurrence DateInterval > of ( int count, PlainDate start, Duration IsoDateUnit > duration ) { check ( ) ; ( ) ( ) ; } return RecurrentDateIntervals ( count, TYPESTARTDURATION, start, duration ) ; }<CODESPLIT>/ * [ deutsch ] <p > Erzeugt eine Sequenz von wiederkehrenden Datumsintervallen mit der angegebenen Dauer . < / p ><CODESPLIT>1
private static String upperCaseHex ( String s ) { char chars [ ] = s. toCharArray ( ) ; int length = s. length ( ) ; for ( length ) { switch ( chars [ i ] ) { case : chars [ = ; ; case : chars [ = ; ; case : chars [ = ; ; case : chars [ = ; ; case': chars [ ='' ; ; case'' : chars [ ='' ; ; } } return new String ( chars ) ; }<CODESPLIT>/ * Efficiently converts a string containing a hexadecimal number from lower case to upper case<CODESPLIT>1
static ImmutableList < NameValuePair > buildParameters ( String analyticsId, String clientId, String virtualPageName, String virtualPageTitle, String eventType, String eventName, boolean isUserSignedIn, boolean isUserInternal, Optional < Boolean > isUserTrialEligible, Optional < String > projectNumberHash, Optional < String > billingIdHash, Optional < String > clientHostname, Random random ) { checkNotNull ( analytics ) ; checkNotNull ( clientId ) ; checkNotNull ( virtualPageTitle ) ; checkNotNull ( virtualPage ) ; checkNotNull ( eventType ) ; checkNotNull ( eventName ) ; checkNotNull ( projectNumberHash ) ; checkNotNull ( billingHash ) ; checkNotNull ( clientHostname ) ; checkNotNull ( random ) ; ImmutableList NameValuePair listBuilder = new ImmutableList ( ) ; listBuilder add ( newValuePair (PROTOCOL ) ) ; listBuilder add ( newValuePair (ID analytics ) ) ; listBuilder add ( newValuePair (TYPE VALUETYPEPAGEVIEW ) ) ; listBuilder add ( new BasicValuePair (NONINTERACTIVE VALUEFALSE ) ) ; listBuilder add ( new BasicValuePair (CACHEBUSTER toString ( randomLong ( ) ) ) ) ; listBuilder add ( new BasicValuePair (EVENTTYPE eventType ) ) ; listBuilder add ( new BasicValuePair (EVENT eventName ) ) ; (Hostname ( )Hostname ( ) ( ) ) listBuilder add ( new BasicValuePair (HOST client ( ) ) ) ; } listBuilder add ( new BasicValuePair (CLIENTID clientId ) ) ; ( projectHash ( ) projectHash ( ) ( ) ) listBuilder add ( new BasicValuePair (PROJECTNUMHASH projectNumberHash ( ) ) ) ; } ( billingHash ( ) billingHash ( ) ( ) ) listBuilder add ( new BasicValuePair (ILLIDHASH billingHash ( ) ) ) ; } listBuilder add ( new BasicValuePair (USERSIGNED to ( isUserSignedIn ) ) ) ; listBuilder add ( new BasicValuePair (USER to ( isUserInternal ) ) ) ; ( isUserEligible ( ) ) listBuilder add ( new BasicValuePair (USERTRIGLE to ( isUserTriEligible ( ) ) ) ) ; } listBuilder add ( new BasicValuePair (VIRTUAL VALUETRUE ) ) ; listBuilder add ( new BasicValuePair (PAGE virtual ) ) ; ( virtualTitle ( ) ) listBuilder add ( new BasicValuePair (PAGETITLE virtualTitle ) ) ; } return listBuilder. build ( ) ; }<CODESPLIT>Adds more data providers to the validator .<CODESPLIT>0
@ Override public void insert ( CharSequence text ) throws IOException { ln = text. length ( ) ; ( ln == ) return ; } if ( ln ( end cursor ) ) IOException ( text fit buffer ) ; } if ( cursor end ) makeRoom ( ln ) ; } for ( ln ) { set ( ( cursor ), text. charAt ( ) ) ; } end += ; }<CODESPLIT>Inserts text at cursor position<CODESPLIT>1
public void onNewTab ( final AjaxRequestTarget target, final T tab, final int index ) { ( ( ) ( ( ) ( ) ) ) IndexOutOfBoundsException ( ) ; }abs ( ) add ( ) ; setSelected ( ) ; add ( this ) ; }<CODESPLIT>On new tab .<CODESPLIT>1
public static void outputImage ( int w, int h, OutputStream os, String code ) throws IOException { verifySize = code. length ( ) ; BufferedImage image = new BufferedImage ( w, h, BufferedImage. TYPEINTRGB ) ; Random rand = new Random ( ) ; Graphics2 g2 = image. createGraphics ( ) ; g setHint (, ) ; Color colors = new Color ; Color colorSpaces = new Color { Color. WHITE Color. CYAN Color. GRAY Color. LIGHT_GRAY Color. MAGENTA Color. ORANGE Color. PINK Color. YELLOW } ; fractions = new colors. length ; for ( colors. ) colors [ = color [ rand. nextInt ( color. length ) ; fractions = rand. nextFloat ( ) ; } Arrays. sort ( fractions ) ; g setColor (RAY ) ; g2. fillRect (,, w, h ) ; Color c = getRColor ( 200, 250 ) ; g setColor ( c ) ; g2. fillRect (,, w, h 4 ) ; Random random = new Random ( ) ; g setColor ( getRColor (, 200 ) ) ; for ( 20 ) x = random. nextInt ( w ) ; = random. nextInt ( h ) ; = random. nextInt ( ) ; = random. nextInt ( ) ; g2. drawLine ( x,, x xl 40,l 20 ) ; }Rate = ; area = ( ) (Rate w h ) ; for ( area ) x = random. nextInt ( w ) ; = random. nextInt ( h ) ; rgb = getRandomIntColor ( ) ; image setRGB ( x,, ) ; } shear ( g2, w, h, c ) ; g setColor ( getRColor ( 100, ) ) ; fontSize = h ; font = new (Alian,.IC, fontSize ) ; g setFont ( font ) ; chars = code. toCharArray ( ) ; for ( verify ) AffTransform affine = new AffTransform ( ) ; affine setToRotation ( / rand nextDouble ( ) ( rand nextBoolean ( ) - ), ( w / verifySize ) + /, h / ) ; g setTransform ( affine ) ; g2. drawChars ( chars,,, ( ( w 10 ) / verifySize ) 5, h / fontSize / 10 ) ; } g2. dispose ( ) ; ImageIO. write ( image,jpg, os ) ; }<CODESPLIT>生成指定验证码图像文件<CODESPLIT>0
public Object findClosestObject ( int x, int y, int [ ] distance ) { ( _size ) return null ; } sr = binarySearch ( ), sl = sr ;ist =.VALUE, min = ; for ( boolean expanded true expanded ) expanded = false ; ( sr _size ) Record rec = _records sr ; ( x x mindist ) dist = distance ( rec. x, rec., x, ) ; ( mindist ) min = sr ; mindist = dist ; } += ; expanded = true ; } } ( ) Record rec = _records sl ; ( x x mindist ) dist = distance ( rec. x, rec., x, ) ; ( mindist ) min = sl ; mindist = dist ; } sl -= 1 ; expanded = true ; } } } ( min ) (Prox algorithm ) ; } ( distance null distance ) distance 0 = mindist ; } return _records [ minidx ]. object ; }<CODESPLIT>Removes from the tracker the object that is equal to ( <code > o1 . equals ( object ) < / code > ) the specified object .<CODESPLIT>0
public void setGoldenGrammarErrors ( FSArray v ) { ( GoldenSentence featOkTst ( ( GoldenSentence ) jcasType ) casFeatoldenGrammarErrors null ) jcasType jcas throwFeatMissing (oldenGrammarErrorsuimaGoldenSentence ) ; jcasType llcas llset ( addr, ( ( GoldSentenceType ) jcasType ) casFeatCodeoldGrammarErrors, jcasType. llcas. llgetFSRef ( v ) ) ; }<CODESPLIT>setter for goldenGrammarErrors - sets<CODESPLIT>1
Map < CmsPrincipalBean, String > getResponsibles ( CmsObject cms, CmsResource res ) { Map CmsPrincipalBean result = new HashMap CmsPrincipalBean ( ) ; List CmsResource parentResources = new ArrayList CmsResource ( ) ; { parentResources = cms. readPath ( res, CmsResourceFilter.EXPI ) ; } ( ). (. ( ) ) ; } for ( resource parentResources ) storedSiteRoot = cms ( ) getSiteRoot ( ) ; sitePath = cms ( ) removeSiteRoot ( resource getRootPath ( ) ) ; { cms ( ) set ( "/" ) ; List CmsAccessControlEntry entries = cmsAccessControlEntries ( resource getRootPath ( ) false ) ; for ( CmsAccessControl entries ) ( aceRes ( ) )CmsPrincipal principal = cms. lookupPrincipal ( ace. getPrincipal ( ) ) ; ( principal null ) CmsPrincipalBean prinBean = new CmsPrincipalBean ( principal ( ) principal getDescription ( ) principal isGroup ( ) ) ; ( resource ( ) ( res ( ) ) ) ( resource ( ) ( storedSiteRoot ) ) result. put ( prBean, sitePath ) ; } result. put ( prBean, resource. getRootPath ( ) ) ; } } result. put ( prBean, null ) ; } } } } } ( ). info ( reading responsible users resource. ( ). ( ) ) ; } cms ( ) set ( ) ; } } return result ; }<CODESPLIT>Returns the responsibles . <p ><CODESPLIT>1
public static Router post ( String uriTemplate, ContextHandler handler ) { return ( post (Template handler }<CODESPLIT>Performs mapping for all routers .<CODESPLIT>0
public static void descendingOrder ( DMatrixRMaj U, boolean tranU, DMatrixRMaj W, DMatrixRMaj V, boolean tranV ) {Singular =. min ( W. numRows, W. ) ; checkSMatrixSize ( U, tranU, W, V, tranV ) ; for (Singular ) double bigValue = - 1 ; bigIndex = ; for (Singular ) = W. (, ) ; ( v bigValue ) bigValue = v ; bigIndex = j ; } } ( bigIndex ) ; ( bigIndex ) } = W. (, ) ; set (,,Value ) ; set (Index,Index, ) ; ( V null ) swapRowOrCol ( V, tranV,, bigIndex ) ; } ( U null ) swapRowOrCol ( U, tranU,, bigIndex ) ; } } }<CODESPLIT>Computes the SVD and sorts singular values in descending order . While easier to use this can reduce performance when performed on small matrices numerous times .<CODESPLIT>0
public ApiSuccessResponse stopMonitoring ( StopMonitoringData stopMonitoringData ) ApiException { ApiResponse ApiSuccessResponse stopMonitoringWithHttpInfo ( stopMonitoring return ( ) }<CODESPLIT>Start recording a call Start recording the specified call . Recording stops when the call is completed or you send [ / voice / calls / { id } / stop - recording ] ( / reference / workspace / Voice / index . html#stopRecording ) on either the call or the DN .<CODESPLIT>0
public String getAttributeString ( String attName ) { attributes ( att ) ; ( ) return null ; } return ( String ) o ; } }<CODESPLIT>Get the value for a given attribute .<CODESPLIT>1
public static List findByGroupId ( long groupId, int start, int end ) { return ( ) findBy (,, ) }<CODESPLIT>Returns a range of all the cp option values where groupId = &#63 ; .<CODESPLIT>1
private static void handleSingletonClass ( String key, String value ) throws Exception { object handle ( value ) ; ( key ( "," ) ) interfaces key ( "," ) ; ( interfaces ) serviceMap put ( anInterface object ) ; } } serviceMap put ( key object ) ; } }<CODESPLIT>Send email with a string content and attachment<CODESPLIT>0
public static String [ ] split ( final String string, final char separator, final boolean ignoreQuotes ) { str new ( string ( separator ) ( ) ) ; return strtok. getTokenArray ( ) ; }<CODESPLIT>Normalize and collapse whitespaces from string buffer .<CODESPLIT>0
public ComparisonExpression getLtFilterFromPrefixLike ( ) { ExpressionType rangeComparator ExpressionTypeSTHAN ; comLike ( ; return rangeFilterFromPrefixLike (left, rangeComparator, comand ) ; }<CODESPLIT>/ Construct the upper bound comparison filter implied by a prefix LIKE comparison .<CODESPLIT>1
public void showForgotPasswordView ( String authToken ) { { CmsTokenValidator validator = new CmsTokenValidator ( ) ; validationResult = validator. validateToken ( ACmsUI. getCmsObject ( ), authToken, OpenCms. getLoginManager ( ). getTokenLifetime ( ) ) ; ( validationResult null ) user = validator. getUser ( ) ; ( user isManaged ( ) ) CmsSetPasswordDialog dlg = new CmsSetPasswordDialog ( madminCms, user, getLocale ( ) ) ; AUI ( ) setContentDialog ( ( ) ( AUI ( ) ( ) ) key (PWCHANGEHEADER ) + user ( ), dlg ) ; } Notification. show ( CmsVaadinUtils.Text ( Messages.USERNOTSELFMANAGED1, user. getName ( ) ), Type. ERRORMESSAGE ) ; } } ACmsUI ( ) setError ( ( ) ( ACmsUI ( ) ( ) ) key (PWCHANGEINVALIDTOKEN ) ) ;. info (Invalid authorization token authToken validationResult ) ; } } ( ). error (. ( ) ) ; } }<CODESPLIT>Initializes the login view . <p ><CODESPLIT>0
@ WithBridgeMethods ( value SQLServerQuery class, castRequired ) public C tableHints ( SQLServerTableHints... tableHints ) { (Hints ) hintsServerGrammar tableHints ( tableHints ) ; addJoin ( hints ) ; } return ( ) this ; }<CODESPLIT>Set the table hints<CODESPLIT>1
private void populate ( Field field, Object target, String stringValue ) { field setAccessible ( ) ; Class fieldType = field getType ( ) ; value =Converter convert ( stringValue ) to ( fieldType ) ; field set ( target value ) ; } ( IllegalAccessException ) ( populate field field ) ; } }<CODESPLIT>Populates the specified field on the target with the value from the given option .<CODESPLIT>1
public Object getParameter ( String name ) { { qname =.QNameFromString ( name ) ; ( null muserParams ) return null ; n = muserParams. size ( ) ; for ( ) { Arg arg = ( Arg ) muserParams. elementAt ( ) ; ( arg ( ) ( qname ) ) return arg. getVal ( ). object ( ) ; } } return null ; } ( java ) return null ; } }<CODESPLIT>Reset parameters that the user specified for the transformation . Called during transformer . reset () after we have cleared the variable stack . We need to make sure that user params are reset so that the transformer object can be reused .<CODESPLIT>0
private MultipartContent createContent ( final ProblemInput input, final File output, final File source ) throws IOException { HttpMediaType type = new HttpMediaType ( MEDIATYPE ) ; type setParameter ( BOUND createBoundary ( ) ) ; sourceFilePath = new StringBuilder ( PATHPREFIX ) ( source ( ) ) toString ( ) ; MultipartContent content = new MultipartContent ( ) setMediaType ( type ) addPart (Executor buildDataPart ( CSRFPARAMETER values getToken ( ) ) ) addPart (Executor buildFilePart ( APARAMETER output ) ) addPart (Executor buildFilePart ( SOURCEFILEPARAMETER source ) ) addPart (Executor buildDataPart ( SOURCEFILEPARAMETER sourceFilePath ) ) addPart (Executor buildDataPart ( COMMANDPARAMETER SUBCOMMAND ) ) addPart (Executor buildDataPart ( PROBPARAMETER input getPro ( ) getId ( ) ) ) addPart (Executor buildDataPart ( INPUTIDPARAMETER ( input getNumber ( ) ) ) ) addPart (Executor buildDataPart ( NUMSOURCEFILEPARAMETER DEFAULTNUMSOURCEFILE ) ) addPart ( HttpRequestExecutor buildDataPart ( AGPARAMETER DEFAULTAGENT ) ) ; return content ; }<CODESPLIT><p > Created and returns a valid { @link MultipartContent } instance that contains data required for submission . < / p ><CODESPLIT>1
@ SuppressWarnings (unchecked" ) public boolean push ( E e ) { (InSize ) buckets add ( ( ) new bucket ) ;InBucket = 0 ; } buckets. getLast ( )InBucket = e ; size ; return true ; }<CODESPLIT>This method verifies that this GO has no PCI representation or that the PCI representation is not dirty or new . Otherwise it will throw an exception in order to prevent the dirty state of the GO and the PC to result in conflicting updates in the database .<CODESPLIT>0
static ResultDescriptor resultDescriptor ( ResultDescriptorDTO rDescriptorDTO ) { Result r = new Result ( rDTO getInterval ( ) ) ; for ( ResultDTODTO getDatasources ( ) ) (Heartbeat ( ) )Descriptor datasource ( ds ( ) ds getSource ( ) dsHeartbeat ( ) ds getFunction ( ) ) ; } rDescriptor datasource ( ds getLabel ( ), ds getSource ( ), ds getFunction ( ) ) ; } } for ( ResultDTO Expression exprDTO.Expressions ( ) ) rDescriptor expression ( expr getLabel ( ), expr getExpression ( ) ) ; }Descriptor export (DescriptorExports ( ) ) ; return rDescriptor ; }<CODESPLIT>Visits all nodes in the resource tree bellow the given resource using depth - first search .<CODESPLIT>0
public boolean handleRemoteCriteria ( StringBuffer strFilter, boolean bIncludeFileName, Vector < BaseField > vParamList ) {ListenerListener this getNextEnabledListener ( ) ; (Listener ) return ( ( FileListener )Listener )RemoteCriteria (FilterIncludeList ) ; return thisRemoteCriteria (FilterIncludeList ) ; }<CODESPLIT>Check to see if this record should be skipped . Generally you use a remote criteria .<CODESPLIT>0
@ POST @ Consumes ( MediaType._JSON ) @ Produces ( MediaType._JSON ) public Response registerWindowsVariant ( WindowsVariant windowsVariant, @ PathParam (pushAppID ) String pushApplicationID, @ Context UriInfo uriInfo ) { Push push getSearch ( ) findByPushForDeveloper ( push ) ; ( push ) return status ( NOT_FOUND ) entity ( not find requested PushApplicationEntity ) build ( ) ; } validateModelClass ( windowsVariant ) ; } ( ) ( create variant )BadRequest ( ( ; return builder build ( ) ; } (Register variant Application pushApplicationID ) ;Service addVariant ( windowsVariant ) ; pushService addVariant ( push windowsVariant ) ; return. created ( uriInfo. getAbsolutePathBuilder ( ). path ( String. valueOf ( windowsVariant. getVariantID ( ) ) ). build ( ) ). entity ( windowsVariant ). build ( ) ; }<CODESPLIT>Get a global integer property . This method will first try to get the value from an environment variable and if that does not exist it will look up a system property .<CODESPLIT>0
public static Iterable Reference > getReferences ( String referenceSetId, OfflineAuth auth ) throws IOException { gen ( ) build ( )Offline ( ) ; return Paginator References create ( gen ) search ( new SearchReferencesRequest ( ) setReferenceSetId ( referenceSetId ) ) ; }<CODESPLIT>Gets VariantSetIds from a given datasetId using the Genomics API .<CODESPLIT>0
public void put ( String localFile, String remoteTargetDirectory ) throws IOException { ( { localFile } remoteTargetDirectory ) ; }<CODESPLIT>Copy a local file to a remote directory uses mode 0600 when creating the file on the remote side .<CODESPLIT>1
public synchronized void throttle ( final int bulkMutationRpcTargetMs ) { (Thrott ) return ; }. info (Initializing BulkMutation throttlingOnce higher parallelism reduced." bulkMutationRpcTarget ) ; highTarget = ( ) ( bulkMutationRpcTarget ) ; lowTarget = ( ) ( bulkMutationRpcTarget ) ; setCurrentInFlightMaxR ( getCurrentInFlightMaxR ( ) ) ; Runnable r new Runnable ( ) { @ Override public void run ( ) { meanLatency = getMe ( statsTimer ( ) ) ; ( meanLatency bulkMutationTarget ) reduceParallelism ( meanLatencyMs, absoluteMaxInFlightR 10 ) ; } ( meanLatency highTarget ) reduceParallelism ( meanLatencyMs, absoluteMaxInFlightR 10 ) ; } ( getMe ( statsThrottTimer ( ) ) ) ( meanLatency lowTarget ) increaseParallelism ( meanLatencyMs, absoluteMaxInFlightR 20 ) ; } (InFlightMaxRcs absoluteMaxInFlightRcs 20 meanLatency ( bulkMutationTarget ) ) increaseParallelism ( meanLatencyMs, absoluteMaxInFlightRcs 50 ) ; } } } private long getMeanMs ( Timer timer ) { return. NANOSECONDS. toMillis ( ( long ) timer. getSnapshot ( ). getMean ( ) ) ; } private void reduceParallelism ( long meanLatencyNanos, int step ) { minimumRpc = max ( absoluteMaxInR 100 ) ; newValue = max ( currentInMaxR step minimumRpc ) ; setParallelism ( meanLatencyNanos,Redu, newValue ) ; } private void increaseParallelism ( long meanLatencyNanos, int incrementStep ) { newValue = ( currentInMaxR incrementStep absoluteMaxInR ) ; setParallelism ( meanLatencyNanos,Increasing, newValue ) ; } private void setParallelism ( long meanLatencyNanos, String type, int newValue ) { currentValue = getCurrentInMaxR ( ) ; ( newValue currentValue ) setCurrentInFlightMaxRcs ( newValue ) ;. (Latencyal from.".SECONDS. ( meanLatencyNanos ) type newValue ) ; } } } ; BigtableSessionSharedThreadPools getInstance ( ) getRetryExecutor ( ) scheduleAtFixedRate ( r, 20, 20, SECONDS ) ; isThrott = ; }<CODESPLIT>Enable an experimental feature that will throttle requests made from {<CODESPLIT>1
public static UncheckedBinary fromBase64 ( String base64 ) { StringBuilder normalizedBase64 = new StringBuilder ( base64. length ( ) ) ; for ( base64. ( ) ) { c = base64. charAt ( ) ; ( == ) ; ( == ) ; ( == ) = ; normalizedBase64. ( c ) ; } while (Base64 ( ) % 4 ) { normalizedBase64. ( ) ; } bytes = DatatypeConverter. parseBase64Binary ( normalizedBase64. toString ( ) ) ; return Binary. from ( bytes ) ; }<CODESPLIT>Reads standard and URL / filename - safe Base 64 dialects as described in RFC 4686 . Additionally it accepts not Base 64 encoded strings without padding or allows to use dot character ( . ) as padding character .<CODESPLIT>1
boolean isMatch ( Class beanType, Object id ) { return beanType ( beanType ) idMatch ( id ) }<CODESPLIT>Checks that the supplied parameter is not null . Throws a {<CODESPLIT>0
private String formatPriority ( Priority value ) { result = null ; ( value ) priorityTypes = getStringArray ( mlocale PRIORITYTYPES ) ; priority = value ( ) ; ( priority Priority LOWEST ) priority = Priority. LOWEST ; } ( priority PriorityLEVEL ) priority = Priority. DO_NOT_LEVEL ; } } priority /= 100 ; result = priorityTypes priority - 1 ; } return ( result ) ; }<CODESPLIT>This method is called to format a task type .<CODESPLIT>0
public static int cuMempyPeer ( CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, long ByteCount ) { return cuNative (Count ) }<CODESPLIT>Copies device memory between two contexts .<CODESPLIT>1
private GraphCentricQueryBuilder has ( String key, TitanPredicate predicate, Object condition ) { checkNotNull ( ) ; checkNotNull ( predicate ) ; ( predicate isValidCondition ( condition ) condition condition ) ; constraints ( PredicateCondition ( predicate condition ) ) ; return this ; }<CODESPLIT>/ * --------------------------------------------------------------- Query Execution ---------------------------------------------------------------<CODESPLIT>0
private void changeReplicas ( PrimaryTerm term ) { threadContext execute ( ( ) { ( this ( ) this ( ) ) this. term = term ; consumer register ( term primary ( ) member ( ) ) ; } } ) ; }<CODESPLIT>Handles a replica change event .<CODESPLIT>1
public void translate ( Vector3D <, > translation ) { this03 += translation ( ) ; this += translation ( ) ; this += translation getZ ( ) ; }<CODESPLIT>Translate the position .<CODESPLIT>1
public static float getFloat ( float value, float minValue, float maxValue ) { return min ( max ( minValue, ) ) }<CODESPLIT>Return a float value within the range . <p > This is just a wrapper for Math . min () and Math . max () . This may be useful if you feel it confusing ( Which is min and which is max? ) . < / p ><CODESPLIT>1
@ Destroy ( priority AutumnActionPriority. MIN_PRIORITY ) public void savePreferences ( ) {Set Preferences preferencesFlush =dxSets newSet ( ) ; ( Preference preference preferences ) Preferences preferencesFile = namesFiles ( preference key ) ; preferencesToFlush add ( preferencesFile ) ; preference value save ( preference key, preferencesFile ) ; } for ( preferences preferencesFlush ) preferencesFile flush ( ) ; } }<CODESPLIT>Saves all current preferences . This is a reasonably heavy operation as it flushes all preferences files - by default this is done once before the application is closed .<CODESPLIT>1
public void unsubscribe ( final Subscription < T > subscription ) { token = subscription getToken ( ) ;. log (. FINERRemoteManager {0} token {1}" new { this. name token } ) ; ( token Exception ) this transport registerErrorHandler ( null ) ; } ( token Tuple ) this tupleToHandlerMap remove ( token ) ; } ( token Class ) this msgTypeToHandlerMap remove ( token ) ; } Remote ( subscription type subscription ( ). ( ) ) ; } }<CODESPLIT>Unsubscribes a handler .<CODESPLIT>1
public static SymbolList toDnaSymbolList ( final Sequence sequence ) throws IllegalSymbol { checkNotNull ( return createDN ( sequence getValue ( ) (, "" ) ) ; }<CODESPLIT>Convert the specified HML Sequence element into a DNA symbol list .<CODESPLIT>1
private boolean processArguments ( String [ ] args ) { if ( args. length < ) { System. err. println ( messages. (argument ) ) ; return false ; } setCustomMessageFileFromEnvironment ( ) ; Pattern argPattern = Pattern. compile ( "--? ) ; for ( args. ) { argMatch = argPattern. ( args ) ; if ( argMatch. matches ( ) ) { ( argMatch group ( ) ) { "v ( args length ) ++ i ; if ( args. (2 ) args. (2 ) ) { version = EPUBVersion. VERSION_2 ; } if ( args. (3 ) args. (3 ) ) { version = EPUBVersion. VERSION_3 ; } { outWriter. println ( messages. (help ) ) ; ( InvalidVersionException ( InvalidVersionException. UNSUPPORTEDVERSION ) ) ; } } { outWriter. println ( messages. (help ) ) ; ( messages. get (versionargument ) ) ; } ; " " ( args length ) mode = args [ ++ i ; expanded = mode. equals (exp ) ; } { outWriter. println ( messages. (help ) ) ; ( messages. get (argument ) ) ; } ; "p "profile ( args length ) String profileStr = args ++ ; { profile = EPUBProfile. valueOf ( profileStr. toUpperCase ( Locale. ROOT ) ) ; } ( ) { System. err. println ( messages. (modeversionignored profileStr ) ) ; profile = EPUBProfile. DEFAULT ; } } { outWriter. println ( messages. (help ) ) ; ( messages. get (profileargument ) ) ; } ; " "save true ; ; "o " ( ( args length ( ) ) &&! ( args ( ) ) ) fileOut = new File ( args ++ ) ; } if ( ( args. length ( ) ) ( args. ( "-" ) ) ) { fileOut = null ; ++ ; } { File pathFile = new File ( path ) ; if ( pathFile. isDirectory ( ) ) { fileOut = new File ( pathFile. getAbsoluteFile ( ). getParentFile ( ), pathFile. getName ( ) +checkxml ) ; } { fileOut = new File ( path +checkxml ) ; } } xmlOutput = true ; ; " "json ( ( args length ( ) ) &&! ( args ( ) ) ) fileOut = new File ( args ++ ) ; } if ( ( args. length ( ) ) ( args. ( "-" ) ) ) { fileOut = null ; ++ ; } { File pathFile = new File ( path ) ; if ( pathFile. isDirectory ( ) ) { fileOut = new File ( pathFile. getAbsoluteFile ( ). getParentFile ( ), pathFile. getName ( ) +checkjson ) ; } { fileOut = new File ( path +checkjson ) ; } } jsonOutput = true ; ; " "mp ( ( args length ( ) ) &&! ( args ( ) ) ) fileOut = new File ( args ++ ) ; } if ( ( args. length ( ) ) ( args. ( "-" ) ) ) { fileOut = null ; ++ ; } { File pathFile = new File ( path ) ; if ( pathFile. isDirectory ( ) ) { fileOut = new File ( pathFile. getAbsoluteFile ( ). getParentFile ( ), pathFile. getName ( ) +checkmp ) ; } { fileOut = new File ( path +checkmp ) ; } } xmpOutput = true ; ; " "info reportingLevel ReportLevel Info ; ; " "fatal reportingLevel ReportLevel Fatal ; ; " "error reportingLevel ReportLevel Error ; ; " "warn reportingLevel ReportLevel Warning ; ; " "usage reportingLevel ReportLevel Usage ; ; " "quiet outWriter setQuiet ( true ) ; ; "failwarnings String fw args (failwarnings length ( ) ) ; failOnWarnings = ( fw. compareTo ( "-" ) 0 ) ; ; " "red ( args length ) fileOut = new File ( args ++ ) ; } ; " "customMessages ( args length ) String fileName = args + 1 ; if (none. compareTo ( fileName. toLowerCase ( Locale. ROOT ) ) == ) { customMessageFile = null ; useCustomMessageFile = false ; ++ i ; } if ( fileName. ( "-" ) ) { customMessageFile = new File ( fileName ) ; useCustomMessageFile = true ; ++ i ; } { System. err. println ( String. format ( messages. (messagefilename ) fileName ) ) ; displayHelp ( ) ; return false ; } } ; "l "list ( args length ) if ( args. ( "-" ) ) { listChecksOut = new File ( args ++ ) ; } { listChecksOut = null ; } } listChecks = true ; ; " ( args length ) if ( args. ( "-" ) ) { System. err. println ( String. format ( messages. (in ) args [ ) ) ; displayHelp ( ) ; return false ; } { String langTag = args ++ ; this. locale = Locale. forLanguageTag ( langTag ) ; this. messages = Messages. getInstance ( this. locale ) ; } } { System. err. println ( String. format ( messages. ( ) ) ) ; displayHelp ( ) ; return false ; } ; " "?" "help displayHelp ( ) ; ; "version displayVersion ( ) ; ; default System. err. println ( String. format ( messages. (unrecognizedargument ) args [ ) ) ; displayHelp ( ) ; return false ; } } { if ( path == null ) { path = args [ i ; } { System. err. println ( String. format ( messages. (unrecognizedargument ) args [ ) ) ; displayHelp ( ) ; return false ; } } } if ( ( xmlOutput xmpOutput ) ( xmlOutput jsonOutput ) ( xmpOutput jsonOutput ) ) { System. err. println ( messages. (outputtype ) ) ; return false ; } if ( path null ) { StringBuilder sb = new StringBuilder ( ) ; for ( path. ( ) ) { if ( path. ( ) == ) { sb. append ('' ) ; } { sb. append ( path. charAt ( ) ) ; } } path = sb. toString ( ) ; } if ( path == null ) { if ( listChecks ) { return true ; } { System. err. println ( messages. (filespecified ) ) ; return false ; } } if ( path. matches (EPUuBb]" ) ) { if ( mode null version EPUBVersion. VERSION3 ) { System. err. println ( messages. (modeversionignored ) ) ; mode = null ; } } if ( mode == null profile == null ) { outWriter. println ( messages. (moderequired ) ) ; return false ; } return true ; }<CODESPLIT>recursively get the values stored for the given {<CODESPLIT>0
public FieldList move ( int iRelPosition ) throws DBException { m_iLogicalFilePosition = UNKNOWN_POSITION ; FieldList record = this. getNextTable ( ). move (RelPosition ) ;CurrentPosition = mPhysicalFilePosition ; (RelPosition DBConstants FIRST )CurrentPosition ; (RelPosition DBConstants LAST ) ( mEndOfFileIndex UNKNOWN )CurrentPosition = UNKNOWN_POSITION ; }CurrentPosition mEndOfFileIndex ; }CurrentPosition +=RelPosition ; m_iPhysicalFilePosition =CurrentPosition ; ( ( record null ) ( (RelPosition DBConstants FIRST ) (RelPosition == DBConstants NEXT ) ) ) mEndOfFileIndexCurrentPosition ; (CurrentPosition ) this addRecordReference (CurrentPosition ) ; m_iLogicalFilePosition =CurrentPosition ; } return record ; }<CODESPLIT>Find this bookmark in one of the lists .<CODESPLIT>0
public void registerIndexQuery ( long index, Runnable query ) { Runnable queries thisQueries compute ( index new ( ) ) ; queries add ( query ) ; }<CODESPLIT>Registers a causal session query .<CODESPLIT>0
public static T T populateCommand ( T command, String... args ) { CommandLineCommandLine ( commandFactory ( ; parse ( args ; return command ; }<CODESPLIT><p > Convenience method that initializes the specified annotated object from the specified command line arguments . < / p > <p > This is equivalent to < / p > <pre > CommandLine cli = new CommandLine ( command ) ; cli . parse ( args ) ; return command ; < / pre ><CODESPLIT>1
public LogEvent [ ] getLogEvents ( ) { (LogEvents ) return new LogEvent 0 ; } Log events new LogLogEvents ( ) ; return ( LogEvent ) mLogEvents. toArray ( events ) ; } }<CODESPLIT>Finds a template based on the given URI . If path ends in a slash revert to loading default template . If default not found or not specified return null .<CODESPLIT>0
@ Requires ( {bytecode nullcontract null ) @ Ensures (result null ) protected byte [ ] instrumentWithContracts ( byte [ ] bytecode, ContractAnalyzer contracts ) { reader new ( bytecode ) ; writer new NonLoadingClass ( reader COMPFRAMES | COMPS ) ; SpecificationClassAdapter adapter new SpecificationClassAdapter ( writer contracts ) ; reader accept ( adapterReader EXPANDFRAME ) ; return writer. toByteArray ( ) ; }<CODESPLIT>Processes the specified reader and returns extracted contracts .<CODESPLIT>0
@ Override final public void dissociateConnections ( ) throws ResourceException { ( TraceComponent isAnyTracingEnabled ( ) TRACE ( ) ) SibTr ( TRACE,issociConnections ) ; } for ( _sessions ( ) ( ) ) object = iterator next ( ) ; ( object JmsSessionImpl ) ( ( JmsJcaSessionImpl ) object ) dissociate ( ) ; remove ( ) ; } } ( TraceComponent isAnyTracingEnabled ( ) TRACE ( ) ) SibTr exit ( this, TRACE,issociateConnections ) ; } }<CODESPLIT>Returns the current global or container local transaction if any for this managed connection . If there is currently no transaction associated with this managed connection calls <code > lazyEnlist< / code > to ensure that one has not been started .<CODESPLIT>0
public com google api ads adwords v201809 cm String_StringMapEntry [ ] getDisplayValue ( ) { return ; }<CODESPLIT>Gets the parentDimensionValue value for this ProductBiddingCategoryData .<CODESPLIT>0
@ SuppressWarnings (WeakerAccess ) public ApiFuture < Void > deleteInstanceAsync ( String instanceId ) { instanceName ( projectId instanceId ) ;table DeleteInstanceRequest request =table DeleteInstanceRequest newBuilder ( ) setName ( instanceName ) build ( ) ; return ApiFutures. transform ( stub. deleteInstanceCallable ( ). futureCall ( request ), new ApiFunction Empty, Void ( ) @ Override public Void apply ( Empty input ) { return null ; } }Exec directExecutor ( ) ) ; }<CODESPLIT>Asynchronously lists all of the instances in the current project .<CODESPLIT>0
boolean contains ( String normalizedPath ) { ( ) return false ( ( ) ( ) ) return false return normalizedPath regionMatches ( 0, normalizedRoot, 0, normalizedRoot. length ( ) ) ; }<CODESPLIT>Check if the provided path is contained within this root s hierarchy .<CODESPLIT>1
private static boolean checkValidity ( ClientSocket client, byte from, StateConnection expected ) { from getState ( }<CODESPLIT>Check if the client is in a valid state .<CODESPLIT>1
@ Override public Request EnableVpcClassicLinkRequest > getDryRunRequest ( ) { Request EnableRequest request EnableVpcRequest ( ) marshall ( this ) ; request addParameter (DryRun Boolean ( true ) ) ; return request ; }<CODESPLIT><p > One or more filters to limit the type of sessions returned by the request . < / p > <p > <b > NOTE : < / b > This method appends the values to the existing list ( if any ) . Use { @link #setFilters ( java . util . Collection ) } or { @link #withFilters ( java . util . Collection ) } if you want to override the existing values . < / p ><CODESPLIT>0
private String generateMethodKey ( CtMethod method ) throws NotFoundException {QualifiedName method ( ) ( ) ; methodSimple method ( ) ;NamesQualifiedNames ( method ) ; return TestMethod. generateMethodKey (QualifiedName, methodSimpleName, argClassQualifiedNames ) ; }<CODESPLIT>( for example when class of method argument type has not been loaded by class loader )<CODESPLIT>0
public static void info ( String format, Object... arguments ) { LogFactory indirectGet ) ) }<CODESPLIT>Info等级日志，小于Warn<br > 由于动态获取Log，效率较低，建议在非频繁调用的情况下使用！！<CODESPLIT>1
private static CommandLineArgument findCommandLineOption ( String arg ) { ( commandLine CommandLine ( ) ) ( commandLine ( ) ) return commandLineArgument ; } } return null ; }<CODESPLIT>Not needed until workers support dynamic removal ( currently reload required )<CODESPLIT>0
@ Override public void addInheritedSummaryLabel ( TypeElement typeElement, Content inheritedTree ) { ContentLink writer getPreQualifiedClassLink ( LinkInfoImpl MEM typeElement false ) ; Content label newContent ( ( typeElement ) configuration getText (docletFieldsInheritedFromClass ) configuration getText (docletFieldsInheritedFromInterface ) ) ; Content labelHeading HtmlTree HEAD ( HtmlConstants INHERITSUMMARYHEAD, label ) ; labelHeading addContent ( Contents SPACE ) ; labelHeading addContent (Link ) ; inheritedTree addContent ( labelHeading ) ; }<CODESPLIT>{<CODESPLIT>0
public static String makeDeepLink ( String link ) { ( linkRemoteConnectionLink ( )RemoteParameter ( link ) ) link += ( link ( "?" ) "&" "?" ) PARAMREMOTECONNECTION getCurrentRemoteConnectionLink ( ) ; } return link ; }<CODESPLIT>Adds remote connection parameter to link GET query if parameter yet not present in this link .<CODESPLIT>1
public static Object convert ( String propertyName, String s, Class t, Class propertyEditorClass ) throws JspCoreException { { if ( s == null ) if ( t ( Boolean ) t ( Boolean ) ) s =false ; return null ; } if ( propertyEditorClass null ) return getValueFromBeanInfoPropertyEditor ( t, propertyName, s, propertyEditorClass ) ; } if ( t ( Boolean ) t ( Boolean ) ) if ( s (on ) s (true ) ) s =true ; s =false ; return new Boolean ( s ) ; } if ( t ( Byte ) t ( Byte ) ) return new Byte ( s ) ; } if ( t ( Character ) t ( Character ) ) return s. length ( ) 0 new Character ( s. charAt ( 0 ) ) : null ; } if ( t ( Short ) t ( Short ) ) return new Short ( s ) ; } if ( t ( Integer ) t ( Integer ) ) return new Integer ( s ) ; } if ( t ( Float ) t ( Float ) ) return new Float ( s ) ; } if ( t ( Long ) t ( Long ) ) return new Long ( s ) ; } if ( t ( Double ) t ( Double ) ) return new Double ( s ) ; } if ( t ( String ) ) { return s ; } if ( t ( java io File ) ) { return new java. io. File ( s ) ; } if ( t getName ( ) (javalangObject ) ) { return new Object [ ] { s } ; } { return getValueFromPropertyEditorManager ( t, propertyName, s ) ; } } ( ) { Jsp ( ) ; } }<CODESPLIT>{<CODESPLIT>0
public boolean isGeneralInstance ( ) { = ; ( this generalInstance ) ret = this. generalInstance ; } ( getParent ( ) ) getParentType ( )GeneralInstance ( ) ; } return ret ; }<CODESPLIT>Getter method for the instance variable { @link #generalInstance } .<CODESPLIT>1
public List < CmsPropertyConfig > getPropertyConfiguration ( ) {AConfigData parentData parent ( ) ; CmsPropertyConfig parentProperties ; ( ( parentData )DiscardInheritedProperties ( ) ) parentProperties parentData getPropertyConfiguration ( ) ; } parentProperties emptyList ( ) ; } CmsPropertyConfig result = combineConfigurationElements ( parentPropertiesdataOwnPropertyConfigurations ( ) false ) ; return result ; }<CODESPLIT>Gets the configuration for the available properties . <p ><CODESPLIT>1
public static void removeConsecutiveSeparators ( JPopupMenu popupMenu ) { for ( popupMenu. getComponent ( ) ) (PopupMenuSeparator ( popupMenu getComponent ( ) ) ) (PopupMenuSeparator ( popupMenu getComponent ( ) ) ) popupMenu remove ( ) ; -- ; } } } }<CODESPLIT>Removes all top separators from the given pop up menu . <p > For example calling the method on the given menu : <pre > Separator Separator Menu Entry Separator Menu Entry Separator Menu Entry < / pre > would result in : <pre > Menu Entry Separator Menu Entry Separator Menu Entry < / pre ><CODESPLIT>0
protected void writeListNumbers ( final OutputStream result ) throws IOException { ( list ) write ( RtfList LISTNUMBER ) ; write (ToByteArray ( list ) ) ; } }<CODESPLIT>Write the indentation values for this <code > RtfList< / code > .<CODESPLIT>0
private String buildInternalForm ( ) { StringBuffer result = new StringBuffer ( 128 ) ; CmsResource resource = null ; internal = false ; { resource = getCms ( ). readResource ( getParamResource ( ), CmsResourceFilter. ALL ) ; internal = resource. isInternal ( ) ; } ( ). error (. ( ) ) ; } if ( ( resource null ) ( resource isFile ( ) ) ) result. ( "<form action ). ( getDialogUri ( ) ). ( methodpost nameinternal class ) ; result. ( "<table border0 width100 ) ; result. ( "< ) ; result. (< classdialogpermissioncell ). ( key ( Messages.PERMISSIONINTERNAL0 ) ) ; result. (input typecheckbox name ) ; result. ( PARAMINTERNAL ) ; result. ( valuetrue ) ; if ( internal ) result. ( checkedchecked ) ; } if (Editable ( ) ) result. ( disableddisabled ) ; } result. ( ) ; if (Editable ( ) ) result. ( "<input  typesubmit classdialogbutton value ). ( key ( Messages.LABELSET0 ) ). ( ) ; } result. ( ) ; result. ( ) ; result. (table ) ; setParamAction ( DIALOGINTERNALUSE ) ; setParamType ( null ) ; setParamName ( null ) ; result. ( paramsAsHidden ( ) ) ; result. (form ) ; } return result. toString ( ) ; }<CODESPLIT>Builds a String with HTML code to display the form to add a new access control entry for the current resource . <p ><CODESPLIT>1
public withIntegrationResponses ( java util Map String,ResponseResponses ) { setResponses (Responses ; return this ; }<CODESPLIT><p > Specifies the integration s responses . < / p > <div class = remarks > <p / > <h4 > Example : Get integration responses of a method< / h4 > <h5 > Request< / h5 > <p / ><CODESPLIT>1
public static String getStateStyle ( CmsResourceState state ) { state ; ( ) ( ( ) ) stateStyle = OpenCmsTheme._DELETED ; } ( isNew ( ) ) stateStyle = OpenCmsTheme._NEW ; } (Changed ( ) ) stateStyle = OpenCmsTheme._CHANGED ; } } return stateStyle ; }<CODESPLIT>Gets the CSS style name for the given resource state . <p ><CODESPLIT>1
public CloseableResource BlockMasterClient acquireBlockMasterClientResource ( ) { return CloseableResource BlockMasterClient (BlockMasterClient acquire ( ) ) Override public void close ( ) { release ( ( ; } } ; }<CODESPLIT>Releases a block worker client to the client pools .<CODESPLIT>0
public void setRecommendations ( java. util. Collection < ReservationPurchaseRecomm > recommendations ) { ( recommend ) this recommend null ; return ; } this recommend new java util ReservationPurchaseRecomm ( recommend ) ; }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>0
public static Point findImage ( BufferedImage image, BufferedImage findme, double tolerance ) { image image ( ) ; findme findme ( ) ; (me ) image image ( ) ; findme findme ( ) ; (me ) return findImage ( getRGB ( image ), imageWidth, imageHeight, getRGB ( findme ), findmeWidth, findmeHeight, tolerance ) ; } } return null ; }<CODESPLIT>Gets the RGB pixels for the given image into a new array .<CODESPLIT>0
@ SuppressWarnings ( "unchecked" ) protected void fireEntryRemoved ( K key, V value ) { ( this listeners ) for (MapListener super super V this listenersListeners (MapListener. ) ) listenerRemoved ( key, value ) ; } } }<CODESPLIT>Fire the removal event .<CODESPLIT>1
public void setWelcomeFiles ( String [ ] welcomeFiles ) { ( welcome ) this welcomeFiles ( welcomeFiles welcomeFiles ) ; } }<CODESPLIT>CHECKSTYLE : OFF<CODESPLIT>0
public static void setDebugConfigs ( OneProperties debugConfigsObj, String debugConfigAbsoluteClassPath ) { (Configs ) Configs. debugConfigs = debugConfigsObj ; } (ClassPath ) Configs. debugConfigAbsoluteClassPath = debugConfigAbsoluteClassPath ;Configs initConfigs ( ConfigConfigAbsoluteClassPath ) ; } (Configs ) ConfigConfigs initConfigs ( ConfigConfigAbsoluteClassPath ) ; } }<CODESPLIT><p > Set self define debug configs . < / p > Can use self debug configs path or self class extends { @link OneProperties } .<CODESPLIT>1
public final Optional < Style > getStyle ( final String styleName ) { style this styles ( styleName ) ; ( ) return this styleParser loadStyle ( this, this clientHttpRequestFactory, styleRef ) ; } return Optional empty ( ) ; } }<CODESPLIT>Retrieve the configuration of the named template .<CODESPLIT>0
@ Override public ListUsageForLicenseConfiguration listUsageForLicenseConfiguration ( ListUsageForLicenseConfigurationRequest request ) beforeClientExecution executeListUsageFor ( request }<CODESPLIT><p > Modifies the attributes of an existing license configuration object . A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager . Components include specifications for the license type ( Instances cores sockets VCPUs ) tenancy ( shared or Dedicated Host ) host affinity ( how long a VM is associated with a host ) the number of licenses purchased and used . < / p ><CODESPLIT>0
public EventConsumerGroup createEventConsumerGroup ( String, String resourceName, String eventEndpointName, String name ) { return createEventGroupWithServiceResponseAsync (,,, ) toBlocking ( ) ( ) body ( ) ; }<CODESPLIT>Add a consumer group to an Event Hub - compatible endpoint in an IoT hub . Add a consumer group to an Event Hub - compatible endpoint in an IoT hub .<CODESPLIT>1
public ConstantInfo addConstant ( ConstantInfo constant ) { ConstantInfo info = ( ConstantInfo ) m ( constant ) ; ( info ) return info ; } = constant getEntry ( ) ; (IndexedPreserveOrder ) = mIndexed ( ) ; mIndexed setSize ( sizeCount ) ; mIndexed set ( size constant ) ; } m put ( constant, constant ) ;Entries +=Count ; return constant ; }<CODESPLIT>Perform an HTTP GET at the given path returning the results of the response .<CODESPLIT>0
@ Override public void visit ( Column column ) { stringValue = column ( ) ; ( stringValue (true ) stringValue (false ) ) setValue ( Boolean ( stringValue ), Types BOOLEAN ) ; } }<CODESPLIT>Booleans are not recognized by the parser but are seen as column names .<CODESPLIT>1
private HodSearchResult addDomain ( final Iterable < ResourceName > indexIdentifiers, final HodSearchResult document ) { index = document getIndex ( ) ; domain = null ; (Identifiers ) ( index ( indexIdentifier ( ) ) ) domain indexIdentifier getDomain ( ) ; } } ( domain ) domainINDEXNAMES contains ( index )INDEX : getDomain ( ) ; } return document. toBuilder ( ). domain ( domain ). build ( ) ; }<CODESPLIT>Add a domain to a FindDocument given the collection of indexes which were queried against to return it from HOD<CODESPLIT>1
private URI initiateResumableUpload ( URI batchJobUploadUrl ) throws BatchJobException { HttpRequestFactory requestFactory = httpTransport. createRequestFactory ( req { HttpHeaders headers createHttpHeaders ( ) ; headers setContentLength ( ) ; headers (ogresstart ) ; req setHeaders ( headers ) ; reqLoggingEnabled ( ) ; } ) ; httpRequest = requestFactory buildPostRequest ( new GenericUrl ( batchJobUploadUrl ) new EmptyContent ( ) ) ; response httpRequest execute ( ) ; ( response getHeaders ( ) response getHeaders ( ) getLocation ( ) ) BatchJob (Initiate upload Res upload URI response ) ; } return URI. create ( response. getHeaders ( ). getLocation ( ) ) ; } ( ) BatchJob ( initiate upload ) ; } }<CODESPLIT>Post - processes the request content to conform to the requirements of Google Cloud Storage .<CODESPLIT>0
protected String getSelectedValue ( CmsObject cms, List < CmsSelectWidgetOption > selectOptions, String currentValue ) { currentValue ; ( CmsStringUtil ( paramValue ) )Select optionSelectOption getDefaultOption ( selectOptions ) ; ( ) option ( ) ; } } return paramValue ; }<CODESPLIT>Returns the currently selected value of the select widget . <p ><CODESPLIT>1
public void marshall ( ListBootstrapActionsRequest listBootstrapActionsRequest, ProtocolMarshaller protocolMarshaller ) { ( listBootstrapActionsRequest null ) SdkClientException ( marshall(...)" ) ; } { protocolMarshaller. marshall ( listBootstrapActionsRequest. getClusterId ( ),IDBINDING ) ; protocolMarshaller. marshall ( listBootstrapActionsRequest. getMark ( ), MARKBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
public static LicenseApi licenseApiFactory ( String pathToLicense ) { ( ( ) false ) return new LicenseApi ( ) Override public boolean initializeFromFile ( File license ) { return true ; } Override public boolean isAnyKindOfTrial ( ) { return false ; } Override public boolean isProTrial ( ) { return false ; } Override public boolean isEnterpriseTrial ( ) { return false ; } @ Override public int maxHostcount ( ) { return Integer MAX_ ; } @ Override public Calendar expires ( ) { ( ) ; add ( YEAR 20 ) ; return result ; } @ Override public boolean verify ( ) { return true ; } @ Override public boolean isDrReplicationAllowed ( ) { return false ; } @ Override public boolean isDrActiveActiveAllowed ( ) { return false ; } @ Override public boolean isCommandLoggingAllowed ( ) { return false ; } @ Override public boolean isAWSMarketplace ( ) { return false ; } @ Override public boolean isEnterprise ( ) { return false ; } @ Override public boolean isPro ( ) { return false ; } @ Override public String licensee ( ) { returnVoltDB Comm User ; } @ Override public Calendar issued ( ) { ( ) ; return result ; } @ Override public String note ( ) { return "" ; } @ Override public boolean hardExpiration ( ) { return false ; } @ Override public boolean secondaryInitialization ( ) { return true ; } } ; } Pro load (dbsetImpl APILog ) (Log ) newInstance ( ) ( ) return null ; } (License ) ; ( ( ) false ) return null ; }Log ( VoltDB file ) ( initializeFromFile ( ) false )Log ( load file parse ) return null ; } ( verify ( ) false )Log ( load file verify signature ) return null ; } } ( License lex )Log ( ( ) ) return null ; } return licenseApi ; }<CODESPLIT>Simple code to copy a file from one place to another ... Java should have this built in ... stupid java ...<CODESPLIT>0
@ Override public ModifyInstanceEventStartTime modifyInstanceEventStartTime ( ModifyInstanceEventStartTime request ) { request beforeClientExecution request executeStartTime ( request }<CODESPLIT><p > Modifies the placement attributes for a specified instance . You can do the following : < / p > <ul > <li > <p > Modify the affinity between an instance and a <a href = https : // docs . aws . amazon . com / AWSEC2 / latest / UserGuide / dedicated - hosts - overview . html > Dedicated Host< / a > . When affinity is set to <code > host< / code > and the instance is not associated with a specific Dedicated Host the next time the instance is launched it is automatically associated with the host on which it lands . If the instance is restarted or rebooted this relationship persists . < / p > < / li > <li > <p > Change the Dedicated Host with which an instance is associated . < / p > < / li > <li > <p > Change the instance tenancy of an instance from <code > host< / code > to <code > dedicated< / code > or from <code > dedicated< / code > to <code > host< / code > . < / p > < / li > <li > <p > Move an instance to or from a <a href = https : // docs . aws . amazon . com / AWSEC2 / latest / UserGuide / placement - groups . html > placement group< / a > . < / p > < / li > < / ul > <p > At least one attribute for affinity host ID tenancy or placement group name must be specified in the request . Affinity and tenancy can be modified in the same request . < / p > <p > To modify the host ID tenancy placement group or partition for an instance the instance must be in the <code > stopped< / code > state . < / p ><CODESPLIT>0
@ Nonnull public static1,2bjIntObjPredicateBuilder1,2 objIntObjPredicate ( ConsumerbjIntObjPredicate1,2 consumer ) { return LObjIntObjPredicate ( consumer ) ; }<CODESPLIT>One of ways of creating builder . This might be the only way ( considering all _functional_ builders ) that might be utilize to specify generic params only once .<CODESPLIT>1
public InterceptorsType < EjbJarDescriptor > getOrCreateInterceptors ( ) { Node node = model getOrCreate (interceptors ) ; InterorsTypeJar interceptors = new InterorsJar ( thisinterceptors model node ) ; return interceptors ; }<CODESPLIT>If not already created a new <code > interceptors< / code > element with the given value will be created . Otherwise the existing <code > interceptors< / code > element will be returned .<CODESPLIT>1
protected static Action findAction ( EObject grammarComponent, String assignmentName ) { for ( Action action GrammarActions ( grammar ) ) ( GrammarAssigned ( action ) ) ( ( action getFeature ( ) ) ) return action ; } } } return null ; }<CODESPLIT>Replies the assignment component with the given nazme in the given grammar component .<CODESPLIT>1
public int getUnsignedMediumInt ( ) { getUnsigned ( ) ; getUnsigned ( ) ; getUnsigned ( ) ; (is ) return ( b 16 ) ( b2 8 ) | b3 ; } return ( b3 16 ) | ( b2 8 ) | b ; } }<CODESPLIT>Returns an unsigned three - byte medium int from the buffer at the current position<CODESPLIT>1
public void rollback ( ) { log. (Rolling back modifyAttributes operation ) ; ldapOperations. modifyAttributes ( dn, compModifications ) ; } ( ) log. ( rollback ModifyAttributes operation dn dn ) ; } }<CODESPLIT>/ *<CODESPLIT>1
static XMLName formProperty ( String uri, String localName ) { return form ( create ( localName ) }<CODESPLIT>TODO : marked deprecated by original implementor<CODESPLIT>0
@ Override public synchronized void beginTransaction ( ) throws DatabaseEngineRuntimeException { { getConnection ( ) ; ( conn getAutoCommit ( ) ) logger. ('s already one transaction active ) ; return ; } conn setAutoCommit ( false ) ; } ( ) DatabaseEngine ( starting transaction ) ; } }<CODESPLIT>Closes a { @link MappedEntity } logging a warning if an { @link Exception } is thrown . <p > It flushes before closing the { @link MappedEntity } .<CODESPLIT>0
@ SuppressWarnings ( "unchecked" ) public List < io.oo. models. Job > getAllJobs ( ) throws MangooSchedulerException { Objects requireNonNull ( this quScheduler, Required SCHEDUL toString ( ) ) ; List models Job jobs = new ArrayList ( ) ; for ( Job job getAllKeys ( ) ) List Trigger triggers = ( List Trigger ) this quartzSchedulerTriggersJob ( job ) ; Trigger trigger = triggers. ( ) ; TriggerState triggerState = quScheduler.TriggerState ( trigger. ( ) ) ; active = ( TriggerState triggerState ) true false ; jobs add ( new models Job ( active jobKey ( ) trigger getDescription ( ) trigger getNextFireTime ( ) trigger getPreviousFireTime ( ) ) ) ; } } ( )SchedulerException ( ) ; } return jobs ; }<CODESPLIT>Pauses a job by a given name @param name The name of the job to pause<CODESPLIT>0
public void flush ( ) { ArrayList Batch batches = this incomplete. all ( ) ;OutstandingRecords = ; for ( batch batches )OutstandingRecords += batchRecords ( ) size ( ) ; }. (Flush called batches with {} records total, batches. size ( ),OutstandingRecords ) ; for ( batch batches ) batch. await ( ) ; } } ( ). ( flushing batches ) ; } }<CODESPLIT>This will block until all the incomplete batches are acknowledged<CODESPLIT>1
static double computeAngularSimilarity ( DoubleTuple t0, DoubleTuple t1 ) { return - ac ( computeSimilar (, ) ) / ; }<CODESPLIT>Get the keysize . If no key size specified this will return the default key size .<CODESPLIT>0
public static boolean xor ( boolean... array ) { ( ArrayUtil ( array ) ) IllegalArgumentException ( Array ) ; } result = false ; for ( boolean array ) result ^= element ; } return result ; }<CODESPLIT>对Boolean数组取或<CODESPLIT>0
@ (unchecked ) public static ISharedContext IUser getUserContext ( ) { return (SharedUser ) Context getInstance ( ) getSharedContext ( UserContext getName ( ) ) ; }<CODESPLIT>Returns the managed user context .<CODESPLIT>1
public void copySeleniumCookies ( Set Cookie > browserCookies, CookieStore cookieStore ) { ( browser browser ) convert ( browserCookie ) ; addCookie ( ) ; } }<CODESPLIT>Converts Selenium cookie to Apache http client .<CODESPLIT>0
private Block wrapInMacroMarker ( MacroBlock macroBlockToWrap, List Block newBlocks ) { returnMarker (To getId ( ),To getParameters ( ),BlockTo getContent ( ),Blocks,BlockTo isIn ( ) ) ; }<CODESPLIT>TODO : support more than strings<CODESPLIT>0
public void abort ( final Executor exec ) throws SQLException { ( exec ) SQLException ( executor ) ; } ( this closed ) return ; } this closed = ; }<CODESPLIT>アノテーションを元にフォーマッタを作成する。<CODESPLIT>0
public JsonValue generalJsonValueProducer ( InjectionPoint ip ) { name ( ) ; value ( name ) ; wrap ( value ) ; return jsonValue ; }<CODESPLIT>Return the indicated claim value as a JsonValue<CODESPLIT>1
@ Override public int get ( TemporalField field ) { ( field ChronoField ) ( (Field ) field ) { INSECONDS new UnsupportedTemporal ( " fieldSeconds method getLong ) ; OFFSETSECONDS return ( )Seconds ( ) ; } return dateTime. get ( field ) ; } return Temporal. super. get ( field ) ; }<CODESPLIT>Gets the value of the specified field from this date - time as an { @code int } . <p > This queries this date - time for the value of the specified field . The returned value will always be within the valid range of values for the field . If it is not possible to return the value because the field is not supported or for some other reason an exception is thrown . <p > If the field is a { @link ChronoField } then the query is implemented here . The { @link #isSupported ( TemporalField ) supported fields } will return valid values based on this date - time except { @code NANO_OF_DAY } { @code MICRO_OF_DAY } { @code EPOCH_DAY } { @code PROLEPTIC_MONTH } and { @code INSTANT_SECONDS } which are too large to fit in an { @code int } and throw a { @code DateTimeException } . All other { @code ChronoField } instances will throw an { @code UnsupportedTemporalTypeException } . <p > If the field is not a { @code ChronoField } then the result of this method is obtained by invoking { @code TemporalField . getFrom ( TemporalAccessor ) } passing { @code this } as the argument . Whether the value can be obtained and what the value represents is determined by the field .<CODESPLIT>1
@ Override public void relocate ( ) { w = 200, h = ; = ( this ( ) w ) / ; = ( this ( ) h ) / ; enableSQLDatabaseConnection setLocation ( x ) ; sqlHostLabel setLocation ( x ) ; sqlHostField setLocation ( x + + ) ; sqlDatabaseLabel setLocation ( x + ) ; sqlDatabaseField setLocation ( x + + ) ; sqlUserLabel setLocation ( x + 100 ) ; sqlUserField setLocation ( x + + 100 ) ; sqlPasswordLabel setLocation ( x +30 ) ; sqlPasswordField setLocation ( x + +30 ) ; enableZipEncodingCheckBox setLocation ( x + ) ; }<CODESPLIT>A call of this method should validate the positions of the panels components .<CODESPLIT>1
public void fixateDistorted ( ) { for ( grid ) for ( gridCols ) Cache cache = getGrid ( row, col ) ; computeAverageQ ( cache ) ; model. computeDeformed ( cache, col, row ) ; } } }<CODESPLIT>Precompute the portion of the equation which only concerns the undistorted location of each point on the grid even the current undistorted location of each control point .<CODESPLIT>0
publicPatchSchedule get ( String, String name ) { return getWithServiceResponseAsync ( ) toBlocking ( ) ( ) body ( ) }<CODESPLIT>Create or replace the patching schedule for Redis cache ( requires Premium SKU ) .<CODESPLIT>0
@ Override public void eUnset ( int featureID ) { ( featureID ) { AfplibPackageCFRG__CFLID setCFLid (LIDEDEFAULT ) ; return ; AfplibPackageCFRG__SEID setSectid ( SEIDEDEFAULT ) ; return ; AfplibPackageCFRG__CFNAME setCFName (NAMEEDEFAULT ) ; return ; AfplibPackageCFRG__CPNAME setCPName ( CPNAMEEDEFAULT ) ; return ; AfplibPackageCFRG__FCSNAME setFCSName (CSNAMEEDEFAULT ) ; return ; AfplibPackageCFRG__CHARRO setRot ( CHARROEDEFAULT ) ; return ; } super. eUnset ( featureID ) ; }<CODESPLIT><! -- begin - user - doc -- > <! -- end - user - doc -- ><CODESPLIT>0
@ Override public void convertOperationParameter ( PathAddress address, String attributeName, ModelNode attributeValue, ModelNode operation, TransformationContext context ) { }<CODESPLIT>{<CODESPLIT>1
public IfClassAvailable < Exclude < T > > getOrCreateIfClassAvailable ( ) { nodeList childNode (classavailable ) ; ( nodeList nodeList ( ) ) return new IfClassAvailableImpl Exclude ( this, "classavailable", childNode, nodeList. get ( 0 ) ) ; } return createIfClassAvailable ( ) ; }<CODESPLIT>If not already created a new <code > if - class - available< / code > element will be created and returned . Otherwise the first existing <code > if - class - available< / code > element will be returned .<CODESPLIT>1
public static void setThreadPool ( ThreadPoolExecutor pool ) { ( ) shutdown ( ; ConcurrencyTools pool = pool ; } }<CODESPLIT>Sets thread pool to given size .<CODESPLIT>0
public ThymEngineConfigBuilder P setMessageResolver ( final IMessageResolver messageResolver ) {Resolvers ( clear ( messageResolvers ( add ( message return this ; }<CODESPLIT><p > Sets a single message resolver for this template engine . < / p > <p > Calling this method is equivalent to calling { @link #setMessageResolvers ( Set ) } passing a Set with only one message resolver . < / p > <p > This operation can only be executed before processing templates for the first time . Once a template is processed the template engine is considered to be <i > initialized< / i > and from then on any attempt to change its configuration will result in an exception . < / p ><CODESPLIT>1
public static GrayU8 labelToBinary ( GrayS32 labelImage, GrayU8 binaryImage, int numLabels, int... selected ) { selectedBlob = newLabels ; for ( selected. ) selectedBlob selected = ; } return labelToBinary ( labelImage, binaryImage, selectedBlobs ) ; }<CODESPLIT>Scans through the labeled image and adds the coordinate of each pixel that has been labeled to a list specific to its label .<CODESPLIT>0
public EClass getIfcFacetedBrep ( ) { ( ifcFacetBEClass ) ifcrepEClass = ( EClass ) EPackage Registry. ( Ifc. eNS ). getEClassifiers ( ). ( 225 ) ; } return ifcFacetedBrepEClass ; }<CODESPLIT><! -- begin - user - doc -- > <! -- end - user - doc -- ><CODESPLIT>1
public void marshall ( DescribeDominantLanguageDetectionJobRequest describeDominantLanguageDetectionJobRequest, ProtocolMarshaller protocolMarshaller ) { ( describeDominantLanguageDetectionJobRequest null ) SdkClientException ( marshall(...)" ) ; } { protocolMarshaller. marshall ( describeDomLanguageDetectionJobRequest. getJobId ( ), JOBIDBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
public String getFileLink ( ) { (resource ) return ACmsJspValueWrapper substituteLink (cms,cms getSitePath (_resource ) ) ; } return "" ; } }<CODESPLIT>Gets a lazy map which maps locales to attachment beans for that locale . <p ><CODESPLIT>0
private List < Map < StreamStateHandle, OperatorStateHandle > > repartition ( GroupByStateNameResults nameToStateByMode, int newParallelism ) { List Map StreamStateHandleStateHandle mergeMapList = new ArrayList ( newParallelism ) ; for (Parallelism ) mergeMapList add ( new ( ) ) ; } Map List Tuple StreamStateHandleStateHandle StateMetaInfo nameToDistributeState = nameToStateBy getBy (StateHandle SPLDIBUTE ) ; repState ( nameToDistributeState newParallelism mergeMapList ) ; Map List Tuple StreamStateHandleStateHandle StateMetaInfo nameToUnionState = nameToStateBy getBy (StateHandle UNION ) ; repartUnionState ( nameToUnionState, mergeMapList ) ; Map List Tuple StreamStateHandleStateHandle StateMetaInfo nameToBroadcastState = nameToStateBy getBy (StateHandle BROADCAST ) ; repartBroadcastState ( nameToBroadcastState, mergeMapList ) ; return mergeMapList ; }<CODESPLIT>Repartition SPLIT_DISTRIBUTE state .<CODESPLIT>0
private String normalizeParameters ( MultiValueMap < String, String > collectedParameters ) { MultiValueMap, sortedEncodedParameters = new TreeMultiValueMap, ( ) ; for ( collectedParameters. ( ). ( ). ( ) ) String, List String entry = entryIt. next ( ) ; collectedName = entry. ( ) ; List collectedValues = entry. getValue ( ) ; List encodedValues = new ArrayList ( collectedValues. size ( ) ) ; sortedEncodedParameters. put ( oauthEncode ( collectedName ), encodedValues ) ; for ( value collectedValues. ( ) value. ( ) ) { value = valueIt. next ( ) ; encodedValues. add ( value null oauthEncode ( value ) "" ) ; } Collections. sort ( encodedValues ) ; } StringBuilder paramsBuilder = new StringBuilder ( ) ; for ( sortedParameters. ( ). ( ). ( ) ) { String, List String entry = entryIt. next ( ) ; name = entry. ( ) ; List values = entry. getValue ( ) ; for ( value values. ( ) value. ( ) ) { value = valueIt. next ( ) ; paramsBuilder. ( name ). ( ). ( value ) ; ( value hasNext ( ) ) paramsBuilder. ( "&" ) ; } } ( entry hasNext ( ) ) paramsBuilder. ( "&" ) ; } } return paramsBuilder. toString ( ) ; }<CODESPLIT>internal helpers<CODESPLIT>1
public void removePort ( TCPPort endPoint ) { ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr ( tc,removePort endPoint getServerSocket ( ) ) ; } synchronized ( this ) {ChannelSelector accept = endPointTo. ( endPoint ) ; ( accept null ) (100 acceptExceptions ) ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr event ( tc,Ignoring removePort call on fatal selectorsystemexit path ) ; } ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr exit ( tc,removePort ) ; } return ; } EndPointActionInfo work = new EndPointActionInfo ( REMOVEENDPOINT endPoint workSync ) ; synchronized (Sync ) { ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. event ( this tcPassing remove to selector endPoint. getServerSocket ( ) ) ; } accept. addWork ( work ) ; workSync. wait ( ) ; } ( ) } } ( accept sharedAccept acceptUsageCount ( ) ) sharedAccept = null ; } } = new (TCP Port to be removed is not registered." ) ; ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. event ( tc,Throwing ) ; }. (,removePort,, this ) ; ; } } ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. exit ( tc,removePort ) ; } }<CODESPLIT>Removes an end point from the set of end points that we are accepting connections on . This has the effect of removing the server socket from the selector and closing it .<CODESPLIT>1
public Observable ExtendedServerBlobAuditing createOrUpdateAsync ( String, String serverName, ExtendedServerBlobAuditing parameters ) { return createOrUpdateWithServiceResponseAsync (,, parameters ) map ( ServiceResponseServerBlobAudit,ServerBlobAudit ( ) Override public ExtendedServerBlobAuditing ( ServiceResponse ExtendedServerBlobAuditing response ) { return body ( ) ; } } ) ; }<CODESPLIT>Creates or updates an extended server s blob auditing policy .<CODESPLIT>0
public Map < String, String > getHeadersToMap ( Map < String, String > map ) { ( map ) map LinkedHashMap ( ) ; map map ; header forEach ( ( v ) map0 put ( v ) ) ; return map0 ; }<CODESPLIT>获取指定的header值 没有返回默认值<CODESPLIT>0
public Artifact createArtifact ( String groupId, String artifactId ) { return repositorySystem create (,,RELEASE,jar ) }<CODESPLIT>Replies the dependencies for the given artifact .<CODESPLIT>0
@ org eclipse xtext service SingletonBinding ( eager true ) public Class org eclipse xtext generator parser. antlr. debug. validation. SimpleAntlrJavaValidator > bindSimpleAntlrJavaValidator ( ) { return org ectext generator parser an debug validation SimpleAntlrJavaValidator ; }<CODESPLIT>contributed by org . eclipse . xtext . generator . validation . JavaValidatorFragment<CODESPLIT>1
public void marshall ( CreateDeploymentGroupRequest createDeploymentGroupRequest, ProtocolMarshaller protocolMarshaller ) { ( createDeploymentGroupRequest ) SdkClientException ( marshall(...)" ) ; } protocolMarshaller marshall ( createDeploymentGroupRequest getApplicationName ( ), APPLICATIONBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequestDeploymentGroupName ( )GROUPBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest.DeploymentConfigName ( )CONFIGBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getETagFilters ( ), ECFILTERSBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getOnInstanceTagFilters ( ), ONPRESFILTERSBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getAutoScalingGroups ( ), AUTOSCGROUPSBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getServiceRoleArn ( ), SERVLEARNBINDING ) ; protocolMarshaller. marshall ( createDeploymentGroupRequest.TriggerConfigurations ( )BINDING ) ; protocolMarshaller. marshall ( createDeploymentGroupRequest.AlarmConfiguration ( )BINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getAutoRollbackConfiguration ( ), AORBACKCONFIGURATIONBINDING ) ; protocolMarshaller. marshall ( createDeploymentGroupRequest.DeploymentStyle ( )BINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getBlueGreenDeploymentConfiguration ( ), BLUEGREENCONFIGURATIONBINDING ) ; protocolMarshaller. marshall ( createDeploymentGroupRequest.LoadBalancerInfo ( ) LOADINFOBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getETagSet ( ), ECSETBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getEcsServices ( ), ECSSSBINDING ) ; protocolMarshaller marshall ( createDeploymentGroupRequest getOnTagSet ( ), ONPRESTSETBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
public void prependHandler ( @ Nonnull final EJSEvent eJSEvent, @ Nonnull final IHasJSCode aNewHandler ) { ValueEnforcer notNull (J,J ) ; ValueEnforcer notNull ( aNewHandler,NewHandler ) ; CollectCodeProviderCode =Events ( ) ; ( ) aCode = new CollectJSCode ( ) ;Events put (J, aCode ) ; } aCode prepend ( aNewHandler ) ; }<CODESPLIT>Add an additional handler for the given JS event . If an existing handler is present the new handler is appended at front .<CODESPLIT>1
public static @ Nullable Pair < Integer, Integer > decodeDimensions ( InputStream is ) { checkNotNull ( ) ; byteBuffer DE acquire ( ) ; ( byteBuffer ) byteBuffer allocate ( DE ) ; } BitmapFactory Options options new BitmapFactory Options ( ) ; options inDecodeBounds ; options inTempStorage byteBuffer array ( ) ; Bitmap decodeStream ( null options ) ; return ( options. outWidth == - 1 || options. outHeight == - 1 ) null new Pair ( options. outWidth, options. outHeight ) ; } DE release ( byteBuffer ) ; } }<CODESPLIT>Decodes the bounds of an image and returns its width and height or null if the size can t be determined<CODESPLIT>1
public static HttpResponse execute ( HttpRequestBase request ) throws IOException { notNull ( requestMissing request ) ; HttpClient client HttpClient create (Redirect ( DefaultRedirect ( build ( ) ; return client execute ( request ) ; }<CODESPLIT>Execute http response .<CODESPLIT>1
private static void sort ( byte [ ] byteArray, int start, int end, boolean descending ) { ( start ) return ; } ( ) ; Merge sort ( byteArray start descending ) ; Merge sort ( byteArray end, descending ) ; ( ) Merge mergeending ( byteArray, start,, end ) ; } Merge merge ( byteArray, start,, end ) ; } }<CODESPLIT>Merge two sorted arrays into a bigger array in ascending order . This routine runs in O ( n ) time .<CODESPLIT>0
public void writeThrowable ( OutputStream out, Throwable value ) throws IOException { writeStartObject ( out ) ; writeSerialized ( out value ) ; StringWriter StringWriter ( ) ; value printStackTrace ( new ( ) ) ; writeString ( outTRACE ( ) ) ;Object ( out ) ; }<CODESPLIT>Encode a Throwable instance as JSON : { throwable : Base64 stackTrace : String }<CODESPLIT>1
protected String renderRadio ( FacesContext facesContext, UIInput uiComponent, String value, boolean disabled, boolean checked, boolean renderId, Integer itemNum ) throws IOException { clientId =Component getClientId ( facesContext ) ; itemId = ( item null ) null clientId facesContext getNContainerSeparatorChar ( ) item ; ResponseWriter writer facesContext getResponseWriter ( ) ; writer startElement ( HTML INPUTE,Component ) ; ( itemId ) writer writeAttribute ( HTML ID, itemId, null ) ; } ( render ) writer writeAttribute ( HTML ID, clientId, null ) ; } writer writeAttribute ( HTML TYPE, HTML INPUTTYPERADIO, null ) ; writer writeAttribute ( HTML NAME, clientId, null ) ; ( disabled ) writer writeAttribute ( HTML DISABLED, HTML DISABLED, null ) ; } ( checked ) writer writeAttribute ( HTML CHECK, HTML CHECK, null ) ; } ( value ) writer writeAttribute ( HTML VALUE, value, null ) ; } writer writeAttribute ( HTML VALUE, "", null ) ; } Map ClientBehavior behaviors = null ; ( uiComponent ClientBehaviorHolder ) behaviors ( ( ClientBehaviorHolder )Component ) getClientBehaviors ( ) ; commonPropertiesMarked = ; (CommonPropertiesOptim ( facesContext ) ) commonPropertiesProperty getCommonProperties (Component ) ; } ( behaviors isEmpty ( )CommonPropertiesOptim ( facesContext ) )Property renderChangeEventProperty ( writer, commonProperties,Component ) ;Property renderEventProperties ( writer, commonProperties,Component ) ;Property renderFieldEventPropertiesWithoutOnchange ( writer, commonProperties,Component ) ; } HtmlRenderer renderBehaviorOnchangeEventHandler ( facesContext, writer,Component, behaviors ) ; (CommonEventsOptim ( facesContext ) ) Long commonEventsEvent getCommonEvents (Component ) ;Event renderBehaviorEventHandlers ( facesContext, writer, commonProperties, commonEvents,Component, behaviors ) ;Event renderBehaviorFieldEventHandlersWithoutOnchange ( facesContext, writer, commonProperties, commonEvents,Component, behaviors ) ; } HtmlRenderer renderBehaviorEventHandlers ( facesContext, writer,Component, behaviors ) ; HtmlRenderer renderBehaviorFieldEventHandlersWithoutOnchange ( facesContext, writer,Component, behaviors ) ; } } HtmlRenderer renderHTMLAttributes ( writer,Component, HTML INPUTPSTHUGHATTRIBUTESWITHOUTDISABLEDANDSTYLEANDEVENTS ) ; } HtmlRenderer renderHTMLAttributes ( writer, uiComponent, HTML INPUTPSTHUGHATTRIBUTESWITHOUTDISABLEDANDSTYLE ) ; } ( isDisabled ( facesContext uiComponent ) ) writer writeAttribute ( myfaces shared render html HTML DISABLED, Boolean TRUE, null ) ; } writer endElement ( HTML INPUTE ) ; return itemId ; }<CODESPLIT>Renders the given SelectItem ( Group )<CODESPLIT>0
public DataSource getDataSource ( String dataSourceName ) throws ServiceLocatorException { DataSource dataSource null ; dataSource ( DataSource ) ic lookup ( dataSource ) ; } ( NamingException ) ServiceLocator ( ) ; } ( ) ServiceLocator ( ) ; } return dataSource ; }<CODESPLIT>This method obtains the topc itself for a caller<CODESPLIT>0
private void buildHosts ( Map externalProperties, List < Server > servers, String persistenceUnit, final KunderaMetadata kunderaMetadata ) { persistenceMetadata = kunderaMetadata getApplicationMetadata ( ) getPersistenceMetadata ( persistence ) ; Properties props = persistenceMetadata getProperties ( ) ; this. externalProperties = externalProperties ; hosts = null ; portAsString = null ; ( externalProperties ) hosts = ( ) externalProperties. (Properties.NODE ) ; portAsString = ( ) externalProperties. (Properties. ) ; } ( hosts ) hosts = ( ) props. (Properties.NODE ) ; } ( portAsString ) portAsString = ( ) props. (Properties. ) ; } ( hosts portAsString ) buildHosts ( hosts, portAsString, this hostsList ) ; } ( servers servers ( ) ) buildHosts ( servers, this hostsList ) ; } }<CODESPLIT>Build host array .<CODESPLIT>1
public String getPresentationML ( ) throws IllegalStateException { ( message ) IllegalStateException ( messageMLContextparse first ) ; } ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; XmlPrintStream out = new XmlPrintStream ( bout ) ; outNoIndent ( ) ; outNoN ( ) ; messageML asPresentML ( out ) ; out close ( ) ; return bout. toString ( ) ; }<CODESPLIT>Parse a Markdown message into its MessageMLV2 representation . Generates document tree structures for serialization into output formats with the respective get () methods .<CODESPLIT>0
private void showFacebookAppError ( ) { Toast makeText (, getString ( string wingsfacebook__errorfacebookapp ), ToastSHORT ) show ( ) ; }<CODESPLIT>Links an account .<CODESPLIT>0
public static GPX read ( InputStream input ) IOException { return reader (, ST ) read ( input ) ; }<CODESPLIT>Read an GPX object from the given { @code input } stream .<CODESPLIT>0
@ Override protected void i_addRow ( Connection conn, String table, String [ ] columns, String [ ] values, boolean [ ] numeric ) throws SQLException { StringBuilder sql = new StringBuilder ( 128 ) ; sql. (INSERT INTO ). ( table ). ( ) ; for ( columns. ) { if ( ) sql. ( ", ) ; } sql. ( columns ) ; } sql. ( VALUES ) ; for ( columns. ) { if ( ) sql. ( ", ) ; } if ( values == null ) sql. (NULL ) ; } sql. ( ) ; } } sql. ( ) ; if ( logger ( ) ) { logger. (About to execute {}", sql. toString ( ) ) ; } PreparedStatement stmt = conn. prepareStatement ( sql. toString ( ) ) ; { varIndex = ; for ( values. ) { if ( values null ) { varIndex ++ ; if ( numeric null numeric ) { setNumeric ( stmt, varIndex, columns, values ) ; } { stmt. setString ( varIndex, values ) ; } } } stmt. executeUpdate ( ) ; } { closeStatement ( stmt ) ; } }<CODESPLIT>Get a long string which could be a TEXT or CLOB type . ( CLOBs require special handling -- this method normalizes the reading of them )<CODESPLIT>0
int getNextSentencePosition ( int numberOfParagraph, int startOfSentencePosition ) { for ( CacheEntry entries ) (ParagraphParagraph startPosition startSentencePosition ) return anEntry. nextSentencePosition ; } } return - 1 ; }<CODESPLIT>get Proofreading errors of sentence out of paragraph matches from cache<CODESPLIT>0
private void asyncRefresh ( ) { ( asyncRefresh ( false true ) ) executor. submit ( new Runnable ( ) { @ Override public void run ( ) { refresh ( ) ; } asyncRefresh ( ) ; } } } ) ; } ( ) asyncRefresh ( false ) ; ; } } }<CODESPLIT>Invokes the callback to get a new value .<CODESPLIT>0
@ Override public ScheduleExpression getSchedule ( ) { = TraceComponent isAnyTracingEnabled ( ) ; ( tc ( ) ) Tr ( tcgetSchedule this ) ; checkTimerAccess ( ) ; PersistentTimerTaskHandler taskHandler = getTTaskHandler ( ALLOWCACHEDTIMERGETSCHEDULE ) ; ParsedScheduleExpression parsedSchedule = taskHandler getParsedSchedule ( ) ; ( parsedSchedule null ) = new (Timer is not a calendarbased timer toString ( ) ) ; ( tc ( ) ) Tr ( tcgetSchedule ) ; ; } ScheduleExpression schedule = EJSContainer getDefaultContainer ( ) ivObjectCop. copy ( parsedSchedule. getSchedule ( ) ) ; ( tc ( ) ) Tr ( tcgetSchedule schedule ) ; return schedule ; }<CODESPLIT>Query whether this timer has persistent semantics .<CODESPLIT>0
public void marshall ( OperatingSystem operatingSystem, ProtocolMarshaller protocolMarshaller ) { ( operatingSystem null ) SdkClientException ( marshall(...)" ) ; } protocolMarshaller marshall ( operatingSystem getName ( ), NAMEBINDING ) ; protocolMarshaller marshall ( operatingSystem getId ( ), IDBINDING ) ; protocolMarshaller marshall ( operatingSystem getType ( ), TYPEBINDING ) ; protocolMarshaller marshall ( operatingSystem getConfigurationManagers ( ), CONFIGURATIONMANBINDING ) ; protocolMarshaller marshall ( operatingSystem getReportedName ( ),BINDING ) ; protocolMarshaller marshall ( operatingSystem getReportedVersion ( ),VERSIONBINDING ) ; protocolMarshaller marshall ( operatingSystem getSupported ( ), SUPPORTEDBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
private static void resolveServerConfig ( ServerConfig serverConfig ) { bound = serverConfig getBound ( ) ; ( bound ) host = serverConfig getHost ( ) ; ( isBlank ( host ) ) hostInfo getLocalHost ( ) ; serverConfig ( host ) ; boundHost = SystemInfo. isWindows ( )? host : NetUtils. ANYHOST ; } boundHost = host ; } serverConfigBound ( bound ) ; } ( serverConfigAdaptPort ( ) )Port = serverConfig ( ) ; port = Net getAvailablePort ( boundPort RpcConfigs getInt ( RpcOptions SERVEREND ) ) ; ( portPort ) ( isInfoEnabled ( ) ). info (Changed port from {} to {} because the config port is disabledPort port ) ; } serverConfigPort ( port ) ; } } }<CODESPLIT>初始化Server实例<CODESPLIT>0
public static String blur ( int radius, int sigma ) { if ( radius < ) IllegalArgumentException (Radius ) ; } if ( radius 150 ) { IllegalArgumentException (Radius lower or equal ) ; } if ( sigma < ) { IllegalArgumentException (Sigma ) ; } return FILTER_BLUR + "(" + radius + "," + sigma + ")" ; }<CODESPLIT>This filter uses a 9 - patch to overlay the image .<CODESPLIT>0
@ Override public final void send ( Nonnull String data ) throws IllegalStateException { checkConnected ( send ( ; }<CODESPLIT>{<CODESPLIT>0
public void throttle ( boolean verbose ) { if ( System ( ) this LastCheck 5000l ) { if ( this End getExecutionCount ( ) this Start getExecutionCount ( ) ) { observedLatency = ( ) ( this. End. getTotalExecutionDuration ( ) - this. Start. getTotalExecutionDuration ( ) ) / ( ) ( this. End. getExecutionCount ( ) - this. Start. getExecutionCount ( ) ) ; double tuningLatency = observedLatency ; el = this. End.LatencyBuckets ( ) ; sl = this. Start.LatencyBuckets ( ) ; ec = this. End. getExecutionCount ( ) - this. Start. getExecutionCount ( ) ; elsum = ; for ( ) {sum += ; } slsum = ; for ( ) {sum += ; } if ( ( ( double ) ( elsum slsum ) / ( double ) ec ) ) { outExecutionDuration = ; outExecutionCount = ; for ( ) { outCount += ( ) ; if ( 100 ) outlierExecutionDuration += ( el sl ) 50l ; outlierExecutionDuration += ( el sl ) ; } tuningLatency = ( ) ( this. End. getTotalExecutionDuration ( ) - this. Start. getTotalExecutionDuration ( ) - outlierExecutionDuration ) / ( ) ( this. End. getExecutionCount ( ) - this. Start. getExecutionCount ( ) - outlierExecutionCount ) ; } oldRate = this. Rate ; if ( tuningLatency this TargetLatency 2 ) this Rate = ( long ) ( this Rate8 ) ; if ( tuningLatency this TargetLatency ) this Rate = ( long ) ( this Rate ) ; if ( tuningLatency this TargetLatency ) this Rate = ( long ) ( this Rate ) ; if ( tuningLatency < this TargetLatency5 ) this Rate = ( long ) ( this Rate ) ; if ( tuningLatency < this TargetLatency ) this Rate = ( long ) ( this Rate01 ) ; if ( tuningLatency < this TargetLatency ) this Rate = ( long ) ( this Rate ) ; if ( verbose oldRate this Rate ) System out printf ( "%8s Adjusts to11 TPS Recent Latency2 this DateFormat format ( Date ( round ( ( System ( ) this StartTime ) / 1000 ) 1000l ) ) ( oldRate < this Rate UPDOWN ) ( double ) this. Rate tuningLatency ) ; } this. Start = ( PerCounter ) this. End. clone ( ) ; this. End = ClientConnectionPool.Statistics ( this. Connection ). ( this. Procedure ) ; this. LastCheck = System. ( ) ; } this. L. throttle ( this. Rate ) ; }<CODESPLIT>Throttle the execution process and re - adjust the rate requirement on the fly . The limiter will automatically re - adjust the rate internally by using a basic { @link RateLimiter } after analysis of the latency data gathered from the performance tracking .<CODESPLIT>1
private PrintStream createOutputStream ( ) { ( outputLog ) FileOutputStream fout = new FileOutputStream ( outputLogFilename false ) ; bos = new ( fout 4096 ) ; ( encoding ) return new PrintStream ( bos, false, encoding ) ; } return new PrintStream ( bos, false ) ; } } ( ) IllegalArgumentException (String ( ) ) ; } }SystemOut = ; ( encoding ) return new PrintStream ( System. out, false, encoding ) ; } ( UnsupportedEncodingException ) } } return System. out ; }<CODESPLIT>Utility method to skip a given amount of bytes from the input stream . This will return the index after the skip ( which may or may not be able to skip the entire requested amount ) .<CODESPLIT>0
public static boolean areNotEmpty ( String... values ) { result = ; ( values values ) result = false ; } for ( value values ) result &= ( value ) ; } } return result ; }<CODESPLIT>检查指定的字符串列表是否不为空。<CODESPLIT>1
public static String getEncodedServletURI ( HttpServletRequest request ) { servlet = request getServlet ( ) ; contextPath = request getContextPath ( ) ; ( servlet ( ) ) return contextPath + servletPath ; } contextPath = contextPath length ( ) ; request = request getRequest ( ) ; char requestUriChars = requestURI toCharArray ( ) ; servletURI = new ( contextPath ) ; requestUriChar = contextPath ; for ( toCharArray ( ) ) ( ) requestUriCharIndex copyPathFragment ( requestUriChars, requestUriCharIndex, servletURI ) ; servletURI ( ) ; ; } } requestUriCharIndex copyPathFragment ( requestUriChars, requestUriCharIndex, servletURI ) ; return servletURI. toString ( ) ; }<CODESPLIT>Get request s servlet URI encoded based on results from { @link HttpServletRequest#getContextPath () } and { @link HttpServletRequest#getRequestURI () } which are both encoded URI / path and { @link HttpServletRequest#getServletPath () } which is DECODED path . We cannot just concatenate context path and servlet path to get the proper result because of these encoding / decoding differences especially if the Servlet path contains encoded characters . @param request @return servlet URI ( meant to be equivalent to contextPath + URLEncoded ( servletPath ))<CODESPLIT>1
public void setMode ( final ParsingMode mode ) { this mode = mode ; ( HTML ( ) ) this caseSensitive = false ; } }<CODESPLIT>This method will try to avoid creating new strings for each structure name ( element / attribute )<CODESPLIT>0
private void createReportMap ( ) { logger. entering ( ) ; Map List SumizedData subReportMap = new LinkedHashMap List SumizedData ( ) ; subReportMap. put (Full Suite Summary, lSuites ) ; subReportMap. put (Test Summary, lTests ) ; subReportMap. put (Class Summary, lClasses ) ; subReportMap. put (Group Summary, lGroups ) ; ReportMap SumizedData testSummaryReport = new ReportMap SumizedData ( ReportSheetNames TESTSUMMARYREPORT ( ) subReportMap ) ; fullReportMap. add ( testSummaryReport ) ; List SumizedData groupsClone = new ArrayList SumizedData (Groups ) ; List SumizedData classData ; SumizedDataGroupData = new SumizedData ( ) ;GroupData ( TestCaseResult ) ; groupsClone. add ( naGroupData ) ; subReportMap = new LinkedHashMap List SumizedData ( ) ; for ( SumData group groups ) sGroupName = group getsName ( ) ; classData = new ArrayList SumizedData ( ) ; for (GroupGroupClassData. ( ) ) ( sGroupClassName ( sGroupName ( ) ) ( sGroupName ) )Data. add ( mpGroupClassData. ( sGroupClassName ) ) ; } } subReportMap. put ( sGroupName,Data ) ; } ReportMap SumizedData secondReport = new ReportMap SumizedData ( ReportSheetNames GROUPSUMMARYREPORT ( ) subReportMap ) ; fullReportMap. add ( secondReport ) ; Map List List subDetailReportMap = new LinkedHashMap List List ( ) ; subDetailReportMap. put (Passed List, tcPassedData ) ; subDetailReportMap. put (Failed List, tcFailedData ) ; subDetailReportMap. put (Skipped List, tcSkippedData ) ; ReportMap List thirdReport = new ReportMap List ( ReportSheetNames TESTCASEREPORT ( ) subDetailReportMap ) ; fullReportMap. add ( thirdReport ) ; Map, List List lstDefReports = new LinkedHashMap, List List ( ) ; lstDefReports. put (Def Summary, tcDefData ) ; ReportMap ListReport = new ReportMap List ( ReportSheetNames DEFREPORT ( ), lstDefReports, ) ; fullReportMap. add (Report ) ; BaseReport b = ( BaseReport ) fullReportMap. ( fullReportMap. ( ) ).GeneratedReport ( ). ( ). next ( ) ; List lsTitles = Arrays (Class Name,MethodTestcase id,Test Description,Groups]",Time taken,Output,Error Message,Error Details ) ; bR setTitles (Titles ) ; Map, List List fifTestOutputSubReportMap = new LinkedHashMap, List List ( ) ; fTestOutputSubReportMap. put (Test Output, tcOutputData ) ; ReportMap List fifReportSheet = new ReportMap List ( ReportSheetNames TESTOUTPUTETAILSREPORT ( ), fifTestOutputSubReportMap, ) ; fullReportMap. add ( fReportSheet ) ; logger. exiting ( ) ; }<CODESPLIT>Generates all summarized counts for various reports<CODESPLIT>0
@ Override public ExtensionProcessor createExtensionProcessor ( IServletContext servletContext ) throws Exception { WebModuleMetaData moduleMetaData ( ( WebAppConfigExtended ) ( servletContext getWebAppConfig ( ) ) ) getMetaData ( ) ; JaxRsModuleMetaData jaxRsModuleMetaData JaxRsMetaData getJRsModuleMetaData ( moduleMetaData ) ; (MetaData ) return null ; }PersistentCache overlayCache servletContext getModuleContainer ( ) adapt (PersistentCache ) ; JaxRsModuleInfo jaxRsModuleInfo ( JaxRsModuleInfo ) overlayCache getFromCache ( JaxRsModuleInfo ) ; ( endpointInfoSize ( ) ) ( tc ( ) ) Tr ( tc,No JAXRS service is in the web module will create web service processor ) ; } return null ; } Container publisherModuleContainer servletContext getModuleContainer ( ) ; JaxRsPublisher publisher = new JaxRsPublisher ( jaxRsModuleMetaData publisherModuleContainer JaxRs getWebModule ( publisherModuleContainer ) ) ; publisherContext setAttribute ( JaxServer SERCONTEXT servletContext ) ; publisher setAttribute ( JaxRsINFOBUCONTEXT newBuilder ( servletContext getModuleContainer ( ) adapt (Annotations class ) getInfoStore ( ) servletContext getModuleContainer ( ) ) ) ; WebApp webApp = ( WebApp ) servletContext ; publisherContext setAttribute ( Jax COL webAppCollaborator ( ) getWebCollaborator ( ) ) ;Publisher endpointPublisher endpointPublisherSR getServiceWithException ( ) ; for ( jaxInfos ( ) ) endpointPublisher publish ( endpointInfo, publisherContext ) ; } for ( jax jaxAppConfigators ) jaxRsWebAppConfigurator configure ( jaxRsModuleInfo, servletContext getWebAppConfig ( ) ) ; } return new JaxRsExtensionProcessor ( servletContext ) ; }<CODESPLIT>{<CODESPLIT>1
private void forEveryEdge ( EdgeVisitor visitor ) {Node = getFromNode ( ) ; = edgeIds. size ( ) ; prevEdgeId = EdgeIterator. NO ; for ( )IteratorState edgeBase = graph.EdgeIteratorState ( edgeIds. ( ), ) ; ( edgeBase null ) IllegalStateException (Edge edgeIds ( ) empty when requested node array index edges edgeIds ( ) ) ;Node = edgeBase. getBaseNode ( ) ; edgeBase = graph.EdgeIteratorState ( edgeBase.Edge ( ), ) ; visitor. next ( edgeBase,, prevEdgeId ) ; prevEdgeId = edgeBase.Edge ( ) ; } visitor. finish ( ) ; }<CODESPLIT>Returns the list of all edges .<CODESPLIT>0
public static ParseSetup guessSetup ( Key [ ] fkeys, boolean singleQuote, int checkHeader ) { return guessSetup (keys,Setup (UEINFO,UE, singleQuote, checkHeader, GUE, null,WriterErr ) ) ; }<CODESPLIT>Discover the parse setup needed to correctly parse all files . This takes a ParseSetup as guidance . Each file is examined individually and then results merged . If a conflict exists between any results all files are re - examined using the best guess from the first examination .<CODESPLIT>0
public static boolean isEnabled ( State state ) { return Boolean valueOf ( state getProp ( METCSKEY, DEFAULTMETRICSENABLED ) ) ; }<CODESPLIT>Check whether metrics collection and reporting are enabled or not .<CODESPLIT>1
static T, IDao T, ID createDao ( ConnectionSource connectionSource, Class T clazz ) SQLException { returnDaoImpl, ID ( connection, clazz ) } ; }<CODESPLIT>Helper method to create a Dao object without having to define a class . Dao classes are supposed to be convenient but if you have a lot of classes they can seem to be a pain .<CODESPLIT>0
public void setCode ( String timecode ) throws Timecode TimecodeException { clear ( ) ; setHours ( getToken ( ) ) ; setMinutes ( getToken ( ) ) ; setSeconds ( getToken ( ) ) ; setFrames ( getToken (code ) ) ; ( ( ) ) setSamples ( getToken (code ) ) ; setFramesSecond ( ) ; } ( ) } } normalize ( ) ; }<CODESPLIT>Sets the object based on a string in the form HH : MM : SS : FF<CODESPLIT>1
private void extractMessage ( JsonObject object ) { JsonObject meta object getAsJsonObject (meta ) ; ( meta ) JsonPrimitive msg meta getAsJsonPrimitive ( ) ; ( msg ) this message msg getAsString ( ) ; return ; } } JsonPrimitive error object getAsJsonPrimitive (error ) ; ( error ) this message error getAsString ( ) ; return ; } this. message =Unknown Error ; }<CODESPLIT>Performs an XAuth authentication .<CODESPLIT>0
public static base_response update ( nitro_service client, gslbparameter resource ) throws Exception { updateresource ( ) ; lentrytimeout = resource lentrytimeout ; rtttolerance = resource. rtttolerance ;. l = resource. l ;. v6ns = resource. v6ns ;. lprobeorder = resource. lprobeorder ;. dropl = resource. dropl ; return updateresource updateresource ( client ) ; }<CODESPLIT>Use this API to fetch lbvserver_tmtrafficpolicy_binding resources of given name .<CODESPLIT>0
protected synchronized void activate ( BundleContext context, Map < String, Object > props ) { jndiName = ( ) props ( ) ; originalValue = ( ) props (value ) ; decode = ( Boolean ) props (decode ) ; ( jndiName null jndiName isEmpty ( ) originalValue null originalValue isEmpty ( ) ) ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr ( tc, to register JNDIEntry with jndiName jndiName and value originalValue both set ) ; } return ; } value = originalValue ; ( decode ) value = PasswordUtil. decode ( originalValue ) ; } ( ) Tr. error ( tc,ndidecodefailed, originalValue, ) ; } } parsedValue = LiteralParser parse ( value ) ; valueClassName = parsedValue getClass ( ) ( ) ; serviceObject = decode new Decode ( originalValue ) parsedValue ; Dictionary propertiesForJndiService = new Hashtable ( ) ; propertiesForJndiService. put (osgindiservicename, jndiName ) ; ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. ( tc,Registering JNDIEntry valueClassName with value parsedValue and JNDI name jndiName ) ; } this. serviceRegistration = context. registerService ( valueClassName, serviceObject, propertiesForJndiService ) ; }<CODESPLIT>Registers the JNDI service for the supplied properties as long as the jndiName and value are set<CODESPLIT>1
public List Map String, String getWMIObjectList (MIClass wClass ) { return getWMIObjectList (Class ( ) }<CODESPLIT>Query a list of object data for an specific class <br ><CODESPLIT>1
public static void closeEL ( Transport t ) { ( t isConnected ( ) ) t close ( ) ; } ( ) ExceptionUtil rethrowIfNecessary ( ) ; } }<CODESPLIT>close Writer without a Exception<CODESPLIT>1
public static T ClassLoader > ElementMatcher Junction T > isParentOf ( ClassLoader classLoader ) { return classLoader BOSTRCLASSLOADERMatchers isBootstrapClassLoader ( ) new ClassLoaderParentMatcher ( classLoader ) ; }<CODESPLIT>Matches all class loaders in the hierarchy of the matched class loader against a given matcher .<CODESPLIT>0
public void marshall ( BatchGetObjectAttributesResponse batchGetObjectAttributesResponse, ProtocolMarshaller protocolMarshaller ) { ( batchGetObjectAttributesResponse == null ) SdkClientException ( marshall(...)" ) ; } { protocolMarshaller. marshall ( batchGetObjectAttributesResponse. getAttributes ( ), ATTRIBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>0
public void handleInputStream ( final InputStream is ) throws IOException {. trace (Handling input stream." ) ; OutputStream os = new FileOutputStream ( this mfile ) ; { bytesWritten = lithoot util Io copy ( is os this mwriteListener ) ;. trace (Wrote bytesWritten file this.file ) ; } IOUtils. closeQuietly ( is ) ; IOUtils. closeQuietly ( os ) ; } }<CODESPLIT>{<CODESPLIT>0
public ValidationData ruleSync ( List < ValidationRule > rules ) { Validation ruleList new ( ) ; rules. forEach ( rule { this ( ) ; ruleList add ( rule ) ; } ) ; this validationRules removeAll ( ruleList ) ; thisRules addAll ( this validationRules ) ; this. validationRules = ruleList ; this validationRules sort ( newSorter ( ) ) ; return this ; }<CODESPLIT>Find list parent validation data .<CODESPLIT>0
protected List < String > getDataTypeStartWords ( ) { ( allStartWords ) allStartWords new ( ) ; allStartWords addAll (TypesSTARTWORDS ) ; allStartWords addAll ( getCustomStartWords ( ) ) ; } return allDataTypeStartWords ; }<CODESPLIT>Returns a list of data type start words which can be used to help identify a column definition sub - statement .<CODESPLIT>1
protected void setupToolbarElements ( JToolBar toolbar ) { = ; = new ( ) ; x = this. addToolBarElements ( toolbar, TOBARLOCATIONSTART, x ) ; toolbar add ( new ( Constant messages getString ( panelPrefixtoolbarcontextlabel ) ) LayoutHelperGBC ( ++,,,, ) ) ;. add ( getContextSelectComboBox ( ),Helper. (,,,, ) ) ; x = this. addToolBarElements ( toolbar, TOBARLOCATIONAFTERCONTEXTSSELECT, x ) ; toolbar add ( new ( ), LayoutHelperGBC ( ++,,,0 ) ) ; ( hasOptions ( ) ). add ( getOptionsButton ( ),Helper. (,,,, ) ) ; } this. addToolBarElements ( toolbar, TOBARLOCATIONEND, x ) ; }<CODESPLIT>Gets the Context select combo box .<CODESPLIT>0
private int parseTrailer ( byte [ ] input, int inOffset, List < WsByteBuffer > list ) throws DataFormatException { if ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. debug ( tc,Parsing trailer offset this. parseOffset val this. parseInt ) ; } offset = inOffset ; val =L ; while ( 8 this. parse input. ) { ( thisOffset ) { this parseFirst input ; ; this parseInt ( ( input ) ) this parseFirst ; ; val ( ( input ) ) this parseFirst ; val = ( val << 16 ) | this. parseInt ; if ( this checksum getValue ( ) val ) String msg =Checksum does not match; crc + this. checksum. getValue ( ) + trailer + val ; if ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) Tr. debug ( tc, msg ) ; } release ( list ) ; DataFormatException ( ) ; } ; val ( ( input ) ) this parseFirst ; val = ( val << 16 ) | this. parseInt ; if ( this inflater getBytesWritten ( ) val ) { String msg =BytesWritten does not match; inflater + this. inflater. getBytesWritten ( ) + trailer + val ; if ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) { Tr. debug ( tc, msg ) ; } release ( list ) ; DataFormatException ( ) ; } this. resetNeededToProceed = true ; ; default : break ; } offset ++ ; this parseOffset ++ ; } return offset ; }<CODESPLIT>Parse past the GZIP trailer information . This is the two ints for the CRC32 checksum validation .<CODESPLIT>1
public ObservableSecretBundle getDeletedSecretAsync ( String vaultBaseUrl, String secretName ) { return getDeletedWithServiceResponseAsync ( vaultBaseUrl, secret ) map ( ServiceResponseBundle,SecretBundle ( ) Override publicSecretBundle ( ServiceResponseSecretBundle response ) { return body ( ) ; } } ) ; }<CODESPLIT>Permanently deletes the specified secret . The purge deleted secret operation removes the secret permanently without the possibility of recovery . This operation can only be enabled on a soft - delete enabled vault . This operation requires the secrets / purge permission .<CODESPLIT>0
public void addClassToId ( final Class <? > clazz, final String id ) { Assert. notNull ( clazz,Class null ) ; Assert. hasText ( id,Alias (id null or contain only ) ; if (ToId ( clazz ) ) IllegalArgumentException (Class clazz already defined alias (id classToId. get ( clazz ) set another alias id ) ; } if ( idToClass ( id ) ) IllegalArgumentException (Alias (id id another class idToClass. get ( id ) clazz ) ; } classToId. put ( clazz, id ) ; idToClass. put ( id, clazz ) ; }<CODESPLIT>Adds single mapping : class < - > alias ( id ) .<CODESPLIT>1
void submit ( ) { action = ; (All ( ) ) action = CmsFlexCache. CLEAR_ONLINE_ALL ; } action = CmsFlexCache. CLEAR_ONLINE_ENTRIES ; } OpenCms fireEvent ( newEvent (EventListener EVENTLEXCACHECLEAR singletonMap (FlexCache CACHEACTION new ( action ) ) ) ) ; }<CODESPLIT>Set defautl values to vaadin components . <p ><CODESPLIT>0
@ Override public ShutdownResult shutdown ( ShutdownRequest request ) { request beforeClientExecution request return executeShutdown ( request }<CODESPLIT><p > Shuts down a gateway . To specify which gateway to shut down use the Amazon Resource Name ( ARN ) of the gateway in the body of your request . < / p > <p > The operation shuts down the gateway service component running in the gateway s virtual machine ( VM ) and not the host VM . < / p > <note > <p > If you want to shut down the VM it is recommended that you first shut down the gateway component in the VM to avoid unpredictable conditions . < / p > < / note > <p > After the gateway is shutdown you cannot call any other API except <a > StartGateway< / a > <a > DescribeGatewayInformation< / a > and <a > ListGateways< / a > . For more information see <a > ActivateGateway< / a > . Your applications cannot read from or write to the gateway s storage volumes and there are no snapshots taken . < / p > <note > <p > When you make a shutdown request you will get a <code > 200 OK< / code > success response immediately . However it might take some time for the gateway to shut down . You can call the <a > DescribeGatewayInformation< / a > API to check the status . For more information see <a > ActivateGateway< / a > . < / p > < / note > <p > If do not intend to use the gateway again you must delete the gateway ( using <a > DeleteGateway< / a > ) to no longer pay software charges associated with the gateway . < / p ><CODESPLIT>1
@ GuardedBy (monitor" ) @ VisibleForTesting static MetricServiceClient createMetricServiceClient ( @ Nullable Credentials credentials ) throws IOException {Service settings =Service newBuilder ( )ChannelProvider (rpcChannelProvider newBuilder ( ) setHeaderProvider ( ) build ( ) ) ; ( credentials ) settingsCredentialsProvider ( FixedCredentialsProvider create ( credentials ) ) ; } return MetricServiceClient. create ( settingsBuilder. build ( ) ) ; }<CODESPLIT>Resets exporter to null . Used only for unit tests .<CODESPLIT>0
public final List < Connection > getConnections ( final ConnectionMode connectionMode, final String dataSourceName, final int connectionSize ) throws SQLException { DataSource dataSource = getDataSourceMap ( ) ( dataSource ) ; checkState ( null dataSource,Missing the data source name, dataSource ) ; Collection Connection connections ; synchronized ( ) { connections = cachedConnections ( dataSource ) ; } Connection result ; ( connections ( ) connection ) result = new ( connections ) ( connection ) ; } ( connections ( ) ) result = new ( connection ) ; result addAll ( connections ) ; Connection newConnections = createConnections ( dataSource connection dataSource connection connections ( ) ) ; result addAll ( newConnections ) ; synchronized ( ) { cachedConnections putAll ( dataSource newConnections ) ; } } result = new ( createConnections ( dataSource connection dataSource connection ) ) ; synchronized ( ) { cachedConnections putAll ( dataSource, result ) ; } } return result ; }<CODESPLIT>Get database connections .<CODESPLIT>1
public void copyFrom ( TextImage source, int startRowIndex, int rows, int startColumnIndex, int columns, int destinationRowOffset, int destinationColumnOffset ) { copyTo ( start startColumnIndex columns ; }<CODESPLIT>Copies the content from a TextImage into this buffer .<CODESPLIT>1
public LocalDateTime minusWeeks ( long weeks ) { return ( weeks Long MIN plusWeek ( Long ) plusWeek ( ) plusWeek ( - weeks ) ) ; }<CODESPLIT>Returns a copy of this { @code LocalDateTime } with the specified number of months subtracted . <p > This method subtracts the specified amount from the months field in three steps : <ol > <li > Subtract the input months from the month - of - year field< / li > <li > Check if the resulting date would be invalid< / li > <li > Adjust the day - of - month to the last valid day if necessary< / li > < / ol > <p > For example 2007 - 03 - 31 minus one month would result in the invalid date 2007 - 04 - 31 . Instead of returning an invalid result the last valid day of the month 2007 - 04 - 30 is selected instead . <p > This instance is immutable and unaffected by this method call .<CODESPLIT>0
public static String concat ( String... strs ) { new ( ) ; ( str strs ) ( str ) ; } return sb toString ( ) ; }<CODESPLIT>快速连接参数中的字符串 .<CODESPLIT>1
@ ( ) public static buildApplicationObject ( Class interfaceClass, Class T extendedInterfaceClass, Class T extendedInterfaceWrapperClass, Collection String classNamesIterator, T defaultObject ) { returnApplicationObject (Class,InterfaceClass,InterfaceClass, classNamesIterator, defaultObject, null ) ; }<CODESPLIT>Creates ApplicationObjects like NavigationHandler or StateManager and creates the right wrapping chain of the ApplicationObjects known as the decorator pattern .<CODESPLIT>0
@ Override public synchronized RecordStructure read ( long sessionId, long urlId ) throws DatabaseException { psReadLong ( sessionId ) ; psReadLong ( url ) ; ( ResultSet psRead executeQuery ( RecordStructure build ( rs ) ; return result ; } } ( SQLException ) DatabaseException ( ) ; } }<CODESPLIT>This method initializes this<CODESPLIT>0
@ Override public final T process ( final Map < String, Object > pAddParam, final T pEntity, final IRequestData pRequestData ) throws Exception { fieldPath =RequestData getParameter (fieldNameFilePath ) ; Method getterFieldPath this gettersRapiHolder getFor ( pEntity getClass ( ), fieldPathName ) ; filePath = ( ) getterFieldPath invoke ( pEntity ) ; ( filePath ) fileToDel = new ( filePath ) ; ( fileTo ( ) fileTo delete ( ) ) ( delete file ) ; } } this srvOrm deleteEntity ( pAddParam, pEntity ) ; return null ; }<CODESPLIT><p > Process entity request . < / p ><CODESPLIT>1
protected int getTransactionIsolation ( ) { val props ( PROTRANSACTION ) ; return val == null - 1 Integer. parseInt ( val ) ; }<CODESPLIT>transactionIsolationオプションの指定<CODESPLIT>1
public static int krone ( BigInteger a, BigInteger p ) { return ( ) krImpl (, ) ; }<CODESPLIT>Verifies this library is loaded properly .<CODESPLIT>0
private static void parseBounds ( JSONObject modelJSON, Shape current ) throws JSONException { ( modelJSON has (bounds ) ) JSONObject boundsObject = modelJSON. getJSONObject (bounds ) ; current setBounds ( new Bounds ( new ( boundsObject getJSONObject (Right ) getDouble ( ) boundsObject getJSONObject (Right ) getDouble ( ) ) new ( boundsObject getJSONObject (upperLeft ) getDouble ( ), boundsObject getJSONObject (upperLeft ) getDouble ( ) ) ) ) ; } }<CODESPLIT>creates a point array of all dockers and add it to the current shape<CODESPLIT>0
@ Override public ParseResult parse ( Reader reader, AttributeSource parent ) throws IOException { Parse res = new Parse ( ) ; StringBuilder sb = new StringBuilder ( ) ; char buf = new char 128 ; ; while ( ( reader ( buf ) ) ) sb ( buf,, cnt ) ; } Iterator < MtasUpdateRequestProcessorResultItem > iterator ; ( MtasUpdateRequest result MtasUpdateRequest ( ( ) ) ; ) { result getIterator ( ) ; ( iterator iterator hasNext ( ) ) res str result getStoreStringValue ( ) ; res bin result getStoreBinValue ( ) ; } res str = null ; res bin = null ; result close ( ) ; return res ; } parent clearAttributes ( ) ; while ( iterator ( ) ) MtasUpdateRequestProcessorResultItem item next ( ) ; ( item token ) CharTermAttributeatt parent addAttribute ( CharTermAttribute ) ;att ( item tokenTerm ) ; } ( item tokenFlags )Attribute flags parent addAttribute (Attribute ) ; flags setFlags ( item tokenFlags ) ; } ( item tokenIn )IncrementAttribute patt = parent addAttribute (IncrementAttribute ) ; setPositionIncrement ( item tokenPosIn ) ; } ( item tokenPayload ) PayloadAttribute p = parent addAttribute ( PayloadAttribute ) ; setPayload ( newRef ( item tokenPayload ) ) ; } ( item tokenOffsetStart item tokenOffsetEnd ) OffsetAttribute offset = parent addAttribute ( OffsetAttribute ) ; offset setOffset ( item tokenOffsetStart item tokenOffsetEnd ) ; } state = parent captureState ( ) ; res states add ( state clone ( ) ) ; parent clearAttributes ( ) ; } } ( ) log. ( ) ; } return res ; }<CODESPLIT>/ * ( non - Javadoc )<CODESPLIT>1
public String getMessage ( final String code ) { assert code null ; Missing error = null ; ResourceBundle bundles = getBundles ( ) ; for ( bundles. ) { return bundles [ i ]. getString ( code ) ; } ( ) ( error null ) error = e ; } } } assert error null ; ; }<CODESPLIT>An implementation of { @link Parser } s abstract { @link Parser#flatten ( Options String [] boolean ) flatten } method . <p > The following are the rules used by this flatten method . <ol > <li > if <code > stopAtNonOption< / code > is <b > true< / b > then do not burst anymore of <code > arguments< / code > entries just add each successive entry without further processing . Otherwise ignore <code > stopAtNonOption< / code > . < / li > <li > if the current <code > arguments< / code > entry is <b > -- < / b > just add the entry to the list of processed tokens< / li > <li > if the current <code > arguments< / code > entry is <b > - < / b > just add the entry to the list of processed tokens< / li > <li > if the current <code > arguments< / code > entry is two characters in length and the first character is <b > - < / b > then check if this is a valid { @link Option } id . If it is a valid id then add the entry to the list of processed tokens and set the current { @link Option } member . If it is not a valid id and <code > stopAtNonOption< / code > is true then the remaining entries are copied to the list of processed tokens . Otherwise the current entry is ignored . < / li > <li > if the current <code > arguments< / code > entry is more than two characters in length and the first character is <b > - < / b > then we need to burst the entry to determine its constituents . For more information on the bursting algorithm see { @link GroovyInternalPosixParser#burstToken ( String boolean ) burstToken } . < / li > <li > if the current <code > arguments< / code > entry is not handled by any of the previous rules then the entry is added to the list of processed tokens . < / li > < / ol ><CODESPLIT>0
@ Override public Iterable < T > findAll ( @ NonNull Sort sort ) { notNull ( sortsort findAll null ) ; query new ( ( ALL ) ) with ( sort ) ; return operation find ( query, information getJavaType ( ), information. getCollectionName ( ) ) ; }<CODESPLIT>Returns all entities sorted by the given options .<CODESPLIT>1
void loadConfigs ( ) throws IOException { application loadConfig ( ) ; loadConfig ( ) ; system loadConfig ( ) ; config application ( )Fallback ( ( ) )Fallback ( system getConfig ( ) ) ; dumpdebugLog (MER config ) }<CODESPLIT>end of class ConfigSource<CODESPLIT>0
private void appendLine ( final String timeStampStr, final int indentLevel, final String line, final StringBuilder buf ) { buf. ( timeStampStr ) ; buf. ( ) ; buf. ( ClassGraph. class. ( ) ) ; buf. ( ) ;ashes = ( indentLevel - 1 ) ; for ( ) { buf. ( ) ; } if (ashes ) { buf. ( ) ; } buf. ( line ) ; buf. ( ) ; }<CODESPLIT>Add a child log node .<CODESPLIT>0
static public String createMonitor ( String monitorUrl, Node parserInstruction, String modifiesResponse, TECore core ) { MonitorCall = monitors ( monitorUrl ) ; mcCore ( core ) ; ( parser ) mcParser ( Dom getElement ( parser ) ) ; mcResponse ( (Response ) ) ; }R. log (. CONFIGConfigured monitor test0}" ) ; return "" ; }<CODESPLIT>Monitor without parser that doesn t trigger a test<CODESPLIT>0
public void addRelationToResource ( CmsDbContext dbc, CmsResource resource, CmsResource target, CmsRelationType type, boolean importCase ) throws CmsException { ( typeInContent ( ) ) CmsIllegalArgumentException ( get ( ) (ADDRELATION dbc remove ( resource ( ) ) dbc remove ( target. ( ) ) type. ( dbc. ( ). ( ) ) ) ) ; } relation = new ( resource target type ) ; getVfsDriver ( dbc ) createRelation ( dbc, dbc currentProject ( ) getUuid ( ), relation ) ; ( importCase ) log ( dbc new ( dbc resource ( )Type RESOURCEADDRELATION new { relation. getSourcePath ( ) relation. getTargetPath ( ) } ) false ) ; setDateLastModified ( dbc, resource, System ( ) ) ; } }<CODESPLIT>Adds a resource to the given organizational unit . <p ><CODESPLIT>0
public void marshall ( AssociateProductWithPortfolioRequest associateProductWithPortfolioRequest, ProtocolMarshaller protocolMarshaller ) { ( associateWithPortfolioRequest ) SdkClientException ( marshall(...)" ) ; } protocolMarshaller marshall ( associateWithPortfolioRequest getAcceptLanguage ( ), ACCEPTLANGUAGEBINDING ) ; protocolMarshaller marshall ( associateWithPortfolioRequest getProductId ( ),IDBINDING ) ; protocolMarshaller marshall ( associateWithPortfolioRequest getPortfolioId ( ), PORTFIOIDBINDING ) ; protocolMarshaller marshall ( associateWithPortfolioRequest getSourcePortfolioId ( ), SOURCEPORTFIOIDBINDING ) ; } ( ) SdkClientException ( marshall. ( ) ) ; } }<CODESPLIT><p > To help organize your resources you can assign your own metadata to the resources that you create . Each tag is a key - value pair . < / p ><CODESPLIT>0
public static void swap ( int [ ] intArray1, int array1Index, int [ ] intArray2, int array2Index ) { ( intArray arrayIndex intArray arrayIndex ) hold =Array1 array1 ;Array1 array1Index =Array arrayIndex ;Array arrayIndex = hold ; } }<CODESPLIT>Helper method that swaps all the elements of the arrays . This method runs in O ( <code > Math . min ( array1 . length array2 . length< / code > ) time .<CODESPLIT>1
public void marshall ( DeleteUserRequest deleteUserRequest, ProtocolMarshaller protocolMarshaller ) { if ( deleteUserRequest == null ) SdkClientException ( marshall(...)" ) ; } { protocolMarshaller. marshall ( deleteUserRequest. getUserName ( ), USERBINDING ) ; protocolMarshaller. marshall ( deleteUserRequest. getAuthenticationType ( ), AUTHTYPEBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
protected void addWebuserCondition ( CmsSelectQuery select, CmsOrganizationalUnit orgUnit, TableAlias users ) {ConditionTemplate ; ( ( ) ) webuserConditionTemplate = %1$s8 AND %1$s < ; } webuserConditionTemplate = %1$s <8 OR %1$s ; } webCondition ( webConditionTemplate users (Flags ( ) ) ) ; select addCondition (Condition ) ; }<CODESPLIT>Adds a check for the web user condition to an SQL query . <p ><CODESPLIT>1
void add ( LessExtend lessExtend, String [ ] mainSelector ) { ( mainSelector mainSelector (media ) ) mainSelector lessExtend getSel ( ) ; } mainSelector Selector merge ( mainSelector, lessExtend getSel ( ) ) ; }Selector = lessExtendendingSelector ( ) ; ( lessExtendAll ( ) ) LessExtend extend = new LessExtend ( mainSelectorSelector ) ; Selector tokenizers pollLast ( ) init ( extendingSelector ) ; do { token = next ( ) ; ( ) } all add ( token, extend ) ; } while ( ) tokenizers addLast ( ) ; } exact add ( extendingSelector, mainSelector ) ; } }<CODESPLIT>Add to the given selectors all possible extends and return the resulting selectors .<CODESPLIT>0
JMFSchema [ ] getEncodingSchemas ( ) throws MessageEncodeFailedException { ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this tcgetEncodingSchemas ) ; JMFSchema result ; { JMFSchema result = ( ( JMFMessage ) headerPart.Part ). getSchemata ( ) ; JMFSchema result = null ; result = result1 length ; ( payloadPart null ) result2 = ( ( JMFMessage ) payloadPart.Part ). getSchemata ( ) ; resultSize += result length ; } result = new JMFSchema result ; System. arraycopy ( result,, result,, result. length ) ; ( payloadPart null ) System. arraycopy ( result2,, result, result. length, result2. length ) ; } } (MF ) (,comibmwsimplJsMsgObjectgetEncodingSchemas,mo, this, new { new { MfpConstants._MESSAGE headerPart. jmfPart theMessage }, new { MfpConstants._MESSAGE payloadPart. jmfPart theMessage } } ) ; ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this tcgetEncodingSchemas ) ; MessageEncode ( ) ; } ( TraceComponent isAnyTracingEnabled ( ) tc ( ) ) SibTr ( this tcgetEncodingSchemas ) ; return result ; }<CODESPLIT>Get a list of the JMF schemas needed to decode this message<CODESPLIT>1
public boolean add ( final int value ) { ( capacity ) IllegalStateException ( IntHashSet capacity capacity full ) ; } index =Hash ( value, mask ) ; while ( values missingValue ) ( values index value ) return false ; } index = next ( index ) ; } values index = value ; size ++ ; return true ; }<CODESPLIT>Splits a { @link ClientMessage } into frames of a maximum size .<CODESPLIT>0
private void delete_obj_property ( Database database, String name, String type, String propname ) throws DevFailed { ( database ( ) ) checkAccess ( database ) array ; array new ; array = propname ; deleteobjproperty ( database name type array ) ; }<CODESPLIT>==========================================================================<CODESPLIT>1
public static int getCtrlOrMetaModifier ( ) {Browser webBrowser ( ) getWebBrowser ( ) ; (BrowserMac ( ) ) return ShortAction ModifierKey META ; } return ShortAction ModifierKey CTRL ; }<CODESPLIT>Dynamic styles for window .<CODESPLIT>0
public User resolveUser ( final long userId ) throws SQLException { metrics userCacheTries mark ( ) ;CacheIf ( userId ) ; ( ) metrics userCacheHits mark ( ) ; return user ; } user selectUser ( userId ) ; ( ) userCache ( userId user ) ; } return user ; } }<CODESPLIT>Resolves a user by username possibly with the internal cache .<CODESPLIT>1
public static String buildCleanedParametersURIRepresentation ( org. apache. commons. httpclient. URI uri, SpiderParam. HandleParametersOption handleParameters, boolean handleODataParametersVisited ) throws URIException { ( handleParameters ( HandleParameters ) ) return uri. toString ( ) ; } ( handleParameters ( HandleParametersCOMPLETE ) ) return createBaseUriWithCleanedPath ( uri, handleParameters, handleODataParametersVisited ) ; } ( handleParameters ( HandleParameters ) ) new ( createWithClean ( uri handleParameters handleParameters ) ) ;Query getCQuery ( uriQuery ( ) ) ; (Query ( ) ) ( ) (Query ) ; } return retVal. toString ( ) ; } return uri. toString ( ) ; }<CODESPLIT>Tells whether or not the given port is the default for the given scheme . <p > <strong > Note : < / strong > Only HTTP and HTTPS schemes are taken into account .<CODESPLIT>0
public int run ( String arg, boolean stdin, boolean force ) throws IOException { OutputStream outputStream = null ; InputStream inputStream = null ; KeystoreWrapper keystoreWrapper ; ( command ) CREATE (Exists ( ) ) proceed = promptNo (An esadoop keystore already exists OverwriteN]" ) ; ( proceed false ) prompt. (Exit creating keystore ) ; return 0 ; } } keystore =store newStore ( ) build ( ) ; outputStream = openWrite ( ) ; keystoreWrapper saveKeystore ( outputStream ) ; return 0 ; LIST (!Exists ( ) ) prompt (ERROR ESHadoop keystore not Uses command to create one, Command CREATE getText ( ) ) ; return 5 ; } inputStream = openRead ( ) ; keystoreWrapper =storeWrapper loadStore ( inputStream ) build ( ) ; for ( keystoreWrapper listEntries ( ) ) prompt. ( entry ) ; } return 0 ; ADD (!Exists ( ) ) prompt (ERROR ESHadoop keystore not Uses command to create one, Command CREATE getText ( ) ) ; return 5 ; } inputStream = openRead ( ) ; keystoreWrapper =storeWrapper loadStore ( inputStream ) build ( ) ; ( keystoreWrapper contains ( arg ) force false ) proceed = promptNo (Setting already exists OverwriteN]" arg ) ; ( proceed false ) prompt. (Exit modifying keystore ) ; return 0 ; } } ( stdin ) data = prompt readLine ( ) ; keystoreWrapper setSecureSetting ( arg data ) ; } data = prompt readPassword (Enter values, arg ) ; keystore setSecureSetting ( arg new ( data ) ) ; Arrays fill ( data, ( ) ) ; } outputStream = openWrite ( ) ; keystoreWrapper saveKeystore ( outputStream ) ; return 0 ; REMOVE (!Exists ( ) ) prompt (ERROR ESHadoop keystore not Uses command to create one, Command CREATE getText ( ) ) ; return 5 ; } inputStream = openRead ( ) ; keystoreWrapper =storeWrapper loadStore ( inputStream ) build ( ) ; ( keystoreWrapper contains ( arg ) false ) prompt (ERROR Settings does not in the keystore, arg ) ; return 6 ; } keystoreWrapper removeSecureSetting ( arg ) ; outputStream = openWrite ( ) ; keystoreWrapper saveKeystore ( outputStream ) ; return 0 ; default prompt. (ERROR command command. ( ) ) ; return 7 ; } } ( eh ) prompt. (ERROR load keystore file eh. ( ) ) ; return 8 ; } ( ) prompt. (ERROR load keystore file. ( ) ) ; return 9 ; } ( ) prompt. (ERROR. ( ) ) ; return 10 ; } ( outputStream ) outputStream close ( ) ; } ( inputStream ) inputStream close ( ) ; } } }<CODESPLIT>{<CODESPLIT>0
private boolean updateStreamBlacklist ( Set Tuple2 String, String > > processingBlacklist, Message message, Set < String > initialStreamIds ) { addedStreams ; ( messageStreams ( ) ) (Ids remove ( ( ) ) ) addedStreams ; } processingBlacklist add ( tuple ( message ( ) stream ( ) ) ) ; } } return addedStreams ; }<CODESPLIT>Evaluates all pipelines that apply to the given messages based on the current stream routing of the messages .<CODESPLIT>0
protected boolean isFirehoseDrainableByClosing ( FirehoseFactory firehoseFactory ) { returnhoseReceiverFirehose (hose TimedShFirehose isFirehoseByClosing ( ( ( TimedShFirehose )hose ) getDelegateFactory ( ) ) ) (hoseFactoryFirehoseFactory isFirehoseByClosing ( ( (FirehoseFactory )hoseFactory ) getDelegate ( ) ) ) ; }<CODESPLIT>Is a firehose from this factory drainable by closing it? If so we should drain on stopGracefully rather than abruptly stopping . <p > This is a hack to get around the fact that the Firehose and FirehoseFactory interfaces do not help us do this . <p > Protected for tests .<CODESPLIT>1
public boolean dispatchKeyEvent ( KeyEvent event ) {Cursor controller getUnique ( ( ) ) ; ( ) return controller dispatchKeyEvent ( event ) ; } return false ; }<CODESPLIT>returns controller if a new device is found<CODESPLIT>0
public boolean isDerivation ( Type parent, Type child ) { ( ( ) ) return true ; } ( N ) Type. Nom t = ( Type. Nominal ) child ; getLink ( ) ( ) ; return isDerivation ( parent, decl getType ( ) ) ; } return false ; } }<CODESPLIT>Check whether one type is a derivation of another . For example in this scenario :<CODESPLIT>1
public void setSelectedClass ( java lang String selectedClass ) { getState ( ) (Keys selected selected ) ; }<CODESPLIT><p > Return the value of the <code > selectedClass< / code > property . < / p > <p > Contents : CSS style class to apply to the rendered label on selected options .<CODESPLIT>0
public static T Predicates T attributeIn ( Function T, > function, Iterable > iterable ) { return AttributePredicate, Object ( function, Pred in ( iterable ) ) ; }<CODESPLIT>Creates a predicate which returns true if an attribute selected from an object passed to accept method is contained in the iterable .<CODESPLIT>1
private void validateRequest ( DownloadRequest dreq ) throws ErrorResponseException { path = dreq. getPath ( ) ; ( path ( ResourceCatalogXML ) path ( ) ) ErrorResponseException ( DownloadResponse. getContentResponse ( ) ) ; } }<CODESPLIT>Make sure that it is a valid request . This is also the place to implement the reverse IP lookup<CODESPLIT>1
public AutofitHelper setEnabled ( boolean enabled ) { ( enabled ) mEnabled = enabled ; ( enabled )TextView addTextChangedListener (TextWatcher ) ;TextView addOnLayoutChangeListener (OnLayoutChangeListener ) ; autof ( ) ; }TextView removeTextChangedListener (TextWatcher ) ;TextView removeOnLayoutChangeListener (OnLayoutChangeListener ) ;TextView setText ( TypedText ) ; } } return this ; }<CODESPLIT>Set the enabled state of automatically resizing text .<CODESPLIT>1
public static void checkIfUnmodifiedSince ( final String ifUnmodifiedSince, final Instant modified ) { Instant time parseDate ( ifUnmodifiedSince ) ; ( modified ( SECONDS )After ( ) ) ClientErrorException ( ( PRE ) ( ) ) ; } }<CODESPLIT>Check for a conditional operation .<CODESPLIT>1
public void setProgress ( CmsUploadProgessInfo info ) {File = info. getCurrentFile ( ) ;FileIndex = ; (File ) } currFileIndex = currFile - 1 ; ( currFileIndex morderedFilenamesToUpload ( ) ) currFileIndex = m_orderedFilenamesToUpload. size ( ) - 1 ; } } ( mcontentLength ) mcontentLength = info. getContentLength ( ) ; }Filename = morderedFilenamesToUpload. (FileIndex ) ; contentLength = CmsUploadButton. formatBytes ( mcontentLength ) ; fileCount = morderedFilenamesToUpload. size ( ) ; readBytes = CmsUploadButton. formatBytes ( getBytesRead ( info. getPercent ( ) ) ) ; mbar setValue ( info getPer ( ) ) ; ( mstarted ) mstarted = true ; mfileinfo setHTML ( 0, 0, + ( ) key (UPLOADPROGRESSCURRENTFILE ) + ) ; mfileinfo setHTML (, 0, + ( ) key (UPLOADPROGRESSUPLOAD ) + ) ; mfileinfo setHTML (, 0, "" ) ; mfileinfo setText ( 0,, "" ) ; mfileinfo setText (,, "" ) ; mfileinfo setText (,, "" ) ; mfileinfoFormatter ( ) setWidth ( 0, ) ; } mfileinfo setText ( 0,, currFilename ) ; mfileinfo. setText (,,. ( ). key (.UPLOADPROGRESSCURRENTVALUE, new (FileIndex ), new ( fileCount ), getFileText ( ) ) ) ; mfileinfo setText (,, ( ) key (UPLOADPROGRESSUPLOAD, readBytes, contentLength ) ) ; }<CODESPLIT>Returns the file text . <p ><CODESPLIT>0
public static void escape ( String str, StringBuilder rval ) { for ( str. ( ) ) { char hi = str. ( ) ; if ( hi <=8 hi ==xB hi == ( hi hi <=1F ) ( hi7F hi <= ) ( ( hi24F Character. isHighSurrogate ( hi ) ) ) ) { rval. append ( String. format ( "\\u04, ( int ) hi ) ) ; } if ( Character. isHighSurrogate ( hi ) ) { char lo = str. ( ++ ) ; c = ( hi << 10 ) + lo + ( 010000 - ( 0xD800 << 10 ) - 0DC00 ) ; rval. append ( String. format ( "\\U08, c ) ) ; } { ( hi ) {. append ( "\\b ) ; ; rval. append ( "\\n ) ; ; rval. append ( "\\t ) ; ; rval. append ( "\\ ) ; ; rval. append ( "\\r ) ; ; rval. append ( "\\\"" ) ; ; rval. append ( "\\\\" ) ; ; default : rval. append ( hi ) ; ; } } } }<CODESPLIT>Parses the authority for the pre - parsed given JsonLdUrl .<CODESPLIT>0
public static void sendClose ( final ByteBuffer data, final WebSocketChannel wsChannel, final WebSocketCallback Void callback ) { Close Close ( ; sendClose ( callback ; }<CODESPLIT>Sends a complete close message invoking the callback when complete<CODESPLIT>0
public CharacterSet getInverse ( ) { ( ; n forbiddenCharacters = characters ; n characters = forbiddenCharacters ; return ; }<CODESPLIT>Write VCF record with the specified print writer .<CODESPLIT>0
protected boolean readFeatureParameters ( Element node ) { { NodeList child = node. getChildNodes ( ) ; cpnames = new Vector String ( ) ; paras = new Vector Vector ( ) ; for ( child. ( ) ) ( child. ( ) Element ) { child = ( ) child. item ( ) ; String value = child. getAttribute (value ) ; String parastr = value. split ( ":" ) ; Vector para = new Vector ( ) ; for ( paras. ) { para. add ( Integer. parseInt ( paras ) ) ; }names. add ( paras ) ; paras. add ( para ) ; } } ( ) System. out. println (. ( ) ) ;. printStackTrace ( ) ; return false ; } return true ; }<CODESPLIT>Read feature parameters .<CODESPLIT>1
public Node insertBefore ( Node newChild, Node refChild ) throws DOMException { (ResourcesFUNCTION ; return null ; }<CODESPLIT>Unimplemented . See org . w3c . dom . Node<CODESPLIT>1
public static AuthToken basic ( String username, String password, String realm ) { Objects requireNonNull ( username,Username null ) ; Objects requireNonNull ( password,Password null ) ; Map Value map = newHashMapWith ( ) ; map put (CHEME, value (basic ) ) ; map put ( PRIP, value ( username ) ) ; map put ( C, value ( password ) ) ; ( realm ) map put (M, value ( realm ) ) ; } return new InternalAuthToken ( map ) ; }<CODESPLIT>The basic authentication scheme using a username and a password .<CODESPLIT>1
private Function Expression, Statement addNodeToPlaceholderMap ( String mapKey, StandaloneNode node ) { return putToMap ( map, placeholder compileToSo ( map, node, ExtraCode, ExtraCode ) ) ; }<CODESPLIT>See go / soy - element - keyed - roots for reasoning on why this is disallowed .<CODESPLIT>0
public void marshall ( MetricDefinition metricDefinition, ProtocolMarshaller protocolMarshaller ) { ( metricDefinition == null ) SdkClientException ( marshall(...)" ) ; } { protocolMarshaller. marshall ( metricDefinition. getName ( ), NAMEBINDING ) ; protocolMarshaller. marshall ( metricDefinition.Regex ( ), REGEXBINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>1
static String [ ] split ( URI remoteUri, String suffix, @ Nullable String defaultBranch ) { host = remoteUri. getHost ( ) ; ( host null remoteUri getScheme ( ) (file ) ) IllegalArgumentException ( host remoteUri remoteUri ) ; } path = remoteUri. getRawPath ( ) ; ( path null ) IllegalArgumentException ( path remoteUri remoteUri ) ; } matcher = Pattern. compile ( "^?." suffix| ). matcher ( path ) ; ( find ( ) ) IllegalArgumentException ( suffix remoteUri path remoteUri ) ; } newRemoteUri ; port = remoteUri. getPort ( ) ; ( host null ) ( port ) newRemoteUri = remoteUri. getScheme ( )://" host port matcher. group ( ) ; } newRemoteUri = remoteUri. getScheme ( )://" host matcher. group ( ) ; } } newRemoteUri = remoteUri. getScheme ( )://" matcher. group ( ) ; } remotePath ; { decoded = URLDecoder. decode ( path. ( matcher. group ( ). length ( ) ),UTF ) ; decoded = normalizePath ( decoded ) ; remotePath = decoded ; } ( UnsupportedEncodingException ) Error ( ) ; } fragment = remoteUri. getFragment ( ) ; remoteBranch = fragment null fragment defaultBranch ; return new String [ ] { newRemoteUri, remotePath, remoteBranch } ; }<CODESPLIT>Splits the specified remoteUri into : - the actual remote repository URI - the path in the remote repository - the branch name .<CODESPLIT>1
public static List < Class <? > > resolveHierarchy ( final Class <? > type ) { List Class res = ( ) ; Class current = type ; while ( Object ( ) ) res add ( current ) ; current = current getSuperclass ( ) ; } return res ; }<CODESPLIT>Assigns base class in scheme for provided model type ( for example to make class vertex type it must extend V ) .<CODESPLIT>0
public void setRefreshing ( boolean refreshing ) { ( refreshRefresh refresh ) mRefreshing = refreshing ;Target = ; (UsingCustomStart ) ( mDirection ) BOTTOMTarget getMeured ( ) ( ) (SpinnerFinalOffset ) ; TOPTarget ( ) (SpinnerFinalOffset (OriginalOffset ) ) ; } } endTarget = ( int ) mSpinnerFinalOffset ; } setTargetOffsetTopAndBottom ( endTarget mCurrentTargetOffsetTop, true ) ; mNotify = false ; startScaleUpAnimation (RefreshListener ) ; } setRefresh ( refresh, false ) ; } }<CODESPLIT>Notify the widget that refresh state has changed . Do not call this when refresh is triggered by a swipe gesture .<CODESPLIT>1
private Field [ ] getAllInstanceFields ( final Object obj ) { Field fields = instanceFieldsByClass ( obj ( ) ) ; ( fields ) fieldList Reflection getAllFields ( obj excludeStatic excludeTransient ) ; fields = fieldList ( new fieldList ( ) ) ; instanceFieldsByClass put ( obj ( ), fields ) ; } return fields ; }<CODESPLIT>Visits all the keys and entries of the given map .<CODESPLIT>0
private Map < VectorLayer, Filter > dtoAttributeCriterionToFilters ( AttributeCriterion criterion ) throws GeomajasException { Map VectorLayer Filter filters = new LinkedHashMap VectorLayer Filter ( ) ; Filter f ; Vector = configurationService.Vector ( criterion. getServer ( ) ) ; ( ) GeomException (. criterion. getServerLayer ( ) ) ; } operator = criterion getOperator ( ) ; (LIKE ( operator toUpperCase ( ) ) ) f = filterService createLikeFilter ( criterion getAttributeName ( ), criterion ( ) ) ; } ( ( operator toUpperCase ( ) )BEFORE ( operator toUpperCase ( ) )AFTER ( operator toUpperCase ( ) ) ) f = filterService parseFilter ( criterion toString ( ) ) ; } f = filterService createCompareFilter ( criterion getAttributeName ( ), criterion getOperator ( ), criterion ( ) ) ; } filters put ( l, f ) ; return filters ; }<CODESPLIT>Prune impossible combinations . ( eg . If And criteria filter different layers they will return nothing so they are pruned ) .<CODESPLIT>0
public Session createMailSession ( final String host, final int port, final String username, final String password ) { transportStrategy generateProperties ( ) ; ( transportStrategy propertyName ( ) ) ; ( transportStrategy propertyName ( ) ( ) ) ; ( ) ( transportStrategy propertyName ( ) username ) ; } ( password ) ( transportStrategy propertyNameAuthenticate ( ) ) ; return Session getInstance ( props, new Authenticator ( ) Override protected PasswordAuthentication getPasswordAuthentication ( ) { return new PasswordAuthentication ( username, password ) ; } } ) ; } return Session getInstance ( props ) ; } }<CODESPLIT>Actually instantiates and configures the { @link Session } instance . Delegates resolving transport protocol specific properties to the { @link #transportStrategy } in two ways : <ol > <li > request an initial property list which the strategy may pre - populate< / li > <li > by requesting the property names according to the respective transport protocol it handles ( for the host property name it would be <em > mail . smtp . host < / em > for SMTP and <em > mail . smtps . host < / em > for SMTPS ) < / li > < / ol ><CODESPLIT>1
private PBXObjectRef addProjectConfigurationList ( final Map objects, final String baseDir, final List < DependencyDef > dependencies, final CommandLineCompilerConfiguration compilerConfig, final CommandLineLinkerConfiguration linkerConfig ) { List configurations = new ArrayList ( ) ; MapSettings = new HashMap ( ) ;Settings put (GCCWARNABOUTRETURNTYPE,YES ) ;Settings put (GCCWARNUNUSEDVARIABLE,YES ) ;Settings put (PREBINDING, ) ;Settings put (SDKROOT,DeveloperSDKsMacOSX4usdk ) ;XObjectRefConfig = createXBuildConfiguration (DebugSettings ) ; objects put (Config. getID ( ),Config. getProperties ( ) ) ; configurations. add (Config ) ; Map releaseSettings = new HashMap ( ) ; releaseSettings. put (GCCWARNABOUTRETURNTYPE,YES ) ; releaseSettings. put (GCCWARNUNUSEDVARIABLE,YES ) ; releaseSettings. put (PREBINDING, ) ; releaseSettings. put (SDKROOT,DeveloperSDKsMacOSX4usdk ) ;XObjectRef releaseConfig = createXBuildConfiguration (Release releaseSettings ) ; objects. put ( releaseConfig. getID ( ), releaseConfig. getProperties ( ) ) ; configurations. add ( releaseConfig ) ;XObjectRef configurationList = createXConfigurationList ( configurations ) ; Map projectConfigurationListProperties = configurationList getProperties ( ) ; projectConfigurationListProperties. put (defaultConfigurationIsVisible,0 ) ; projectConfigurationListProperties. put (defaultConfigurationName,Debug ) ; objects. put ( configurationList. getID ( ), configurationList. getProperties ( ) ) ; includeDirs = compilerConfig getIncludePath ( ) ; ( includeDirs ) List includePaths = new ArrayList ( ) ; Map includePathMap = new HashMap ( ) ; for ( includeDir includeDirs ) ( CSystemPath ( includeDir ) ) absPath = includeDir ( ) ; ( includePathMap ( absPath ) ) ( absPath (usr ) ) includePaths. add ( CUtil. toUnixPath ( absPath ) ) ; } relPath = C toUnixPath ( C getRelativePath ( baseDir includeDir ) ) ; includePaths. add ( relPath ) ; } includePathMap. put ( absPath, absPath ) ; } } } includePaths. add ( "${ed ) ;Settings. put (HEADERSEARCHS, includePaths ) ; releaseSettings. put (HEADERSEARCHS, includePaths ) ; } preArgs = compilerConfig getPreArguments ( ) ; List defines = new ArrayList ( ) ; for ( pre preArgs ) ( preArg ( ) ) defines. add ( pre. ( ) ) ; } } ( defines ( ) ) defines. add (inherited ) ;Settings. put (GCCPREORDEFINITIONS, defines ) ; releaseSettings. put (GCCPREORDEFINITIONS, defines ) ; } ( linkerConfig null ) Map librarySearchMap = new HashMap ( ) ; List librarySearchPaths = new ArrayList ( ) ; List otherLdFlags = new ArrayList ( ) ; linkerArgs = linkerConfig getEndArguments ( ) ; for ( linker linkerArgs ) ( linkerArg (L ) ) libDir = linkerArg ( ) ; ( librarySearchMap ( libDir ) ) ( libDir (usrlib ) ) librarySearchPaths add ( C toUnixPath ( C getRelativePath ( baseDir new ( libDir ) ) ) ) ; } librarySearchMap. put ( libDir, libDir ) ; } } ( linkerArg ( ) ) libName = linkerArg ( ) ; = false ; for ( dependency dependencies ) ( libName ( dependency ( ) ) ) dependencyFile = dependency getFile ( ) ; ( dependencyFile null File ( dependencyFile ( ) ) exists ( ) ) = true ; } } } ( ) otherLdFlags. add ( linker ) ; } } }Settings. put (BRARYSEARCHS, librarySearchPaths ) ;Settings. put (OTHERLDFLAGS, otherLdFlags ) ; releaseSettings. put (BRARYSEARCHS, librarySearchPaths ) ; releaseSettings. put (OTHERLDFLAGS, otherLdFlags ) ; } return configurationList ; }<CODESPLIT>Add project configuration list .<CODESPLIT>1
@ Override public ResultSet getTablePrivileges ( String catalog, String schemaPattern, String tableNamePattern ) throws SQLException { checkClosed ( ) ; VoltTabletable = new VoltTable ( new Column (TABLECAT VoltType STRING ) new Column (TABLES VoltType STRING ) new Column (TABLE VoltType STRING ) new ColumnInfo (GR VoltType STRING ) new ColumnInfo (GRANTEE VoltType STRING ) new ColumnInfo (PRILEGE VoltType STRING ) new ColumnInfo (ISGR VoltType STRING ) ) ; JDBC4ResultSet res = new JDBC4ResultSet ( thisCatalogtable ) ; return res ; }<CODESPLIT>Retrieves a description of the access rights for each table available in a catalog .<CODESPLIT>1
public Observable StorageAccount > getStorageAccountAsync ( String resourceGroupName, String accountName, String storage ) { return getStorageAccountWithServiceResponseAsync (,, storage ) map ( ServiceResponseAccount,Account ( ) Override public StorageAccount ( ServiceResponse StorageAccount > response ) { return body ( ) ; } } ) ; }<CODESPLIT>Gets the specified Azure Storage account linked to the given Data Lake Analytics account .<CODESPLIT>1
private static double sinQ ( double xa, double xb ) { = ( ) ( ( xa 8 ) ) ; epsilon = xaS ; sintA = STABLEA ; sintB = STABLEB ; costA =OSTABLEA ; costB =OSTABLEB ; double sinEpsA = epsilon ;B polyS ( epsilon ) ;A = ;B =os ( epsilon ) ; =A HEX4 ; double temp2 = ( sinEpsA temp ) - temp ; sin += sin ; sinEpsA = temp2 ; double result ; double a = 0 ; double b = 0 ; double t = sintA ; double c = a t ; d ( a t ) ; a = c ; b = b d ; t = costA * sinEpsA ; c = a t ; d ( a t ) ; a = c ; b = b d ; b = b sintA * cosEpsB costA * sinEpsB ; b = b sintB costB * sinEpsA sintB * cosEpsB costB * sinEpsB ; ( ) t = ( ( costA costB ) * ( cosEpsA cosEpsB ) - ( sintA sintB ) * ( sinEpsA sinEpsB ) ) * ; c = a t ; d = ( a t ) ; a = c ; b = b d ; } result = a b ; return result ; }<CODESPLIT>Compute sine over the first quadrant ( 0 < x < pi / 2 ) . Use combination of table lookup and rational polynomial expansion .<CODESPLIT>1
public void setNumExecutors ( @ Nonnegative int n ) throws IOException, IllegalArgumentException { if ( n < ) IllegalArgumentException ( field executorsnegative number ) ; } if ( thisExecutors n ) this. numExecutors = n ; updateComputList ( ) ; save ( ) ; } }<CODESPLIT>{ @inheritDoc } .<CODESPLIT>0
private static boolean classNameMatchesFileName ( ClassSymbol c, Env AttrContext env ) { return envfile isNameCompatible ( toString ( ),FileObject SOURCE ) ; }<CODESPLIT>Does class have the same name as the file it appears in?<CODESPLIT>1
@ XmlElement ( namenextPageLink ) JsonProperty ( valuenextPageLink ) ApiModelProperty ( value next pagination link, position ) publicRequestLinkDto getNextPageLink ( ) { return }<CODESPLIT>Returns the next pagination link .<CODESPLIT>1
@ Nonnull public static Homoglyph build ( @ Nonnull @ WillClose final Reader aReader ) throws IOException { ValueEnforcer. notNull ( aReader,reader ) ; (Buffered aBuffered ( a ) ) {CommonsList IntSet aList = new CommonsArrayList ( ) ; sLine ; while ( ( sBR ( ) ) ) sLine = sLine. trim ( ) ; ( s ( "#" ) s ( ) ) ; IntSet aSet = new IntSet ( sLine length ( ) / ) ; for ( StringHelper.Explo ( ) ) =Parser parseInt ( sCharCode 16 ) ; ( nVal ) aSet add ( nVal ) ; } aList. add ( aSet ) ; } return new Homoglyph ( aList ) ; } }<CODESPLIT>Consumes the supplied Reader and uses it to construct a populated Homoglyph object .<CODESPLIT>1
private boolean hasNullifiedFK ( FieldDescriptor [ ] fkFieldDescriptors, Object [ ] fkValues ) { result = true ; for ( fkValues. ) ( pb serviceBrokerHelper ( ) representsNull ( fkFieldDescriptors fkValues ) ) result = false ; ; } } return result ; }<CODESPLIT>to avoid creation of unmaterializable proxies<CODESPLIT>1
public HistoricDate getBeginOfYear ( HistoricEra era, int yearOfEra ) { HistDate newYear = this getNewYearStrategy ( ) newYear ( era year ) ; ( this isValid (Year ) ) PlainDate date = this convert ( newYear ) ; Hist preferred = this eraPreference getPreferred ( newYear date ) ; ( preferredEra era ) = preferred year ( newYear getE ( ) newYear getYearEra ( ) ) ; newYear = HistDate of ( preferredEra newYear getMonth ( ) newYear getDayOfMonth ( ) ) ; } return newYear ; } IllegalArgumentException ( determine New Year era yearEra ) ; } }<CODESPLIT>/ * [ deutsch ] <p > Determines the date of New Year . < / p ><CODESPLIT>1
protected static void checkNotNull ( Object [ ] array ) { checkNotNull ( ( array ; ( ) checkNotNull ( ; } }<CODESPLIT>Validate the specified arguments .<CODESPLIT>1
private static String getExtentOfParticipationMention ( LinkedList < Term > eventTermList, LinkedList < Term > roleTermList, processNAFVariables vars ) { eventWordList getWFListByTermsFromTargetList ( eventTermList, vars ) ; roleWordList getWFListByTermsFromTargetList ( roleTermList, vars ) ; LinkedList mergedList = new LinkedList ( ) ; charStart = ( eventList ( ) getOffset ( ) ) ; charStartRole = ( roleList ( ) getOffset ( ) ) ; LinkedList < Wf > firstWL secondWL ; (StartEventStartRole ) firstWL = eventWordList ; secondWL = roleWordList ; } firstWL = roleWordList ; secondWL = eventWordList ; } ( ) (List ( ) ) mergedWordList add ( w ) ; } } ( second ) (List ( ) ) mergedWordList add ( w ) ; } } StringBuffer extent = new StringBuffer ( ) ; for (List ) extent ( w ( ) ) ; } sExtent = extent toString ( ) ; return sExtent. substring ( 0, sExtent. length ( ) - 1 ) ; }<CODESPLIT>/ * similar to generateTheMIdAndSetID () but specific for ParticipationMention<CODESPLIT>1
public EnvironmentConfig setEnvMonitorTxnsExpirationTimeout ( final int timeout ) { ( timeout timeout ) InvalidSettingException (Transaction timeout second ) ; } setSetting ( ENVMONITORTXEXPITIMEOUT, timeout ) ; ( timeout timeoutMonitorTxnsCheckFreq ( ) ) setEnvMonitorTxnsCheckFreq ( timeout ) ; } return this ; }<CODESPLIT>Sets the maximum size of page of B + Tree . Default value is { @code 128 } . Only sizes in the range [ 16 .. 1024 ] are accepted . <p > Mutable at runtime : yes<CODESPLIT>0
public static void addTypeMapper ( Class < > clz, Class < > mapper ) { synchronized ( classMapper ) { LinkedHashSet Class =Mapper ( clz ) ; ( h ) = new LinkedHashSet ( ) ;Mapper put ( clz, h ) ; } h add ( mapper ) ; } }<CODESPLIT>Field type convertor for all classes<CODESPLIT>1
public static DocumentBuilder newDocumentBuilder ( final DocumentBuilderFactory factory ) { DocumentBuilder builder = factory newDocumentBuilder ( ) ; return builder ; } ( )CreateInstance ( DocumentBuilder.. ( ) ) ; } }<CODESPLIT>Parse the given XML string and return the root Element This uses the document builder associated with the current thread .<CODESPLIT>0
public synchronized void clear ( ) { ( validState )StateException ( ) ; } buf clear ( ) ; fc position ( ) truncate ( ) force ( true ) ; close ( ) ; open ( ) ; } ( ) log. ( clear()" ) ; } }<CODESPLIT>Read value from file<CODESPLIT>0
void sendMigrationEvent ( final MigrationStatus status ) { getPartition ( ) ; NodeEngine nodeEngine getNodeEngine ( ) ; Member localMember nodeEngine getLocalMember ( ) ; Migration event = new Migration ( null localMember status ) ; EventService eventService = nodeEngine getEventService ( ) ; Collection Event registrations = eventServiceRegistr ( SERVICEEVENTPIC ) ; eventService publishEvent ( SERVICE, registrations, event, partitionId ) ; }<CODESPLIT>Sends a {<CODESPLIT>1
private void processConstraintViolation ( final Set < ConstraintViolation < Object > > violations, final CsvBindingErrors bindingErrors, final ValidationContext < Object > validationContext ) { (Violation violation violations ) field violation getProperty ( ) toString ( ) ; Constraint cd violation ( ) ; errorCodes = determine ( cd ) ; errorVars = createVariableFor ( cd ) ; (CsvField ( field validation ) ) CsvFieldError fieldError = bindingErrorsFieldError ( field ) ; ( fieldError fieldErrorProcessingFailure ( ) ) } column = validation getBean ( ) getColumn ( field ) ( ) ; errorVars put (Number, validation getCsv ( ) getLineNumber ( ) ) ; errorVars put (Number, validation getCsv ( )Number ( ) ) ; errorVars put (columnNumber, columnMapping getNumber ( ) ) ; errorVars put (label, columnMapping getLabel ( ) ) ; errorVars computeIfAbsent (printer, key columnMapping getFormatter ( ) ) ; fieldValue = violationInvalid ( ) ; errorVars computeIfAbsent (validValue, key fieldValue ) ; defaultMessage = determinealtMessage ( errorVars violation ) ; bindingErrors rejectValue ( field, columnMapping getField ( ) getType ( ), errorCodes, errorVars, defaultMessage ) ; } bindingErrors reject ( errorCodes, errorVars, violation ( ) ) ; } } }<CODESPLIT>BeanValidationの検証結果をSheet用のエラーに変換する<CODESPLIT>1
public static void writeToFile ( @ NonNull File file, @ NonNull String content ) throws IOException { OutputStreamWriter writer = new OutputStreamWriter ( new FileOutputStream ( file )UTF ) ; writer write ( content ) ; writer. flush ( ) ; } ( ) Log. (. ( ) ) ; } writer. close ( ) ; } ( ) Log. (. ( ) ) ; } } }<CODESPLIT>Delete file .<CODESPLIT>0
public static String extractText ( String html ) { replaceWith ( ; safeRemoveAllTags ( ; unescapeHtml ( ) ; return html ; }<CODESPLIT>Extracts the title of the page .<CODESPLIT>0
public static Rule getRule ( final String inequalitySymbol, final String field, final String value ) { ( ( Logging LEVEL ) ) return LevelInequalRule getRule ( inequalSymbol, value ) ; } ( ( Logging ) ) return TimestampInequalRule getRule ( inequalSymbol, value ) ; } return new InequalRule ( inequalSymbol, field, value ) ; } }<CODESPLIT>Create new instance from top two elements on stack .<CODESPLIT>0
public void createEquiAngle ( float radius, int numRotations, int numSamples, float jitter, Callback2d callback ) { spacing = radius /Rotations ; for ( sample sampleSamples sample ) { angle =0 ( ). ( sampleRotations ) /Samples ; r = radius sample / (Samples - 1 ) + ( rnd. nextFloat ( )0 - 10 ) spacing jitter ; x = ( ).ro9 ( angle +5 ( float ). ) r ; float y = ( float ).ro9 ( angle ) r ; callback. onNewSample ( x, y ) ; } }<CODESPLIT>Create <code > numSamples< / code > number of samples on a spiral with maximum radius <code > radius< / code > around the center using <code > numRotations< / code > number of rotations along the spiral and call the given <code > callback< / code > for each sample generated . <p > The generated sample points are distributed with equal angle differences around the spiral so they concentrate towards the center . <p > Additionally the radius of each sample point is jittered by the given <code > jitter< / code > factor .<CODESPLIT>1
private void readObject ( ObjectInputStream in ) throws IOException, ClassNotFoundException { in defaultReadObject ( ) ; severity = SEVER_INFO ; summary = null ; detail = null ; ordinal = in readInt ( ) ; ( ordinalINFO ( ) ) severity = FacesMessage. SEVER_INFO ; } ( ordinalWARN ( ) ) severity = FacesMessage. SEVER_WARN ; } ( ordinal SEVERERROR ( ) ) severity = FacesMessage. SEVER_ERROR ; } ( ordinal SEVERFATAL ( ) ) severity = FacesMessage. SEVER_FATAL ; } summary ( ) in readObject ( ) ; detail ( ) in readObject ( ) ; rendered ( Boolean ) in readObject ( ) ; }<CODESPLIT><p > Reconstruct {<CODESPLIT>1
public void waitForLogMessage ( final String logSearchString, int waitTime ) throws TimeoutException { WaitFor waitForCondition ( ( this ) ( ) ) ; }<CODESPLIT>Stop and wait till given string will show in container output .<CODESPLIT>1
public Query from ( final Collection Expression > fromColumns ) { ( ) return this ; } thisColumns addAll (Columns ) ; return this ; }<CODESPLIT>Adds the FROM columns .<CODESPLIT>1
public void getElementSettingsConfig ( final String clientId, final String containerId, final I_CmsSimpleCallback CmsElementSettingsConfig > callback ) { CmsRpcAction CmsElementSettingsConfig > action new CmsRpcAction CmsElementSettingsConfig > ( ) { Override public void execute ( ) { start ( true ; ( ( ( ( containerId ( ( this ; } Override protected void onResponse ( CmsElementSettingsConfig result ) { ( ) callback execute ( ; } stop ( false ) ; } } ; action execute ( ) ; }<CODESPLIT>Requests the element settings config data for a container element specified by the client id . The data will be provided to the given call - back function . <p ><CODESPLIT>1
protected synchronized void copy ( Writable other ) { ( other null )OutputBuffer out = newOutputBuffer ( ) ; other write ( out ) ;InputBuffer in = newInputBuffer ( ) ; in reset ( out getData ( ), out getLength ( ) ) ; readFields ( in ) ; } ( ) IllegalArgumentException (map copied. ( ) ) ; } } IllegalArgumentException (source map ) ; } }<CODESPLIT>Used by child copy constructors .<CODESPLIT>1
public Cell C, width ( Value C, T width ) { min width ; pref width ; width ; return this ; }<CODESPLIT>Sets the minWidth prefWidth and maxWidth to the specified value .<CODESPLIT>0
public void createReference ( Reference reference ) throws GreenPepperServerException { sessionService startSession ( ) ; sessionService beginTransaction ( ) ; Repository repository loadRepository ( reference getSpec ( ) getRepository ( ) ( ) ) ; documentDao createReference ( reference ) ; sessionService commitTransaction ( ) ; log (Created Reference referencequire ( ) ( ) reference getSpec ( ) ( ) ) ; } ( ) sessionService rollbackTransaction ( ) ; handleException ( REFERENCECREATE ) ; } sessionService closeSession ( ) ; } }<CODESPLIT>{<CODESPLIT>0
public static Document buildPDFDocument ( com. snowtide. pdf. Document pdf, LucenePDFConfiguration config ) throws IOException { StringWriter sb = new StringWriter ( ) ; pdf pipe ( new OutputTarget ( sb ) ) ; Document doc = new Document ( ) ; LUCEINTERFACE addField ( doc, config. getBodyTextFieldName ( ), sb. toString ( ), config. storeBodyText ( ), config. indexBodyText ( ), config. tokenizeBodyText ( ) ) ; for (. metadata pdf. getAttributeMap ( ). ( ) ) docPropName = metadata ( ) ; fieldName = config getMetadataFieldMapping ( docPropName ) ; ( fieldName null ) ( config copyAllPDFMetadata ( ) ) fieldName = docPropName ; } } } value = metadata getValue ( ) ; valueStr ; ( value null ) (DEBUG ) log (Null document property value name docPropName pdf ( ) ) ; } ( value String ) ( docPropName ( com snowide pdf DocumentMOD ) docPropName ( com snowide pdf Document ) ) valueStr = DateTools. dateToString ( PDFDateParser. parseDateString ( ( ) value ), DateTools. Resolution. MILLISECOND ) ; } ( ) log. (PDF date string parsed into a javaDate instance value pdf. ( ) ) ; valueStr = ( String ) value ; } } valueStr = ( String ) value ; } } ( value Number ) valueStr = value. toString ( ) ; } (DEBUG ) log ( document property value type value ( ) ( ) name docPropName pdf ( ) ) ; } LUCEINTERFACE. addField ( doc, fieldName, valueStr, config. storeMetadata ( ), config. indexMetadata ( ), config. tokenizeMetadata ( ) ) ; } return doc ; }<CODESPLIT>Creates a new Lucene Document instance using the PDF text and metadata provided by the PDFxStream Document using a default {<CODESPLIT>0
protected void removeTargetListeners ( Component comp ) { comp removeMouseListener ( _targetListener ) ; comp removeMouseMotionListener ( _targetListener ) ; ( Container ) Container cont = ( Container ) comp ; removeListener ( _childListener ) ; ( getComponent ( ) ) removeTargetListeners ( cont getComponent ( ) ) ; } } }<CODESPLIT>Check to see if we need to do component - level cursor setting and take care of it if needed .<CODESPLIT>0
public Observable PolicyAssignmentInner deleteByIdAsync ( String policyAssignmentId ) { return deleteByIdWithServiceResponseAsync ( policy ) map ( ServiceResponseAssignment,Assignment ( ) Override public PolicyAssignmentInner ( ServiceResponse PolicyAssignmentInner response ) { return body ( ) ; } } ) ; }<CODESPLIT>Deletes a policy assignment by ID . When providing a scope for the assigment use / subscriptions / { subscription - id } / for subscriptions / subscriptions / { subscription - id } / resourceGroups / { resource - group - name } for resource groups and / subscriptions / { subscription - id } / resourceGroups / { resource - group - name } / providers / { resource - provider - namespace } / { resource - type } / { resource - name } for resources .<CODESPLIT>0
private void getFights ( Document doc, Event event ) { logger. info (Getting fights event #[{}]", event. getSherUrl ( ), event. getName ( ) ) ; SherBaseObject sEvent = new SherBaseObject ( ) ; sEvent setName ( event ( ) ) ; sEvent setShUrl ( eventherUrl ( ) ) ; List Fight fights = new ArrayList ( ) ; Elements mainFElement = doc. select (contentevent ) ; Elements fighters = mainFElement. select (h3 a ) ; SherBaseObject mainFighter1 = new SherBaseObject ( ) ; Element mainF1 = fters. ( ) ; mainF setShUrl ( mainF (href ) ) ; mainF setName ( mainF1 select (spanname ) html ( ) ) ; SherBaseObject mainFighter = new SherBaseObject ( ) ; Element mainF2 = fters. ( ) ; mainF setShUrl ( mainF (href ) ) ; mainF setName ( mainF select (spanname ) html ( ) ) ; Fight mainFight = new Fight ( ) ; mainF setEvent ( sEvent ) ; mainF setF1 ( mainF1 ) ; mainF setF ( mainF ) ; mainF setResult ( ParserResult ( mainF first ( ) ) ) ; Elements mainTd = mainFElement. select ( ) ; ( main ( ) ) mainF setMethod ( main ( ) html ( ) replaceAll (, "" ) trim ( ) ) ; mainF setRound ( parseInt ( main ( ) html ( ) replaceAll (, "" ) trim ( ) ) ) ; mainF setTime ( main ( ) html ( ) replaceAll (, "" ) trim ( ) ) ; } mainF setDate ( event getDate ( ) ) ; fights. add ( mainF ) ; logger. info (F added {}", mainFight ) ; logger. info (Found fights, fights. size ( ) ) ; Elements t = doc. select (eventmatch table tr ) ; fights. addAll ( parseEventFights ( t, event ) ) ; event setFights ( fights ) ; }<CODESPLIT>parses an event from a jsoup document<CODESPLIT>0
public PropertyDescriptor [ ] getTeaBeanPropertyDescriptors ( Class <? > beanClass ) { ( beanClass null ) return NO_PROPERTIES ; } PropertyDescriptor properties = null ; Map PropertyDescriptor allProps = null ; allProps = BeanAnalyzer getAllProperties ( new GenericType ( beanClass ) ) ; } ( ) return NO_PROPERTIES ; } Collection PropertyDescriptor cleanProps = new ArrayList PropertyDescriptor ( allProps ( ) ) ; Map, PropertyDescriptor = allProps. entrySet ( ). iterator ( ) ; while ( ( ) ) Map., PropertyDescriptor =. next ( ) ; name = ( ) ; PropertyDescriptor desc =. getValue ( ) ; ( name null name ( )class ( name ) ) } ( desc KeyPropertyDescriptor ) KeyedPropertyDescriptor keyed = ( KeyedPropertyDescriptor ) desc ; Class type = keyedPropertyType ( ) getRawType ( ) getType ( ) ; desc = new ArrayPropertyDescriptor ( beanClass type ) ; } ( ) } } ( beanClass isArray ( ) desc getReadMethod ( ) null ) } cleanProps. add ( desc ) ; } properties = cleanProps ( new PropertyDescriptor cleanProps ( ) ) ; sortPropertyDescriptors ( properties ) ; return properties ; }<CODESPLIT>A function that returns an array of all the available properties on a given class . <p > <b > NOTE : < / b > If possible the results of this method should be cached by the caller .<CODESPLIT>1
@ Override public synchronized void serverStopping ( ) { ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) Tr. entry ( tc,serverStopping,generate in progress = generateInProgress ) ; } serverStopping = true ; for ( generate ) { { Thread. sleep ( 500 ) ; } ( ) = 40 ; } } ( TraceComponent isAnyTracingEnabled ( ) tc isEntryEnabled ( ) ) Tr. exit ( tc,serverStopping ) ; } }<CODESPLIT>/ * ( non - Javadoc )<CODESPLIT>1
void flattenToSubMessageBuffer ( ByteBuffer buf ) throws IOException { assert ( mitems null ) ; assert (! mitems isEmpty ( ) ) ; buf put ( VoltDbMessageFactory FRAGMENTTASKID ) ; super flattenToBuffer ( buf ) ; short nInputDepIds = 0 ; short nOutputDepIds = 0 ; short nUnplanned = 0 ; for ( FragmentData mitems ) ( item minputId )Ids ++ ; } ( item moutputId null )Ids ++ ; } ( item mfragmentPlan null ) ++ ; } } buf putShort ( ( short ) mitems size ( ) ) ; buf putShort ( nUnanned ) ; buf put ( misFinal ( ) : ( ) ) ; buf put ( mtaskType ) ; buf put ( memptyForRestart ( ) : ( ) ) ; buf put ( mexecutedOnPreviousLeader ( ) : ( ) ) ; buf put ( nOutputIds ( ) : ( ) ) ; buf put ( nInputIds ( ) : ( ) ) ; ( mprocToLoad null ) buf putShort ( ( short ) mNameToLoad length ) ; buf put ( mNameToLoad ) ; } buf putShort ( ( short ) ) ; } buf put ( mperFragmentStatsRecording ( ) : ( ) ) ; buf put ( mcoordinatorTask ( ) : ( ) ) ; buf put ( mPartTxn ( ) : ( ) ) ; buf putLong ( mrestartTimestamp ) ; buf putLong ( mlastSpUniqueId ) ; for ( FragmentData mitems ) buf put ( item mplanHash ) ; } for ( FragmentData mitems ) ( item mstmtName null ) buf putShort ( ( short ) ) ; } assert ( item mstmtName length Short MAXVALUE ) ; buf putShort ( ( short ) item mstmtName length ) ; buf put ( item mstmtName ) ; } } for ( FragmentData mitems ) buf putInt ( item mparameterSet remaining ( ) ) ; buf put ( item mparameterSet asReadOnlyBuffer ( ) ) ; } (OutputIds ) for ( FragmentData mitems ) buf putInt ( item moutputId ) ; } } (InputIds ) for ( FragmentData mitems ) ( item minputId ) buf putShort ( ( short ) ) ; } buf putShort ( ( short ) ) ; buf putInt ( item minputId ) ; } } } ( mprocedureName null ) buf putShort ( ( short ) ) ; } assert ( mprocedureName length Short MAXVALUE ) ; buf putShort ( ( short ) mprocedureName length ) ; buf put ( mprocedureName ) ; } buf putInt ( mcurrentBatchIndex ) ; ( mbatchTimeout BatchTimeoutOverrideTIMEOUT ) buf put ( BatchTimeoutOverrideType NOOVERRIDEBATCHTIMEOUT getValue ( ) ) ; } buf put ( BatchTimeoutOverrideType HASOVERRIDEBATCHTIMEOUT getValue ( ) ) ; buf putInt ( mbatchTimeout ) ; } buf putShort ( ( short ) minvolvedPartitions size ( ) ) ; for ( pid mPartitions ) buf putInt ( pid ) ; } ( minitiateTaskBuffer null ) ByteBuffer dup = minitiateTaskBuffer duplicate ( ) ; buf putInt ( dup remaining ( ) ) ; buf put ( dup ) ; } buf putInt ( ) ; } for ( short mitems. ( ) ) FragmentData item = mitems. ( index ) ; ( item mfragmentPlan null ) buf putShort ( index ) ; buf putInt ( item mfragmentPlan length ) ; buf put ( item mfragmentPlan ) ; assert ( item mstmtText null ) ; buf putInt ( item mstmtText length ) ; buf put ( item mstmtText ) ; } } }<CODESPLIT>/ * Serialization Format [ description : type : byte count ]<CODESPLIT>0
public T readRow ( BufferedReader bufferedReader, ParseError parseError ) throws ParseException, IOException { check ( ( ; ( return null ; } return process ( line, bufferedReader, parseError, getLineNumber ( bufferedReader ) ) ; } }<CODESPLIT>Read in all of the entities in the reader passed in but without the header .<CODESPLIT>0
private int transformToRTF ( ElemTemplateElement templateParent, DTM dtmFrag ) throws TransformerException { XPathContext = m_context ; ContentHandlerHandler getContentHandler ( ) ; resultFragment ; SerializationHandler savedRTreeHandler = this. m_izationHandler ; ToAX new ToXMLSAX ( ) ; setContentHandler (Handler ) ;Transformer ( this ) ; m_izationHandler = h ; SerializationHandler rth = m_izationHandler ; startDocument ( ) ; flushPending ( ) ; executeChildTemplates ( templateParent true ) ; flushPending ( ) ;Fragment ( ) ; } endDocument ( ) ; } } ( SAXException ) ( ) ; } this. m_izationHandler = savedRTreeHandler ; } return resultFragment ; }<CODESPLIT>Take the contents of a template element process it and convert it to a string .<CODESPLIT>0
public static void encodeLength ( ByteArrayOutputStream out, int length ) { entering ( CLASSencodeLength new { out length } ) ; byteCount = ; encodedLength = ; do { encodedLength <<= 8 ; encodedLength |= ( ) ( length ) ; length 7 ; byteCount ++ ; } while ( ) do { encodedByte ( ) ( encodedLength ) ; encodedLength >>= 8 ; ( byteCount ) encodedByte |= ( byte ) 0x ; } out write ( encodedByte ) ; } while ( byteCount ) }<CODESPLIT>/ * Length - bytes are written out in order from most to least significant but are computed most efficiently ( using bit shifts ) from least to most significant . An integer serves as a temporary storage which is then written out in reversed order .<CODESPLIT>1
public static synchronized PingManager getInstanceFor ( XMPPConnection connection ) { Ping ping ( connection ) ; ( ping ) ping new Ping ( connection ) ; put ( connection, ping ) ; } return pingManager ; }<CODESPLIT>Gets the account registration info from the server . @throws XMPPErrorException @throws NoResponseException @throws NotConnectedException @throws InterruptedException<CODESPLIT>0
@ Override public List dynamicQuery ( DynamicQuery dynamicQuery ) { return findWithDynamicQuery ( dynamicQuery ) ; }<CODESPLIT>Returns the number of rows matching the dynamic query .<CODESPLIT>0
public void write ( String s, int off, int len ) throws IOException { ( writer ) writer write ( off ) ; } ensureOpen ( ) ; strBuffer ( s ( off off ) ) ; nextChar ; } }<CODESPLIT>Write a portion of a String .<CODESPLIT>1
public void concat ( String trg, String [ ] src, boolean restricted ) throws IOException { ( restricted }<CODESPLIT>{<CODESPLIT>0
@ Override public ExecuteProvisionedProductServiceAction executeProvisionedProductServiceAction ( ExecuteProvisionedProductServiceAction request ) { beforeClientExecution executeExecuteProvisionedProductServiceAction ( request }<CODESPLIT><p > Executes a self - service action against a provisioned product . < / p ><CODESPLIT>1
private T getWrappedPublisher ( Publisher flexiblePublisher, Class < T > type ) { ( ( flexPublisher FPublisher ) ) IllegalArgumentException (. (Publisher type type FPublisher.Publisher. ( ) ) ) ; } List ConditionalPublisher conditions = ( ( FPublisher ) flexPublisher ) getPublishers ( ) ; for ( ConditionalPublisher condition conditions ) ( type isInstance ( condition getPublish ( ) ) ) return type. cast ( condition. getPublisher ( ) ) ; } } return null ; }<CODESPLIT>Gets the publisher wrapped by the specofoed FlexiblePublisher .<CODESPLIT>1
public IterableContact queryByUpdatedDate ( Object parent, java util Date updatedDate ) { return queryByField ( parent,Contact UPDATEDATE ( ), ) ; }<CODESPLIT>query - by method for field updatedDate<CODESPLIT>1
static boolean isGetOrSetKey ( Node node ) { ( node. getToken ( ) ) { GETTERDEF SETTERDEF return true ; COMPPROP return node getBooleanProp ( COMPPROPGETTER ) node getBooleanProp (. COMPPROPSETTER ) ; default : break ; } return false ; }<CODESPLIT>Determines whether a node represents an object literal get or set key ( e . g . key1 in { get key1 () {} set key2 ( a ) {} ) .<CODESPLIT>1
private boolean isCtFieldACollection ( CtField ctField ) { return ctField getType ( ) equals ( get ( Collection getName ( ) ) ) ctField getType ( ) equals ( get ( List getName ( ) ) ) ctField getType ( ) equals ( get ( Set getName ( ) ) ) ; } ( ) ( ) ; return false ; } }<CODESPLIT>Add Method to ConstPool . If method was not in the ConstPool will add and return index otherwise will return index of already existing entry of constpool<CODESPLIT>0
public static void readable ( final File path, final String message ) throws IllegalArgumentException { ( path message ; ( ( ) IllegalArgumentException ( ) } }<CODESPLIT>FIXME me animal sniffer this is 1 . 6 API only<CODESPLIT>0
@ Override public ModifyEventResult modifyEvent ( ModifyEventRequest request ) { request beforeClientExecution request return executeModify ( request }<CODESPLIT><p > Modifies the replication instance to apply new settings . You can change one or more parameters by specifying these parameters and the new values in the request . < / p > <p > Some settings are applied during the maintenance window . < / p > <p / ><CODESPLIT>0
public java. util. List InventoryDeletionStatusItem > getInventoryDeletions ( ) { (Delet ) inventoryDelet new com amazonaws internal SdkInternalListDeletion ( ) ; } return inventoryDeletions ; }<CODESPLIT><p > A list of status items for deleted inventory . < / p ><CODESPLIT>0
public static boolean validateServiceName ( Configuration conf, String nameServiceId ) { Collection namesIds = DFSUtil. getNameServiceIds ( conf ) ; ( namesIds null namesIds isEmpty ( ) ) ( name null ) System. err. println (Need input a namesvice id ) ; return false ; } ( namesIds contains ( name ) ) System. err. println ( invalid namesvice id nameServiceId ) ; return false ; } } ( name null ) System. err. println ( invalid namesvice id nameServiceId ) ; return false ; } return true ; }<CODESPLIT>Valide if the input service name is valid<CODESPLIT>1
@ Override public OUTPUT newInstance ( Map < String INPUT > inputMap ) throws FAILURE { builder = new ( ) ( ( ) ( ) ) (newInstanceMap<String Input unsupported ) ; UnsupportedOperationException ( builder ( ) ) ; }<CODESPLIT><p > <b > Unsupported< / b > . Override to provide an implementation . < / p ><CODESPLIT>1
long getProposedEpoch ( ) throws IOException { { pEpoch = FileUtils. readLongFromFile ( this. fProEpoch ) ; return pEpoch ; } ( FileNotFoundException ). (File initialize acknowled epoch to ) ; return - 1 ; } ( IOException ). error (IOException access acknowled epoch ) ; ; } }<CODESPLIT>Gets the last proposed epoch .<CODESPLIT>1
@ SuppressWarnings (WeakerAccess ) public ParameterizableRequest < Map < String, Object >, AuthenticationException > delegation ( ) {Url urlUrl parse ( auth0 getDomainUrl ( ) ) newBuilder ( ) addPath ( DE ) build ( ) ; parameters newBuilder ( ) set ( getClientId ( ) ) set (JWT ) asDictionary ( ) ; return factory. rawPOST ( url, client, gson, authErrorBuilder ). addParameters ( parameters ) ; }<CODESPLIT>Performs a custom <a href = https : // auth0 . com / docs / api / authentication#delegation > delegation< / a > request that will yield a delegation token . Example usage : <pre > { @code client . delegation () . addParameter ( api_type firebase ) . start ( new BaseCallback<Map<String Object >> () { { @literal } Override public void onSuccess ( Map<String Object > payload ) {}<CODESPLIT>1
public void refreshToken ( ) throws OAuthSystemException, OAuthProblemException { cleanError ( ) ; ( accessToken null refreshToken null ) OAuth (Access token Refresh token ) ; }inClient httpClient = newinURLConnectionClient ( ) ; OAuthClientRequest request = OAuthClientRequest tokenLocation ( settings getURL ( Constants TOKENREFRESHURL ) ) buildBodyMessage ( ) ; Map headers = new HashMap ( ) ; headers put ( OAuth HeaderType CONTENTTYPE, OAuth ContentType JSON ) ; headers put (UserAgent, this userAgent ) ; Map params = new HashMap ( ) ; params put (granttype, GrantType REFRESHTOKEN ) ; params put (accesstoken, accessToken ) ; params put (refreshtoken, refreshToken ) ; body = JSON buildJSON ( params ) ; request setBody ( body ) ; updateTokens ( httpClient, request, headers ) ; }<CODESPLIT>Refreshing tokens provides a new set of access and refresh tokens .<CODESPLIT>1
public void syncContactTypeToMain ( ) { ReferenceFieldContactType ( ReferenceField ) this getMainRecord ( ) getField (Detail ) ; strContactContact ( ) ; this syncRecordToMainField (ContactType null, strContactTypeParam ) ; }<CODESPLIT>Read the current file in the header record given the current detail record .<CODESPLIT>0
@ Override (unchecked ) public ChronoZonedDateTime InternationalFixedDate zonedDateTime ( TemporalAccessor temporal ) { return (ZFixedDate ) super ( temporal ) ; }<CODESPLIT>A property tied to the map updated when the idle state event is fired .<CODESPLIT>0
private ProtoNetwork stage1 ( final File [ ] networks ) { beginStage ( PH2STH,, NUMPHS ) ; net = networks length ; StringBuilder bldr = new StringBuilder ( ) ; (Merging ) ; ( net ) ; ( network ) ; ( ) (s ) ; } stageOutput ( toString ( ) ) ; t = ( ) ; CollectionNetworkDescriptords = sizedArrayList ( net ) ; for ( network networks ) root = network ( ) ; netPath = asPath ( root PROTONETWORKFILENAME ) ; networkBin = new ( netPath ) ;ds add ( new BinaryProtoNetworkDescriptor ( networkBin ) ) ; } ProtoNetwork ret = p2 stageMerger ( n ) ; new ( artifactPath ( ) "/merged ) mkdirs ( ) ; p2 stage4WriteEquivalentProtoNetwork ( ret, artifactPath ( )merged ) ; (Debug ( ) ) TextProtoNetworkExternal textExternal = new TextProtoNetworkExternal ( ) ; textExternalizer writeProtoNetwork ( ret, artifactPath. ( )merged ) ; } ( ) error ( not write out equivalence proto network." ) ; } } t = ( ) ; setLength ( 0 ) ; markTime (, t, t2 ) ; markEndStage ( ) ; stageOutput (. toString ( ) ) ; return ret ; }<CODESPLIT>Stage one merger of networks returning the merged proto - network .<CODESPLIT>1
@ Override public EnableStreamingTaskResult enableHlsStreaming ( String spaceId, boolean secure ) throws ContentStoreException {Streaming taskStreaming ( ) ; spaceId ) ;Secure secure ) ; return EnableStreamingTaskResult deserialize ( contentStore performTask (Task ENABLEHLS__NAME, taskParams serialize ( ) ) ) ; }<CODESPLIT>{<CODESPLIT>1
public static Map Entry String, Map String, getSystemBarsCommand ( ) { returnMap SimpleEntry ( GETSYSTEMBARS, ImmutableMap ( ) ) ; }<CODESPLIT>This method forms a { @link Map } of parameters for the getting of a network connection value .<CODESPLIT>0
public Response postQuery ( final String system, final InputStream input, final String resource, final HttpHeaders httpHeaders ) { JaxRx impl Systems ( system ) ; Document new Schema (post ) check ( input ) ; QueryParameter param getParameters ( impl ) ; path new ( resource paramHeaders ) ; return createResponse ( impl, path ) ; }<CODESPLIT>This method will be called when a HTTP client sends a POST request to an existing resource with application / query + xml as Content - Type .<CODESPLIT>1
public boolean hasValue ( int index ) { (Collection List ) return index ( ( List ) m_baseCollection ) size ( ) ; } (Collection SortedMap ) return index ( ( SortedMap, ) m_baseCollection ) size ( ) ; } return false ; }<CODESPLIT>Prepares this widget dialog parameter to be committed . <p ><CODESPLIT>0
public void marshall ( DescribeDirectConnectGatewayAssociationsRequest describeDirectConnectGatewayAssociationsRequest, ProtocolMarshaller protocolMarshaller ) { ( describeDirectConnectGatewayAssociationsRequest null ) SdkClientException ( marshall(...)" ) ; } protocolMarshaller marshall ( describeDirectConnectGatewayAssociationsRequest getAssociationId ( ),IDBINDING ) ; protocolMarshaller. marshall ( describeDirectConnectGatewayRequest.AssociatedGatewayId ( ), ASSBINDING ) ; protocolMarshaller marshall ( describeDirectConnectGatewayAssociationsRequest getDirectId ( ), DIRECTCONNECTWAYIDBINDING ) ; protocolMarshaller marshall ( describeDirectConnectGatewayAssociationsRequest getMaxResults ( ), MAXRESULTSBINDING ) ; protocolMarshaller. marshall ( describeDirectConnectGatewayAssociationsRequest. getNextToken ( ), NEXTTOKENBINDING ) ; protocolMarshaller. marshall ( describeDirectConnectGatewayRequest.VirtualGatewayId ( ),BINDING ) ; } ( ) SdkClientException ( marshall request. ( ) ) ; } }<CODESPLIT><p > The sources for the applications ( up to 10 ) . If you specify scaling plan names you cannot specify application sources . < / p > <p > <b > NOTE : < / b > This method appends the values to the existing list ( if any ) . Use { @link #setApplicationSources ( java . util . Collection ) } or { @link #withApplicationSources ( java . util . Collection ) } if you want to override the existing values . < / p ><CODESPLIT>0
public Object execEval ( String arg ) { return scriptEngine. eval ( "eval(" + arg + ")" ) ; } ( Script ) BProcessException ( evaluating script ) ; } }<CODESPLIT>Returns the JSON object from a string<CODESPLIT>0
@ Override public Map < ServerGroup, EVCacheServerGroupConfig > discoverInstances ( String appName ) throws IOException { propertyName = appNameNODES ; nodeListString =CacheConfig getInstance ( ) getDynamicStringProperty ( propertyName "" ) ( ) ; ( ( ) ) (List Nodes nodeListString ) ; ( nodeListString nodeListString ( ) ) return bootstrapFromSystemProperty ( nodeListString ) ; ( env ) return bootstrapFrom ( appName ) ; return Collections. ServerGroup, EVCacheServerGroupConfig emptyMap ( ) ; }<CODESPLIT>Netflix specific impl so we can load from eureka .<CODESPLIT>0
private boolean distinguishedNameEquals ( String dsn1, String dsn2 ) { return500 ( dsn (500 ( dsn ) ) }<CODESPLIT>Compare two DSN<CODESPLIT>1
public static BloomKFilter deserialize ( InputStream in ) throws IOException { ( in null ) IOException (Input stream ) ; } { dataInputStream = new ( in ) ;HashFunc = dataInputStream. readByte ( ) ; bitsetArray = dataInputStream. readInt ( ) ; data = new bitsetArray ; for ( bitsetArray ) data = dataInputStream. readLong ( ) ; } return new BloomKFilter ( data, numHashFunc ) ; } ( ) IOException io = new IOException ( to deserialize BloomKFilter ) ; io. ( ) ; ; } }<CODESPLIT>Deserialize a bloom filter Read a byte stream which was written by { @linkplain #serialize ( OutputStream BloomKFilter ) } into a { @code BloomKFilter }<CODESPLIT>1
public void setRestoreLastValid ( boolean restoreLastValid ) { (Selection ) ( text restore selection ) this. restoreLastValid = restoreLastValid ; ( restoreValid ) ( restoreFocusListener ) restoreFocusListener LastValidFocusListener ( ) addListener ( restoreFocusListener ) ; } removeListener ( restoreFocusListener ) ; } }<CODESPLIT>Adds vertical or horizontal {<CODESPLIT>0
public static LongBinding decrementExact ( ObservableLongValue a ) { return createLongBinding ( ( decrementExact ( ( ) ) }<CODESPLIT>Binding for { @link java . lang . Math#decrementExact ( long ) }<CODESPLIT>1
public static String dgstHex ( InputStream is, Digest digest ) throws IOException { checkNotNull ( ) ; ( ) ; return BaseEncoding base16 ( ) encode (stBytes ) ; }<CODESPLIT>Calculates digest and returns the value as a hex string .<CODESPLIT>1
private void write ( TargetType theTarget, ValueSetTm theValueSetTm, File theOutputDirectory, String thePackageBase ) throws IOException { (OutputDirectory ( ) ) theOutputDirectory mkdirs ( ) ; } (OutputDirectory isDirectory ( ) ) IOException (OutputDirectory directory ) ; } valueSetName = theSet getClassName ( ) ; prefix =FilenamePrefix ; suffix =FilenameSuffix ; (Target Target SOURCE ) ( suffix ( ) ) suffix +=java ; } } fileName = prefix valueSetName suffix ; = new ( theOutputDirectory fileName ) ; OutputStreamWriter = new OutputStreamWriter ( new FileOutputStream ( false )UTF ) ; ourLog. (Writing file {}", f ( ) ) ; Velocity ctx = new Velocity ( ) ; InputStream template = null ; ctx put (valueSet, theValueSetT ) ; ctx put (packageBase, thePackageBase ) ; ctx put ( new EscapeTool ( ) ) ; VelocityEngine v VelocityHelper configureVelocityEngine (TemplateFile, myVelocityPath, myVelocityProperties ) ; (TemplateFile ) template = new FileInputStream (TemplateFile ) ; } templateName =Template ; ( templateName ) templateName = "/valueset ; } templateIs this getClass ( ) getResourceAsStream ( templateName ) ; } templateReader = new ( templateUTF ) ; v evaluate ( ctx, w, "", templateReader ) ; w close ( ) ; }<CODESPLIT>}<CODESPLIT>1
@ Override public void store ( Issue issue ) { ( issue ( ) ( ) Default ) DefaultInputFile defaultInputFile ( DefaultInputFile ) issue primary ( ) input ( ) ; (SkipStorage ( default ) ) return ; } defaultPublished ( ) ; }Issues initAndAddIssue ( issue ) ; }<CODESPLIT>Thread safe assuming that each issues for each file are only written once .<CODESPLIT>1
@ Deprecated public Class <? > getClassFromCollection ( final String collection ) { Set MappedClass mcs = mappedClassesByCollection. ( collection ) ; ( mcs == null mcs isEmpty ( ) ) MappingException ( ( collection mapped java class collection ) ) ; } ( mcs ( ) ) ( isInfoEnabled ( ) ). info ( format (Found more one class mapped to collection collectioncs ) ) ; } } return mcs. iterator ( ). next ( ). getClazz ( ) ; }<CODESPLIT>Converts a DBObject back to a type - safe java object ( POJO )<CODESPLIT>0
private Token eventuallyMatch ( Token. Kind kind ) { checkNot ( ) ; tokens ( index ) ; ( ) return null ; } index = index 1 ; return token ; } }<CODESPLIT>Match a given sequence of tokens whilst moving passed any whitespace encountered inbetween . In the case that meet the end of the stream or we don t match the expected tokens in the expected order then an error is thrown .<CODESPLIT>0
public static Waehrung of ( CurrencyUnit currencyUnit ) { (run return ( Whrun ) currency ; } return of ( currency getCurrencyCode ( ) ) ; } }<CODESPLIT>Gibt die entsprechende Currency als Waehrung zurueck .<CODESPLIT>1
private Content processParamTags ( boolean isNonTypeParams, ParamTag [ ] paramTags, Map < String, String > rankMap, TagletWriter writer, Set < String > alreadyDocumented ) { Content result = writer getOutputInstance ( ) ; ( paramTags ) for (Tags ) ParamTag = paramTags ; paramName = isNonTypeParams pt parameterName ( ) "<" pt parameterName ( ) ; ( rankMap ( parameterName ( ) ) ) writerRetriever ( ) warning ( pt position ( ), isNonTypeParamsdocletParameterswarn :docletTypeParameterswarn, paramName ) ; } rank = rankMap ( pt parameterName ( ) ) ; ( rankDocument contains ( rank ) ) writerRetriever ( ) warning ( pt position ( ), isNonTypeParamsdocletParametersdupwarn :docletTypeParametersdupwarn, paramName ) ; } result addContent ( processParamTag ( isNonTypeParams, writer, pt, pt parameterName ( ), alreadyDocument size ( ) ) ) ; alreadyDocumented add ( rank ) ; } } return result ; }<CODESPLIT>Checks the current system time against the time limit throwing an InterruptedException if the time is up .<CODESPLIT>0
public void setVersions ( java. util. Collection String > versions ) { ( versions ) this versions ; return ; } this versions new com amazonaws internal SdkInternalList ( versions ) ; }<CODESPLIT><p > The version numbers of one or more launch template versions to delete . < / p ><CODESPLIT>0
private static ScriptRunner getRunner ( ) throws IOException { ( sharedRunner ( ) null ) ScriptRunner runner = ScriptRunnerFactory createRunner ( ) ; runner loadScript ( CSL getResource (dumpjs ) ) ; runner loadScript ( CSL getResource (itejs ) ) ; runner loadScript ( CSL. getResource (formatsjs ) ) ; runner. loadScript ( CSL.. getResource (loadsysjs ) ) ; } ( Script ) ( b javascript file ) ; }Runner set ( runner ) ; } return sharedRunner. get ( ) ; }<CODESPLIT>Calculates a list of available citation locales<CODESPLIT>0
public AbstractPrintQuery addMsgPhrase ( final SelectBuilder _selectBldr, final UUID... _msgPhrase ) throws EFapsException {Phrase new ( ) ; ( phrase _msg ) msg add (Phrase (UUID ) ; } return addMsgPhrase ( _selectB, msgph. toArray ( new MsgPhrase msgph. size ( ) ) ) ; }<CODESPLIT>Adds the msg phrase .<CODESPLIT>1
private String extractAttributes ( SoyMsg msg ) { attributes = new ( ) ; MESSAGEATTRIBUTE ( msg getDesc ( ) ) ; ( ( ) ) attributes ( group ( ) ) ; } return attributes. toString ( ) ; }<CODESPLIT>Extracts message attributes from the message description . Returns an empty {<CODESPLIT>1
VoltTable [ ] executeSlowHomogeneousBatch ( final List < QueuedSQL > batch, final boolean finalTask ) { MpTransactionState txnState = ( MpTransactionState ) m_txnState ; assert ( txnState null ) ; BatchState state = new BatchState ( batch ( ) txnState msite getCorSiteId ( )Task mprocedureName mprocNameToLoadForFragmentTasks mCallStats samplingStmts ( ) ) ; for ( batch. ( ) ) QueSQL queuedSQL = batch. ( ) ; assert ( queuedSQL stmt null ) ; collectorOutputId = mState getNextDependencyId ( ) ; state. m_ToResume = collectorOutputDepId ; ByteBuffer paramBuf = null ; paramBuf = ByteBuffer. allocate ( queuedSQL. params.SerializedSize ( ) ) ; queuedSQL params flattenToBuffer ( paramBuf ) ; } ( ) ( serial parameters SQL statementSQL. stmt. ( ) paramsSQL. params.String ( ) ) ; } assert ( paramBuf null ) ; paramBuf flip ( ) ; state addStatement (, queuedSQL stmt, paramBuf, msite ) ; } mState setupProcedureResume ( state mdepsResume ) ; for ( state. mdepsForLocalTask. ) ( mdepsForLocalTask ) } state mlocal setInputId ( state mdepsForLocal ) ; } mtxnState createLocalFragmentWork ( state. mlocalTask, state. mlocalFragsAreNonTransaction && finalTask ) ; ( mdistributedTask isEmpty ( ) ) state mdis set ( mbatchIndex ) ; mtxnState. createAllPartFragmentWork ( state. mdistributedTask ) ; } Map List VoltTable mapResults = msite recursRun ( mState ) ; assert ( mapResults null ) ; assert ( state mdepsToResume null ) ; assert ( state. mdepsToResume. length batch. size ( ) ) ; for ( batch. ( ) ) List VoltTable matchingTablesForId = mapResults ( state mdepsToResume ) ; assert ( matchingTablesForId null ) ; assert ( matchingTablesForId. size ( ) ) ; state. mresults =TablesId. ( ) ; } return state. m_results ; }<CODESPLIT>/ * Execute a batch of homogeneous queries i . e . all reads or all writes .<CODESPLIT>1
public GrpcServer start ( ) throws IOException { Retry retry (Starting gRPC server ( )Server start ( ) newBackoffRetry ( 500 ) ) ;Started = ; return this ; }<CODESPLIT>Start serving .<CODESPLIT>1
public Chunk new_close ( ) { chk compress ( ) ; ( Append ) ( ( Append ) ) closeChunk ( this ) return chk ; }<CODESPLIT>Slow - path append data<CODESPLIT>0
public static K, V > Predicate Map K, V > > anyEntry ( Predicate Map Entry K, V > > p ) { return forEntries ( Pred Map Entry, any ( ) ) ; }<CODESPLIT>Returns a predicate that evaluates to {<CODESPLIT>0
public static, U BiPredicate, U biPredicate ( CheckedBiPredicate, U predicate ) { return biPredicate ( predicate, THROWRUNTIMEEXCEPTION ) }<CODESPLIT>Wrap a {<CODESPLIT>0
private int calcFuByJanto ( ) { TileantoTile = comp. getJanto ( ). getTile ( ) ; = ; if (toTile == generalS getB ( ) ) += ; } if (toTile == personalS getJ ( ) ) += ; } if (antoTile getType ( ) == S ) += ; } return tmp ; }<CODESPLIT>待ちの種類による可符<CODESPLIT>0
@ Override public AddRoleToDBInstance addRoleToDBInstance ( AddRoleToDBInstance request ) { request beforeClientExecution request executeDBInstance ( request }<CODESPLIT>Marshall the given parameter object .<CODESPLIT>0
public static Object getValue ( Name name, int index ) { Assert notNull ( name,name not null ) ; LdapName ldapName = returnOrConstructLdapNameFromName ( name ) ; R r = ldapName getR ( index ) ; (dn ( ) ) warn (R at position index dn name is multivalue returned value is not to trustedConsider using namebased method instead ) ; } return rdn. getValue ( ) ; }<CODESPLIT>Get the value of the Rdn with the requested key in the supplied Name as a String .<CODESPLIT>0
