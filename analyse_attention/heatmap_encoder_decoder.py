import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# figure6-b heatmap of encoder-decoder attention

text=[['def', 'Ġbubble', 'Sort', 'Ġ(', 'Ġarr', 'Ġ)', 'Ġ:'],
['Ġn', 'Ġ=', 'Ġlen', 'Ġ(', 'Ġarr', 'Ġ)'],
['Ġfor', 'Ġi', 'Ġin', 'Ġrange', 'Ġ(', 'Ġn', 'Ġ-', 'Ġ1', 'Ġ)', 'Ġ:'],
['Ġfor', 'Ġj', 'Ġin', 'Ġrange', 'Ġ(', 'Ġn', 'Ġ-', 'Ġ1', 'Ġ-', 'Ġi', 'Ġ)', 'Ġ:'],
['Ġif', 'Ġarr', 'Ġ[', 'Ġj', 'Ġ]', 'Ġ>', 'Ġarr', 'Ġ[', 'Ġj', 'Ġ+', 'Ġ1', 'Ġ]', 'Ġ:', 'Ġ'],
 ['Ġarr', 'Ġ[', 'Ġj', 'Ġ]', 'Ġ,', 'Ġarr', 'Ġ[', 'Ġj', 'Ġ+', 'Ġ1', 'Ġ]', 'Ġ', 'Ġ=', 'Ġarr', 'Ġ[', 'Ġj', 'Ġ+', 'Ġ1', 'Ġ]', 'Ġ,'],
 ['Ġarr', 'Ġ[', 'Ġj', 'Ġ]' ]]
sum_len=sum(len(row) for row in text)
print(sum_len)
max_length = max(len(row) for row in text)

# 扩展每个子列表至最大长度
text_padded_list = [row + [''] * (max_length - len(row)) for row in text]

text_padded_np = np.array(text_padded_list)

# Encoder-decoder attention
values_e_s=[ 0.024577336385846138, 0.012808135710656643, 0.008713620714843273, 0.00990787148475647, 0.0061380877159535885, 0.022307217121124268, 0.021994518116116524, 0.009403741918504238, 0.027045782655477524, 0.00763128325343132, 0.010751975700259209, 0.005332580767571926, 0.022646941244602203, 0.02596496045589447, 0.008197430521249771, 0.025799419730901718, 0.017336424440145493, 0.016213851049542427, 0.006134939845651388, 0.01153919380158186, 0.0077950176782906055, 0.022130576893687248, 0.021778732538223267, 0.026531364768743515, 0.006453388370573521, 0.028703786432743073, 0.01896383985877037, 0.024219004437327385, 0.0057676262222230434, 0.019031593576073647, 0.007397860288619995, 0.01846999302506447, 0.007176700513809919, 0.02203325554728508, 0.020591653883457184,  0.027074143290519714, 0.006939897313714027, 0.011674010194838047, 0.0055604842491447926, 0.018912330269813538, 0.017666693776845932, 0.005057701375335455, 0.010425069369375706, 0.005114443134516478, 0.012643327005207539, 0.009728866629302502, 0.0036530315410345793, 0.0036530711222440004, 0.003660420188680291, 0.006484378594905138, 0.016860460862517357, 0.004769010003656149, 0.0036531679797917604, 0.027840187773108482, 0.006062993314117193, 0.014615975320339203, 0.005084450356662273, 0.01771746389567852, 0.009880173951387405, 0.0036530292127281427, 0.01692040078341961, 0.028049826622009277, 0.006386854685842991, 0.016487743705511093, 0.005210021045058966, 0.023195365443825722, 0.01109306886792183, 0.0036529945209622383, 0.0036552867386490107, 0.005303052719682455, 0.014529911801218987, 0.004527567885816097, 0.003653066698461771]
values_log_transformed_e_s = np.log(np.array(values_e_s) + 1e-6)
padded_values_log_transformed_e_s = np.full(text_padded_np.shape, np.nan)  # 先填充为nan
value_index = 0
for i, row in enumerate(text_padded_np):
    for j, _ in enumerate(row):
        if text_padded_np[i, j]:
            padded_values_log_transformed_e_s[i, j] = values_log_transformed_e_s[value_index]
            value_index += 1
plt.figure(figsize=(14, 8))
ax = sns.heatmap(padded_values_log_transformed_e_s, cmap='Blues', cbar=True, linewidths=0.5, linecolor='lightgrey')
for i in range(text_padded_np.shape[0]):
    for j in range(text_padded_np.shape[1]):
        if text_padded_np[i, j]:
            ax.text(j + 0.5, i + 0.5, text_padded_np[i, j].replace('Ġ',''),
                    ha="center", va="center", color="black")
plt.title('Encoder-decoder Attention')
plt.show()
# plt.savefig('Heatmap_en.pdf', format='pdf')
















# # 将填充部分的值设置为np.nan，以使这些部分在热力图上保持白色
# values_for_heatmap_improved = np.where(padded_values_np == -1, np.nan, padded_values_np)
#
# vmin = np.nanmin(values_for_heatmap_improved)
# vmax = np.nanmax(values_for_heatmap_improved)
#
# # 绘制热力图，使用'Blues'颜色映射
# plt.figure(figsize=(14, 8))
# ax = sns.heatmap(values_for_heatmap_improved, cmap='Blues', vmin=vmin, vmax=vmax, cbar=True, linewidths=0.5, linecolor='lightgrey')
#
# # 在每个单元格上添加对应的文本注释
# for i in range(text_padded_np.shape[0]):
#     for j in range(text_padded_np.shape[1]):
#         text_value = text_padded_np[i, j]
#         if text_value:  # 如果有文本值，则添加注释
#             # 根据单元格的值调整文本颜色以确保可读性
#             text_color = "black" if values_for_heatmap_improved[i, j] > (vmax - vmin) / 2 else "white"
#             ax.text(j + 0.5, i + 0.5, text_value,
#                     ha="center", va="center",
#                     color=text_color)
#
# plt.title('Improved Heatmap with Text Annotations')
# plt.show()

# # 使用一个颜色映射，其在低值时颜色非常浅，在高值时颜色深
# plt.figure(figsize=(14, 8))
# ax = sns.heatmap(values_for_heatmap_improved, cmap='Blues', cbar=True, linewidths=0.5, linecolor='lightgrey')
#
# # 在每个单元格上添加对应的文本注释
# for i in range(text_padded_np.shape[0]):  # 遍历行
#     for j in range(text_padded_np.shape[1]):  # 遍历列
#         text_value = text_padded_np[i, j]
#         if text_value:  # 如果有文本值，则添加注释
#             ax.text(j + 0.5, i + 0.5, text_value,
#                     ha="center", va="center",
#                     color="black" if not np.isnan(values_for_heatmap_improved[i, j]) else "lightgrey")
#
# plt.title('Improved Heatmap with Text Annotations')
# plt.show()


# # 首先，绘制只有数值的热力图
# plt.figure(figsize=(14, 8))
# ax = sns.heatmap(padded_values_np, cmap='Blues', cbar=True)
#
# # 然后，手动在每个单元格上添加对应的文本注释
# for i in range(text_padded_np.shape[0]):  # 遍历行
#     for j in range(text_padded_np.shape[1]):  # 遍历列
#         text_value = text_padded_np[i, j]
#         if text_value:  # 如果有文本值，则添加注释
#             ax.text(j + 0.5, i + 0.5, text_value,
#                     ha="center", va="center",
#                     color="black" if padded_values_np[i, j] > -1 else "gray")
#
# plt.title('Heatmap with Text Annotations')
# plt.show()

# 创建数据集
# data = np.array([
#     [1, 2, 3],
#     [4, 5, 6],
#     [7, 8, 9]
# ])

# 创建一个相同形状的数组，用于存储想要显示的文本





# # 使用DataFrame来展示数据更直观
# df = pd.DataFrame(data, columns=['A', 'B', 'C'], index=['X', 'Y', 'Z'])
#
# # 绘制热力图，并使用自定义文本
# sns.heatmap(df, annot=text, cmap='coolwarm', fmt='')
#
# # 显示图形
# plt.show()

#
# lines_ = [
#     # 每行的tokens和权重
#     [('def', 0.020633991807699203), ('bubble', 0.008180320262908936), ('Sort', 0.007569684647023678), ('(', 0.04995376989245415), ('arr', 0.005632512271404266), ('):', 0.026576725766062737)],
#     [('n', 0.0004737919080071151), ('=', 0.001975109102204442), ('len', 0.0004244713927619159), ('(', 0.0006644238601438701), ('arr', 0.0010924141388386488), (')', 0.026507457718253136)],
#     [('for', 0.00481368787586689), ('i', 0.0010333665413782), ('in', 0.0013685082085430622), ('range', 0.000936258991714567), ('(', 0.0022033031564205885), ('n', 0.00037141796201467514), ('-', 0.0013846706133335829), ('1', 0.0008012402686290443), ('):', 0.002724221907556057)],
#     [('for', 0.0006616803584620357), ('j', 8.924662688514218e-05), ('in', 0.0004875049344263971), ('range', 0.0005035419599153101), ('(', 0.0023143470752984285), ('n', 0.00023202309967018664), ('-', 0.0005645677447319031), ('1', 0.0006101139588281512), ('-', 0.000793169136159122), ('i', 0.0005648693768307567), ('):', 0.003322117030620575)],
#     [('if', 0.001349979778751731), ('arr', 0.00012938717554789037), ('[', 0.00028034462593495846), ('j', 6.919651059433818e-05), (']', 0.000368886801879853), ('>', 0.001170530216768384), ('arr', 0.00014075824583414942), ('[', 0.0005236758152022958), ('j', 6.276188651099801e-05), ('+', 0.0003392157959751785), ('1', 0.00035163311986252666), (']:', 0.004353850614279509)],
#     [('arr', 0.00022529407578986138), ('[', 0.0006267332355491817), ('j', 7.059991912683472e-05), ('],', 0.0005074322107248008), ('arr', 0.00015632444410584867), ('[', 0.0002273249556310475), ('j', 8.201022137654945e-05), ('+', 0.0003858202544506639), ('1', 0.0005368363345041871), (']', 0.0008328219410032034), ('=', 0.005297129973769188), ('arr', 0.0002571127552073449), ('[', 0.0030928272753953934), ('j', 0.00011189848009962589), ('+', 0.00041634737863205373), ('1', 0.00039353809552267194), ('],', 0.002843872644007206)],
#     [('arr', 0.00032730281236581504), ('[', 0.0003806879685726017), ('j', 8.98261132533662e-05), (']', 0.0005949183250777423), ('</s>', 0.197015643119812)]
# ]
#
# lines=[[('def', 0.020633991807699203),(' ', None), ('Ġbubble', 0.008180320262908936), ('Sort', 0.007569684647023678), (' ', None),('(', 0.04995376989245415), ('arr', 0.005632512271404266), ('):', 0.026576725766062737)],
# [('    ', None),('Ġn', 0.0004737919080071151), ('Ġ=', 0.001975109102204442), ('Ġlen', 0.0004244713927619159), ('(', 0.0006644238601438701), ('arr', 0.0010924141388386488), (')', 0.026507457718253136)],
# [('    ', None),('Ġfor', 0.00481368787586689), ('Ġi', 0.0010333665413782), ('Ġin', 0.0013685082085430622), ('Ġrange', 0.000936258991714567), ('(', 0.0022033031564205885), ('n', 0.00037141796201467514), ('Ġ-', 0.0013846706133335829), ('Ġ1', 0.0008012402686290443), ('):', 0.002724221907556057)],
# [('        ', None),('Ġfor', 0.0006616803584620357), ('Ġj', 8.924662688514218e-05), ('Ġin', 0.0004875049344263971), ('Ġrange', 0.0005035419599153101), ('(', 0.0023143470752984285), ('n', 0.00023202309967018664), ('Ġ-', 0.0005645677447319031), ('Ġ1', 0.0006101139588281512), ('Ġ-', 0.000793169136159122), ('Ġi', 0.0005648693768307567), ('):', 0.003322117030620575)],
# [('            ', None),('Ġif', 0.001349979778751731), ('Ġarr', 0.00012938717554789037), ('[', 0.00028034462593495846), ('j', 6.919651059433818e-05), (']', 0.000368886801879853), ('Ġ>', 0.001170530216768384), ('Ġarr', 0.00014075824583414942), ('[', 0.0005236758152022958), ('j', 6.276188651099801e-05), ('Ġ+', 0.0003392157959751785), ('Ġ1', 0.00035163311986252666), (']:', 0.004353850614279509)],
# [('                ', None),('Ġarr', 0.00022529407578986138), ('[', 0.0006267332355491817), ('j', 7.059991912683472e-05), ('],', 0.0005074322107248008), ('Ġarr', 0.00015632444410584867), ('[', 0.0002273249556310475), ('j', 8.201022137654945e-05), ('Ġ+', 0.0003858202544506639), ('Ġ1', 0.0005368363345041871), (']', 0.0008328219410032034), ('Ġ=', 0.005297129973769188), ('Ġarr', 0.0002571127552073449), ('[', 0.0030928272753953934), ('j', 0.00011189848009962589), ('Ġ+', 0.00041634737863205373), ('Ġ1', 0.00039353809552267194), ('],', 0.002843872644007206)],
# [('                    ', None),('Ġarr', 0.00032730281236581504), ('[', 0.0003806879685726017), ('j', 8.98261132533662e-05), (']', 0.0005949183250777423)]]









